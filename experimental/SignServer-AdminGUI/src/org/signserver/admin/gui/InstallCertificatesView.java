/*************************************************************************
 *                                                                       *
 *  SignServer: The OpenSource Automated Signing Server                  *
 *                                                                       *
 *  This software is free software; you can redistribute it and/or       *
 *  modify it under the terms of the GNU Lesser General Public           *
 *  License as published by the Free Software Foundation; either         *
 *  version 2.1 of the License, or any later version.                    *
 *                                                                       *
 *  See terms of license at gnu.org.                                     *
 *                                                                       *
 *************************************************************************/
package org.signserver.admin.gui;

import javax.swing.event.TableModelEvent;
import org.jdesktop.application.Action;
import org.jdesktop.application.SingleFrameApplication;
import org.jdesktop.application.FrameView;
import org.jdesktop.application.Task;
import java.io.File;
import java.io.IOException;
import java.security.cert.Certificate;
import java.security.cert.CertificateException;
import java.security.cert.X509Certificate;
import java.util.Arrays;
import java.util.Collection;
import java.util.Iterator;
import java.util.Vector;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;
import org.apache.log4j.Logger;
import org.ejbca.util.CertTools;
import org.signserver.common.WorkerStatus;

/**
 * Form for installing certificates to signers.
 *
 * @author markus
 * @version $Id$
 */
public class InstallCertificatesView extends FrameView {

    /** Logger for this class. */
    private Logger LOG = Logger.getLogger(InstallCertificatesView.class);

    private Vector<Integer> signerIds;
    private Vector<String> signerNames;
    private Vector<Vector<String>> data;
    private static Vector<String> columnNames = new Vector<String>();
    static {
        columnNames.add("Signer");
        columnNames.add("Signer certificate");
        columnNames.add("Certificate chain");
    };
    

    public InstallCertificatesView(SingleFrameApplication app, Integer[] signerIds,
            String[] signerNames) {
        super(app);

        this.signerIds = new Vector(Arrays.asList(signerIds));
        this.signerNames = new Vector(Arrays.asList(signerNames));
        initComponents();
        getFrame().setTitle("Install certificates for " + signerIds.length + " signers");
        data = new Vector<Vector<String>>();
        for (int row = 0; row < signerIds.length; row++) {
            Vector<String> cols = new Vector<String>();
            cols.add(SignServerAdminGUIApplication.getWorkerSession()
                    .getCurrentWorkerConfig(signerIds[row]).getProperty("NAME")
                    + " (" + signerIds[row] + ")");
            cols.add("");
            cols.add("");
            data.add(cols);
        }
        jTable1.setModel(new DefaultTableModel(data, columnNames) {

            @Override
            public boolean isCellEditable(int row, int column) {
                return column > 0;
            }

        });
        jTable1.getModel().addTableModelListener(new TableModelListener() {

            @Override
            public void tableChanged(final TableModelEvent e) {
                boolean enable = true;
                for (int row = 0; row < jTable1.getRowCount(); row++) {
                    if ("".equals(jTable1.getValueAt(row, 1))
                            || "".equals(jTable1.getValueAt(row, 2))) {
                        enable = false;
                        break;
                    }
                }
                jButtonInstall.setEnabled(enable);
            }
        });

        final BrowseCellEditor editor = new BrowseCellEditor(new JTextField(),
                JFileChooser.OPEN_DIALOG);
        editor.setClickCountToStart(1);
        jTable1.getColumn("Signer certificate").setCellEditor(editor);
        jTable1.getColumn("Certificate chain").setCellEditor(editor);
        
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        jButtonInstall = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        mainPanel.setName("mainPanel"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(org.signserver.admin.gui.SignServerAdminGUIApplication.class).getContext().getResourceMap(InstallCertificatesView.class);
        jButton2.setText(resourceMap.getString("jButton2.text")); // NOI18N
        jButton2.setName("jButton2"); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(org.signserver.admin.gui.SignServerAdminGUIApplication.class).getContext().getActionMap(InstallCertificatesView.class, this);
        jButtonInstall.setAction(actionMap.get("installCertificates")); // NOI18N
        jButtonInstall.setText(resourceMap.getString("jButtonInstall.text")); // NOI18N
        jButtonInstall.setEnabled(false);
        jButtonInstall.setName("jButtonInstall"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Signer", "Signer certificate", "Certificate chain"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setName("jTable1"); // NOI18N
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 817, Short.MAX_VALUE)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonInstall)))
                .addContainerGap())
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 370, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonInstall)
                    .addComponent(jButton2))
                .addContainerGap())
        );

        setComponent(mainPanel);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        getFrame().setVisible(false);
}//GEN-LAST:event_jButton2ActionPerformed

    @Action(block = Task.BlockingScope.WINDOW)
    public void installCertificates() {
        final String hostname = null;
        
        

        for (int row = 0; row < data.size(); row++) {
            final int workerid = signerIds.get(row);

            final File signerCertFile = new File((String) jTable1.getValueAt(row, 1));
            final File signerChainFile = new File((String) jTable1.getValueAt(row, 2));

            System.out.println("signer=" + workerid + "cert=\"" + signerCertFile + "\", signerChainFile=\"" + signerChainFile +"\"");


            try {

                final String scope = "GLOB";

                Collection<Certificate> signerCerts = CertTools.getCertsFromPEM(signerCertFile.getAbsolutePath());
                if(signerCerts.size() == 0){
                    JOptionPane.showMessageDialog(getFrame(), "Problem with signer certificate file for signer " + workerid + ":\n" + "No certificate in file", "Install certificates", JOptionPane.ERROR_MESSAGE);
                }
                if (signerCerts.size() != 1) {
                    // TODO: Warning more than one certificate
                }
                final X509Certificate signerCert = (X509Certificate) signerCerts.iterator().next();

                Collection<Certificate> signerChain;

                try {
                    signerChain = CertTools.getCertsFromPEM(signerChainFile.getAbsolutePath());
                    if(signerChain.size() == 0){
                        JOptionPane.showMessageDialog(getFrame(), "Problem with certificate chain file for signer " + workerid + ":\n" + "No certificates in file", "Install certificates", JOptionPane.ERROR_MESSAGE);
                    }


                    Iterator<Certificate> iter = signerCerts.iterator();
                    while(iter.hasNext()){
                      X509Certificate cert = (X509Certificate) iter.next();
                        WorkerStatus.printCert(cert, System.out);
                        System.out.println("\n");
                    }

                    SignServerAdminGUIApplication.getWorkerSession().uploadSignerCertificateChain(workerid, signerChain, scope);
                    SignServerAdminGUIApplication.getWorkerSession().uploadSignerCertificate(workerid, signerCert, scope);
                    SignServerAdminGUIApplication.getWorkerSession().reloadConfiguration(workerid);

                    signerIds.remove(row);
                    signerNames.remove(row);
                    data.remove(row);
                    row--;
                    jTable1.revalidate();
                } catch (IOException ex) {
                    LOG.error("Problem with certificate chain file", ex);
                    JOptionPane.showMessageDialog(getFrame(), "Problem with certificate chain file for signer " + workerid + ":\n" + ex.getMessage(), "Install certificates", JOptionPane.ERROR_MESSAGE);
                } catch (CertificateException ex) {
                    LOG.error("Problem with certificate chain file", ex);
                    JOptionPane.showMessageDialog(getFrame(), "Problem with certificate chain file for signer " + workerid + ":\n" + ex.getMessage(), "Install certificates", JOptionPane.ERROR_MESSAGE);
                }

            } catch (IOException ex) {
                LOG.error("Problem with signer certificate file", ex);
                JOptionPane.showMessageDialog(getFrame(), "Problem with signer certificate file for signer " + workerid + ":\n" + ex.getMessage(), "Install certificates", JOptionPane.ERROR_MESSAGE);
            } catch (CertificateException ex) {
                LOG.error("Problem with signer certificate file", ex);
                JOptionPane.showMessageDialog(getFrame(), "Problem with signer certificate file for signer " + workerid + ":\n" + ex.getMessage(), "Install certificates", JOptionPane.ERROR_MESSAGE);
            }
        }
        if (jTable1.getRowCount() == 0) {
            JOptionPane.showMessageDialog(getFrame(), "All certificates installed. Please verify the installed ceritifcates before activating the signers.");
            getFrame().dispose();
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButtonInstall;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JPanel mainPanel;
    // End of variables declaration//GEN-END:variables

    private void checkThatWorkerIsSigner(int signerid, String hostname) {
        // TODO
    }

}
