# $Id$
#
# Sample crypto worker configuration using a PKCS11CryptoToken.
#

# This worker will not perform any operations on its own and indicates this by
# using the worker type CryptoWorker
GLOB.WORKERGENID1.CLASSPATH=org.signserver.server.signers.CryptoWorker

# Uses a HSM or smart card through PKCS#11:
GLOB.WORKERGENID1.SIGNERTOKEN.CLASSPATH=org.signserver.server.cryptotokens.PKCS11CryptoToken

# Name for other workers to reference this worker:
WORKERGENID1.NAME=CryptoTokenP11

# Path to the PKCS#11 shared library file;
WORKERGENID1.SHAREDLIBRARY=/opt/ETcpsdk/lib/linux-x86_64/libcryptoki.so
#WORKERGENID1.SHAREDLIBRARY=/usr/lunasa/lib/libCryptoki2_64.so
#WORKERGENID1.SHAREDLIBRARY=/usr/lib/libsofthsm.so
#WORKERGENID1.SHAREDLIBRARY=/usr/lib/libaetpkss.so

# Method for pointing out which slot to use:
WORKERGENID1.SLOTLABELTYPE=SLOT_NUMBER
#WORKERGENID1.SLOTLABELTYPE=SLOT_INDEX
#WORKERGENID1.SLOTLABELTYPE=SLOT_LABEL

# Which slot to use:
WORKERGENID1.SLOTLABELVALUE=1
#WORKERGENID1.SLOTLABELVALUE=0
#WORKERGENID1.SLOTLABELVALUE=MySlot

# Optional password of the slot. If specified the token is "auto-activated".
#WORKERGENID1.PIN=foo123

# Optional PKCS#11 attributes file or attributes
#WORKERGENID1.ATTRIBUTESFILE=/opt/signserver/doc/sample-config/p11attributes.cfg
WORKERGENID1.ATTRIBUTES=\
    attributes(generate,CKO_PUBLIC_KEY,*) \= {\n   \
       CKA_TOKEN \= false\n   \
       CKA_ENCRYPT \= true\n   \
       CKA_VERIFY \= true\n   \
       CKA_WRAP \= true\n\
    }\n\
    attributes(generate, CKO_PRIVATE_KEY,*) \= {\n   \
       CKA_TOKEN \= true\n   \
       CKA_PRIVATE \= true\n   \
       CKA_SENSITIVE \= true\n   \
       CKA_EXTRACTABLE \= false\n   \
       CKA_DECRYPT \= true\n   \
       CKA_SIGN \= true\n   \
       CKA_UNWRAP \= true\n\
    }

# One key to test activation with is required. If this key does not already
# exist generate it after the worker has been created.
WORKERGENID1.DEFAULTKEY=testkey0
