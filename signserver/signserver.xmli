<?xml version="1.0"?>
<project name="signserver_specific" basedir=".">
	   
	   <import file="./build.xml"/>
	
	   <property name="java.trustpassword" value="changeit" />
	   <property name="java.trustcert" value="p12/rootcert.cer" />
	   <property name="httpsserver.password" value="serverpwd" />


	   <property name="ejbdd.src" value="${src}/deploy/ejb" />

	   <property name="eardd.src" value="${src}/deploy/ear" />
	   <property name="caear" value="${server.dist.dir}/${app.name}.ear" />
	
		
	   <property name="timeStampClientBuild" location="${bin}/timeStampClient"/>
	   <property name="timeStampClientJar" location="${client.dist.dir}/timeStampClient.jar"/>
	   <property name="server.primeCard.dist" location="${primeCard.home}/dist-${server.java.target}-${ejbca.target}"/>
	   <property name="server.primeCard.catoken" location="${primeCard.home}/caTokenClasses-${server.java.target}-${ejbca.target}"/>
	   <property name="client.primeCard.dist" location="${primeCard.home}/dist-${client.java.target}-${ejbca.target}"/>

	   <property name="performanceTestToolBuild" location="${bin}/performanceTestTool"/>
	   <property name="performanceTestToolJar" location="${client.dist.dir}/performanceTestTool.jar"/>

	   <property name="web.src" value="${src}/web/pub" />
	   <property name="webwar" value="${server.dist.dir}/web.war" />
		
	   <property name="healthcheck.src" value="${src}/web/healthcheck" />
	   <property name="healthcheckwar" value="${server.dist.dir}/healthcheck.war" />

	   <property name="healthcheck.authorizedips" value="127.0.0.1" />
	   <property name="healthcheck.minimumfreememory" value="1" />
	   <property name="healthcheck.checkdbstring" value="Select count(*) from signerconfigdata" />
	
	   <property name="signserverws.enabled" value="true" />
	   <property name="validationws.enabled" value="false" />
	
	   <path id="signserver.compile.classpath">
	        <path refid="signserver.ext.classpath" />
	        <fileset dir="lib" includes="*.jar" />
	        <fileset dir="lib/itext" includes="*.jar" />
	   	    <fileset dir="lib/quartz" includes="*.jar" />
	    	<fileset dir="lib/${server.java.target}" includes="*.jar" />
	   	    <fileset dir="lib/jaxws" includes="*.jar" />	   	    
    	    <fileset dir="lib/ext/james" includes="james-2.3.1.jar" />
	        <path refid="j2ee.classpath" />
	        
            <path location="tmp/jaxws/gen-classes/client" />
            <path location="tmp/validationws/gen-classes/client" />
	    </path>

	    <path id="server.compile.classpath">
	        <path refid="signserver.compile.classpath" />
	    </path>
		
		
	    <path id="client.compile.classpath">
	        <fileset dir="${client.primeCard.dist}" includes="*.jar" />
	        <path refid="signserver.compile.classpath" />
	    </path>
	
        <path id="signserver.ext.classpath">
          <fileset dir="lib/ext" includes="*.jar" />
        </path>

	    <path id="j2ee.classpath">
	        <fileset dir="${jboss.home}/lib">
	            <include name="jboss-system.jar" />
	        </fileset>
	        <fileset dir="${jboss.home}/client">
	            <include name="jbossall-client.jar" />
	            <include name="jboss-j2ee.jar" />
	            <include name="ejb3-persistence.jar" />
	            <include name="jboss-ejb3x.jar" />
	        </fileset>
	    </path>


	
      <path id="signserver.test.compile.classpath">
    	<fileset dir="lib/ext" includes="mysql-connector-java-3.1.10-bin.jar" />
        <path refid="server.compile.classpath" />
        <path location="${build}" />
        <path refid="j2ee.classpath" />
        <path refid="jaxws.classpath" />
        
      </path>
	
	   <!-- those are the default values used within JBoss for easy startup -->
	    <property name="web.contentencoding" value="ISO-8859-1" />
	    <property name="datasource.jndi-name" value="SignServerDS" />
	    <property name="datasource.jndi-name-prefix" value="java:/" />
	    <property name="database.name" value="hsqldb" />
	    <property name="datasource.mapping" value="Hypersonic SQL" />
	    <property name="database.url" value="jdbc:hsqldb:$${jboss.server.data.dir}$${/}hypersonic$${/}localDB" />
	    <property name="database.driver" value="org.hsqldb.jdbcDriver" />
	    <property name="database.username" value="sa" />
	    <property name="database.password" value="" />
	    <property name="httpserver.pubhttp" value="8080" />
	    <property name="httpserver.pubhttps" value="8442" />
	    <property name="httpserver.privhttps" value="8443" />
	    <property name="httpsserver.password" value="serverpwd" />
	    <property name="httpsserver.keystore" value="p12/tomcat.jks" />	
	    <property name="web.contentencoding" value="ISO-8859-1" />
	    <property name="deploy.ssh.user" value="jboss" />
	    <property name="deploy.ssh.keyfilepath" value="/home/jboss/.ssh/id_rsa" />
	    <property name="deploy.ssh.knownhostsfile" value="/home/jboss/.ssh/known_hosts" />
	    <property name="deploy.ssh.appsrvhome" value="/home/jboss/jboss" />
	    <property name="deploy.tomcat.version" value="tomcat55" />
	
    <target name="signserver.init" unless="buildMailSigner">
    	<antcall target="j2ee:check"/>
        <echo>
---------- CONFIGURATION PROPERTIES ----------
build.mode             = ${build.mode}
jboss.home             = ${jboss.home}
web.contentencoding    = ${web.contentencoding}
datasource.jndi-name   = ${datasource.jndi-name}
datasource.jndi-name-prefix = ${datasource.jndi-name-prefix}
database.name          = ${database.name}
datasource.mapping     = ${datasource.mapping}
database.url           = ${database.url}
database.driver        = ${database.driver}
database.username      = ${database.username}
database.password      = ${database.password}
 
      </echo>
    </target>
	
	    <!-- =================================================================== -->
	    <!-- Clean SignServer related ALL                                                           -->
	    <!-- =================================================================== -->
	    <target name="signserver:clean" unless="buildMailSigner">
	    </target>
	
        <!-- =================================================================== -->
        <!-- Build SignServer                                                        -->
        <!-- =================================================================== -->	
        <target name="signserver" depends="signserver.ear"  unless="buildMailSigner">
	    </target>
	
	
	
	   <!-- =================================================================== -->
	    <!-- Compile java sources                                                -->
	    <!-- =================================================================== -->
	    <target name="signserver:compile" unless="buildMailSigner" >	    	
	        <javac destdir="${build}" debug="on" includeantruntime="no" encoding="iso8859-1" target="${server.java.target}" source="${server.java.target}">
	            <classpath refid="server.compile.classpath" />
	            <src path="${src.java}" /> 
	        	<exclude name="org/signserver/mailsigner/**"/>
	        	<exclude name="org/signserver/appserver/**"/> 
	        	<exclude name="org/signserver/cli/GenerateCertReqCommand.*"/>	        	
	        	<exclude name="org/signserver/protocol/ws/client/**"/>
	        	<exclude name="org/signserver/client/PerformanceTest*"/>
	        </javac>
	        <copy todir="${build}">
	            <fileset dir="src/java">
	                <include name="profilemappings.properties"/>
	            </fileset>	   
		    </copy>
	    </target>
	
	   <!-- =================================================================== -->
	    <!-- Build signserver ejb part                                           -->
	    <!-- =================================================================== -->
	    <target name="signserver-ejb.jar" depends="timeStampTestClient, performanceTestTool, signserver:compile" description="Creates master ejb.jar" unless="buildMailSigner">

	        <jar jarfile="${server.dist.dir}/signserver-ejb.jar">
	            <manifest>
	                <!-- todo: autogenerate this from a fileset -->
	                <attribute name="Class-Path" value="${jar.extclasspath}" />
	            </manifest>
	        	<metainf dir="${src}/appserver/jboss">
	        			<include name="persistence.xml"/>
	        	</metainf>
	        	<metainf dir="${src}/deploy/ejb/persistence-mappings/${database.name}">
	    	            <include name="entity-mappings.xml"/>
	    	    </metainf>
	        	
	        	<fileset dir="." includes="signserver_server.properties"/>
	        	<fileset dir="src/java" includes="profilemappings.properties"/>
	            <fileset dir="${build}">
	          	  <exclude name="org/signserver/cli/**" />
	          	  <exclude name="org/signserver/client/**" />
	          	  <exclude  name="org/signserver/protocol/validationservice/ws/**" />
	              <exclude  name="org/signserver/protocol/ws/**" />
		          <exclude name="org/signserver/mailsigner/**" />
	        	</fileset>
	        </jar>
	    </target>
	       

		
	    <!-- =================================================================== -->
	    <!-- Build web part                                                                                                                             -->
	    <!-- =================================================================== -->
	    <target name="web.war" depends="signserver:compile" unless="buildMailSigner">
	        <war destfile="${webwar}" webxml="${web.src}/WEB-INF/web.xml">
	            <fileset dir="${web.src}" excludes="WEB-INF/web.xml" />
	        </war>
	    </target>
		
	    <!-- =================================================================== -->
	    <!-- Build health check part                                                                                                                             -->
	    <!-- =================================================================== -->
	    <target name="healthcheck.war" depends="signserver:compile" unless="buildMailSigner">
	        <war destfile="${healthcheckwar}" webxml="${healthcheck.src}/WEB-INF/web.xml">
	            <fileset dir="${healthcheck.src}" excludes="WEB-INF/web.xml" />

	        </war>
	    </target>
	            	
	        		
	   <!-- =================================================================== -->
	   <!-- Build WebService interface part                                                                                                                             -->
       <!-- =================================================================== -->
	   <path id="jaxws.classpath">
	    	<fileset dir="lib/jaxws">
	    	  <include name="**/*.jar"/>
	    	</fileset> 
	    	<pathelement location="${java.home}/../lib/tools.jar"/>
	    	<pathelement location="${build}"/>
	    	<path refid="signserver.compile.classpath" />
	    </path>
		
		
	    <target name="ws.common.init" unless="buildMailSigner">
		    <taskdef name="wsgen" classname="com.sun.tools.ws.ant.WsGen" >
		        <classpath refid="jaxws.classpath"/>		    	
		    </taskdef>
		
	        <taskdef name="wsimport" classname="com.sun.tools.ws.ant.WsImport">
	            <classpath refid="jaxws.classpath"/>
	        </taskdef>
	    </target>
		
	    <target name="ws.init" depends="init, signserverwsconditioncheck, ws.common.init" if="signserverws.conditionenabled">
	    	<mkdir dir="tmp/jaxws/gen-classes/server"/>
	    	<mkdir dir="tmp/jaxws/gen-classes/client"/>
	    	

	    </target>
	
	

		
		<target depends="ws.init" name="ws.gen.server" if="signserverws.conditionenabled" >
	       <wsgen  fork="true" sei="org.signserver.protocol.ws.server.SignServerWS"
	       	     genwsdl="true" destdir="tmp/jaxws/gen-classes/server" 	            
	            debug="true" >
	       	  
			 <classpath>
			  <path refid="jaxws.classpath" /> 
			  <pathelement location="src" /> 
			 </classpath>

			  </wsgen>
		</target>

		

		<target name="signserverwsconditioncheck" unless="buildMailSigner">
			<condition property="signserverws.conditionenabled">
				<istrue value="${signserverws.enabled}"/>
			</condition>
		</target>
		
	    <target name="signserverws.war" depends="ws.gen.server, ws.gen.client" if="signserverws.conditionenabled" >
	        <copy todir="tmp/jaxws/gen-classes/server">
	    	  <fileset dir="${build}">
	            <include name="org/signserver/protocol/ws/*.class"/> 
	    	  	<include name="org/signserver/protocol/ws/server/*.class"/>  
	          </fileset>
	        </copy>	
	    	
	    	<replace file="${eardd.src}/META-INF/application.xml" token="!--@signserverws.war@-->" value="module>&lt;web>&lt;web-uri>signserverws.war&lt;/web-uri>&lt;context-root>/signserver/signserverws&lt;/context-root>&lt;/web>&lt;/module>"/>
	        <war warfile="${server.dist.dir}/signserverws.war" webxml="${src}/jaxws/web.xml">
	            <webinf dir="src/jaxws" includes="sun-jaxws.xml"/>
	            <!-- <zipfileset
	                    dir="tmp/jaxws/wsdl"
	                    includes="*.wsdl, *.xsd"
	                    prefix="WEB-INF/wsdl"/> -->
	            <classes dir="tmp/jaxws/gen-classes/server"/>
	         	<lib dir="lib/jaxws" includes="*.jar" />        		
	        </war>
	    </target>
		
		
	    <target name="ws.gen.client" depends="ws.init, ws.gen.server" if="signserverws.conditionenabled">	    	
	        <wsimport 
	                destdir="tmp/jaxws/gen-classes/client"
	                wsdl="tmp/jaxws/gen-classes/server/SignServerWSService.wsdl">	          
	        </wsimport>
	    </target>
	    
	    <target name="ws.compile.client" depends="ws.init, ws.gen.server" if="signserverws.conditionenabled">	    	
	        <javac destdir="${build}" debug="on" includeantruntime="no" encoding="iso8859-1" target="${server.java.target}" source="${server.java.target}">
	            <classpath refid="server.compile.classpath" />
	            <src path="${src.java}" /> 	        	
	        	<include name="org/signserver/protocol/ws/client/**"/>
	        	<include name="org/signserver/protocol/ws/client/cli/**"/>
	        </javac>
	    </target>

	    <target name="ws.build.client" depends="ws.init, ws.compile.client" if="signserverws.conditionenabled">
	    	
	    	<mkdir dir="tmp/signserverwscli.jar"/>
	    	<mkdir dir="tmp/signserverwscli.jar/META-INF"/>
	    	<mkdir dir="dist-client/signserverwscli/lib"/>

	        <copy todir="tmp/signserverwscli.jar">
	            <fileset dir="${build}">
	              <include name="org/signserver/protocol/ws/client/*.class"/>
	              <include name="org/signserver/protocol/ws/client/cli/*.class"/>
	              <include name="org/signserver/protocol/ws/*.class"/> 
	              <include name="org/signserver/cli/*.class"/>
	              <include name="org/signserver/common/*.class"/>
	              <include name="org/signserver/groupkeyservice/common/*.class"/>
	              <include name="org/signserver/validationservice/common/*.class"/>
	            </fileset>	
	            <fileset dir="tmp/jaxws/gen-classes/client">
	              <include name="**/*.class"/>
	            </fileset>	
	            <fileset dir="${src.java}">
		              <include name="log4j.properties"/>
		              <include name="profilemappings.properties"/>
		        </fileset>
		    </copy> 
	 
	        <copy todir="dist-client/signserverwscli/lib">
	            <fileset dir="${lib}">        
	              <include name="log4j.jar"/>      
	              <include name="commons-lang-2.0.jar"/>
	              <include name="ejbca-util.jar"/>
	            </fileset>	
	            <fileset dir="${lib}/${client.java.target}">        
	              <include name="bcprov-jdk.jar"/>                  	
	            </fileset>	    
		        <fileset dir="${lib}/jaxws">
					<include name="activation.jar" />
					<include name="FastInfoset.jar" />
				    <include name="http.jar" />
					<include name="jaxb-api.jar" />
				    <include name="jaxb-impl.jar" />
				    <include name="jaxb-xjc.jar" />
					<include name="jaxws-api.jar" />
				    <include name="jaxws-rt.jar" />
		        	<include name="jaxws-tools.jar" />
				    <include name="jsr173_api.jar" />
				 	<include name="jsr181-api.jar" />
				    <include name="jsr250-api.jar" />
		        	<include name="mimepull.jar" />
					<include name="resolver.jar" />
				    <include name="saaj-api.jar" />
					<include name="saaj-impl.jar" />
					<include name="sjsxp.jar" />
		        	<include name="stax-ex.jar" />
					<include name="streambuffer.jar" />
				</fileset>
		    </copy>    	
		    <copy todir="dist-client/signserverwscli/">
	            <fileset dir="${src}/jaxws/cli">
	                <include name="*.*" />
	            </fileset>
	        </copy> 
	    	              
	        <jar destfile="dist-client/signserverwscli/signserverwscli.jar" basedir="tmp/signserverwscli.jar">
	          <manifest>
	          	<attribute name="Class-Path" value="lib/bcprov-jdk.jar lib/ejbca-util.jar lib/log4j.jar lib/activation.jar lib/FastInfoset.jar lib/http.jar lib/jaxb-api.jar lib/jaxb-impl.jar  lib/jaxb-xjc.jar lib/jaxws-api.jar lib/jaxws-rt.jar lib/jaxws-tools.jar lib/jsr173_api.jar lib/jsr181-api.jar lib/jsr250-api.jar lib/mimepull.jar lib/resolver.jar lib/saaj-api.jar lib/saaj-impl.jar lib/sjsxp.jar lib/stax-ex.jar lib/streambuffer.jar lib/commons-lang-2.0.jar"/>
	            <attribute name="Main-Class" value="org.signserver.protocol.ws.client.cli.WSCLI"/>
	          </manifest>
	        </jar>    	    	
	    </target>

	    <target name="signserverws.client" depends="signserverwsconditioncheck,ws.build.client" if="signserverws.conditionenabled" />

	   <!-- =================================================================== -->
	   <!-- Build Validation Service Web Service                                -->
	   <!-- =================================================================== -->	        		
	   <target name="validationwsconditioncheck" unless="buildMailSigner">
	      <condition property="validationws.conditionenabled">
	        <istrue value="${validationws.enabled}"/>
	      </condition>
	  </target>		
	  
	  <target name="validationws.init" depends="init, validationwsconditioncheck, ws.common.init" if="validationws.conditionenabled">
	      <mkdir dir="tmp/validationws/gen-classes/server"/>
	      <mkdir dir="tmp/validationws/gen-classes/client"/>
	  </target>
	        	
	  <target depends="validationws.init" name="validationws.gen.server" if="validationws.conditionenabled" >
	     <wsgen  fork="true" sei="org.signserver.protocol.validationservice.ws.server.ValidationWS"
	        	       	     genwsdl="true" destdir="tmp/validationws/gen-classes/server" 	            
	        	            debug="true" >
	        <classpath>
	          <path refid="jaxws.classpath" /> 
	          <pathelement location="src" /> 
	        </classpath>
         </wsgen>
	  </target>

	  <target name="validationws.war" depends="validationws.gen.server, validationws.gen.client" if="validationws.conditionenabled" >
	     <copy todir="tmp/validationws/gen-classes/server">
	        <fileset dir="${build}">
	        	<include name="org/signserver/protocol/validationservice/ws/*.class"/> 
	        	<include name="org/signserver/protocol/validationservice/ws/server/*.class"/>  
	        </fileset>
	    </copy>	
	        	    	
	    <replace file="${eardd.src}/META-INF/application.xml" token="!--@validationws.war@-->" value="module>&lt;web>&lt;web-uri>validationws.war&lt;/web-uri>&lt;context-root>/signserver/validationws&lt;/context-root>&lt;/web>&lt;/module>"/>
	    <war warfile="${server.dist.dir}/validationws.war" webxml="${src}/validationws/web.xml">
	        <webinf dir="src/validationws" includes="sun-jaxws.xml"/>
	        	<classes dir="tmp/validationws/gen-classes/server"/>
	        	<lib dir="lib/jaxws" includes="*.jar" />        		
	    </war>
	   </target>
	        			        		
	   <target name="validationws.gen.client" depends="validationws.init, validationws.gen.server" if="validationws.conditionenabled">	    	
	      <wsimport destdir="tmp/validationws/gen-classes/client"
	        	    wsdl="tmp/validationws/gen-classes/server/ValidationWSService.wsdl">	          
	      </wsimport>
	   </target>
		
	    <!-- =================================================================== -->
	    <!-- Build signserver.ear                                                        -->
	    <!-- =================================================================== -->
	    <target name="signserver.ear" depends="init, preprocess, signserver-ejb.jar, web.war, healthcheck.war, signserverws.war, validationws.war, signserverws.client" unless="buildMailSigner" >
	        <ear destfile="${caear}" appxml="${eardd.src}/META-INF/application.xml">         		
	            <fileset dir="${eardd.src}">
	                <exclude name="META-INF/application.xml" />
	            </fileset>
	            <fileset dir=".">
	                <include name="${lib}/log4j.jar" />
	                <include name="${lib}/ejbca-util.jar" />   
	                <include name="${lib}/ldap.jar" />
	            	<include name="${lib}/commons-lang-2.0.jar" />
	            	<include name="${lib}/itext/*.jar" />
	            	<include name="${lib}/quartz/*.jar" />
	            </fileset>
	            <fileset dir="${server.dist.dir}">
	                <include name="*-ejb.jar" />
	                <include name="*.war" />
	            </fileset> 
			</ear>
	    </target>
		
    <!-- ======================================================================= -->
    <!-- Deploy Sign Server ear to JBoss                                               -->
    <!-- ======================================================================= -->
    <target name="deploy" depends="signserver.ear" unless="buildMailSigner">
        <antcall target="j2ee:deploy" />
    </target>
	
    <target name="install"  description="Install">
        <echo message="Removing old cacerts and add root cert to be trusted  ..."/>
        <echo message="Make sure you have write access to JAVA_HOME/jre/lib/security/cacerts  ..."/>
        <delete file="${java.home}/lib/security/cacerts"/>
        <keytool arg="-v -alias SIGNSERVER -import -file '${java.trustcert}' -keystore '${java.home}/lib/security/cacerts' -storepass ${java.trustpassword} -noprompt"/>
    </target>
	
    <target name="test:signserver:compile" description="compile JUnit testcases" depends="ws.compile.client" unless="buildMailSigner">
        <mkdir dir="${test.dir}" />
        <echo> Important, in order for all tests to complete must the web service and validation web service interfaces be enabled, and HTTPS be turned off.</echo>
        <javac srcdir="${test.src.dir}" destdir="${test.dir}" debug="on" includeantruntime="no" encoding="iso8859-1"  target="${server.java.target}" source="${server.java.target}">
            <classpath refid="signserver.test.compile.classpath" />
        	<exclude name="org/signserver/mailsigner/**"/>
        	<!-- <exclude name="org/signserver/protocol/validationservice/ws/**"/>
        	<exclude name="org/signserver/protocol/ws/**"/> -->
        </javac>
        <!-- jndi.properties needs to be in the classpath -->
        <copy file="${src.java}/jndi.properties" todir="${test.dir}" />
    </target>
	
    <target name="test:signserver:run" depends="test:signserver:compile" description="run JUnit testcases" unless="buildMailSigner">
        <fail message="Please set the environment variable 'SIGNSERVER_HOME' before running the junit tests." unless="env.SIGNSERVER_HOME"/>
        <echo> Important, in order for all tests to complete must the web service and validation web service interfaces be enabled, and HTTPS be turned off.</echo>
        <delete dir="${test.dir}/reports" />
        <mkdir dir="${test.dir}/reports/html" />
        <junit printsummary="yes" haltonfailure="no">
            <classpath>
                <path refid="signserver.test.compile.classpath" />
                <path location="${test.dir}" />
            </classpath>
            <formatter type="xml" />
            <batchtest fork="yes" todir="${test.dir}/reports">
                <fileset dir="${test.dir}">                  
                    <include name="**/ejb/Test*" /> 
                    <include name="**/server/Test*" />
                	<include name="**/server/service/Test*" />
                	<include name="**/server/validcache/Test*" />
                	<include name="**/groupkeyservice/Test*" /> 
                	<include name="**/cli/TestSignServer*" />
                	<include name="**/protocol/validationservice/ws/Test*" />
                	<include name="**/protocol/ws/Test*" />
                    <exclude name="**/*Continously*" />
                    <exclude name="**/TestRunner*" />
                	<exclude name="**/db/*" />
                	<exclude name="**/mailsigner/**" />
                	<exclude name="**/cli/TestMail**" />
                </fileset>
            </batchtest>
        </junit>

        <junitreport todir="${test.dir}/reports">
            <fileset dir="${test.dir}/reports">
                <include name="TEST-*.xml" />
            </fileset>
            <report format="frames" todir="${test.dir}/reports/html" />
        </junitreport> 
    </target>

    <target name="test:signserver:performance" description="run performance test locally" unless="buildMailSigner">
        <available file="${performanceTestToolJar}" property="perfTestExists"/>
        <antcall target="test:signserver:initperformance" />
        <antcall target="j2ee:assert-run" />
      	<property name="performancetest.host" value="http://localhost:8080/signserver/" />
       	<property name="performancetest.runtime" value="1200" />
       	<property name="performancetest.threads" value="10" />
       	<property name="performancetest.intervalsize" value="30" />
       	<property name="performancetest.statisticsdir" value="tmp/statistics/" />
        <echo>Starting performance tests..</echo>
        <echo>Assuming: </echo>
        <echo> - collected data to be found in ${performancetest.statisticsdir} (set by GLOB.STATISTICS.OUTPUTDIR).</echo>
        <echo> - A PDF worker with name "PDFSigner" exists.</echo>
        <echo />
        <echo>Processed data can be found in ${performancetest.statisticsdir}.</echo>
        <delete dir="${testperf.dir}" />
        <java jar="${performanceTestToolJar}" fork="true">
            <jvmarg line="-Xmx512m -XX:+UseConcMarkSweepGC" />
            <arg line="test ${performancetest.runtime} ${performancetest.threads} ${performancetest.host}" />
        </java>
        <java jar="${performanceTestToolJar}" fork="true">
        	<arg line="postprocess ${performancetest.statisticsdir} ${performancetest.intervalsize}" />
        </java>
    </target>

    <target name="test:signserver:initperformance" unless="perfTestExists" >
        <antcall target="build" />
    </target>

	 <!--                                                   -->
	 <!-- Target used to build the Performace-test          -->
	 <!--                                                   -->
	  <target name="performanceTestTool" depends="signserver:compile" unless="buildMailSigner">
	    <mkdir dir="${performanceTestToolBuild}"/>
	    <javac srcdir="${src.java}" destdir="${performanceTestToolBuild}" debug="on" target="${client.java.target}" source="${client.java.target}">
		   <include name="org/signserver/client/PerformanceTest*"/>
           <classpath path="${lib}/reports/jcommon-1.0.12.jar"/>
           <classpath path="${lib}/reports/jfreechart-1.0.9.jar"/>
		   <classpath refid="signserver.compile.classpath"/> 
	    </javac>
	    
	    <unzip src="${lib}/itext/itext.jar" dest="${performanceTestToolBuild}/" />
	    <unzip src="${lib}/reports/jcommon-1.0.12.jar" dest="${performanceTestToolBuild}/" />
	    <unzip src="${lib}/reports/jfreechart-1.0.9.jar" dest="${performanceTestToolBuild}/" />

	    <jar destfile="${performanceTestToolJar}" basedir="${performanceTestToolBuild}">
	      <manifest>
	        <!--<attribute name="Class-Path" value="itext.jar"/>-->
	        <attribute name="Main-Class" value="org.signserver.client.PerformanceTestTool"/>
	      </manifest>
	    </jar>
	  </target>

	
	 <!--                                                   -->
	 <!-- Target Used to test the TimeStamp communication     -->
	 <!--                                                   -->
	  <target name="timeStampTestClient" depends="signserver:compile" unless="buildMailSigner">
	    <mkdir dir="${timeStampClientBuild}"/>
	    <javac srcdir="${src.java}" destdir="${timeStampClientBuild}" debug="on" target="${client.java.target}" source="${client.java.target}">
		   <include name="org/signserver/client/TimeStampClient.java"/> 	       
		   <classpath refid="signserver.compile.classpath"/> 
	    </javac>

	    <copy todir="${client.dist.dir}" >
	      <fileset dir="${lib}/${client.java.target}">
	        <include name="bcprov-jdk.jar"/>
	        <include name="bctsp-jdk.jar"/>
	      	<include name="bcmail-jdk.jar"/>
	      </fileset>
	    </copy>
       <copy todir="${client.dist.dir}/lib" >
         <fileset dir="${lib}/ext">
           <include name="commons-cli-1.0.jar"/>
         </fileset>
       </copy>
	    <jar destfile="${timeStampClientJar}" basedir="${timeStampClientBuild}">
	      <manifest>
	        <attribute name="Class-Path" value="bctsp-jdk.jar bcprov-jdk.jar bcmail-jdk.jar lib/commons-cli-1.0.jar"/>
	        <attribute name="Main-Class" value="org.signserver.client.TimeStampClient"/>
	      </manifest>
	    </jar>
	  </target>


</project>	