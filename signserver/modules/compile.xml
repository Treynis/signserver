<?xml version="1.0" encoding="UTF-8"?>
<!-- ======================================================================= -->
<!--                                                                         -->
<!--  SignServer: The OpenSource Automated Signing Server                    -->
<!--                                                                         -->
<!--  This software is free software; you can redistribute it and/or         -->
<!--  modify it under the terms of the GNU Lesser General Public             -->
<!--  License as published by the Free Software Foundation; either           -->
<!--  version 2.1 of the License, or any later version.                      -->
<!--                                                                         -->
<!--  See terms of license at gnu.org.                                       -->
<!--                                                                         -->
<!-- ======================================================================= -->
<!-- Version: $Id$ -->
<project name="compile" default="build" basedir=".">

    <import file="../build.xml"/>
    <import file="modules.xml"/>


    <!-- =================================================================== -->
    <!-- Main targets                                                        -->
    <!-- =================================================================== -->
    
    <target name="init" depends="display-build-properties">
        <!-- Create the time stamp -->
        <tstamp/>
        <mkdir dir="${mods-available}"/>
    </target>
    
    <target name="display-build-properties">
        <echo>
-------------- BUILD PROPERTIES --------------
signserverws.enabled                = ${signserverws.enabled}
validationws.enabled                = ${validationws.enabled}
adminws.enabled                     = ${adminws.enabled}
webdoc.enabled                      = ${webdoc.enabled}
timestampclient.enabled             = ${timestampclient.enabled}
validationclient.enabled            = ${validationclient.enabled}
pdfperformancetest.enabled          = ${pdfperformancetest.enabled}
signingandvalidationapi.enabled     = ${signingandvalidationapi.enabled}
admingui.enabled                    = ${admingui.enabled}
clientcli.enabled                   = ${clientcli.enabled}
includemodulesinbuild               = ${includemodulesinbuild}
        </echo>
    </target>

    <target name="build" description="Build everything enabled" depends="
        display-build-properties,
        init,
        -build-buildtools,
        modules">
            <antcall target="showtime"/>
    </target>


    <target name="clean-build">
        <echo>Cleaning built files</echo>
        <delete dir="../lib/" failonerror="true">
            <include name="*.*ar"/>
        </delete>
        <delete dir="${apidoc}" />
        <delete dir="${tmp}"/>	
        <delete dir="${debian.pkgdist.destdir}"/>
        <delete dir="${mods-available}"/>
        <delete dir="${test.dir}" />
        <delete file="../velocity.log"/>

        <!-- Clean all modules -->
        <echo>Cleaning sub projects</echo>
        <subant target="-do-clean-module" failonerror="true">
            <fileset dir="${modules}" includes="SignServer-*/build.xml"/>
         </subant>
    </target>


    <!-- =================================================================== -->
    <!-- Sub build targets                                                   -->
    <!-- =================================================================== -->

    <target name="-build-buildtools">
        <ant inheritall="false" target="jar" antfile="modules/SignServer-BuildTools/build.xml"/>
     </target>

    <target name="doc" description="Build SignServer web site and docs">
        <ant antfile="modules/SignServer-Doc/build.xml" target="build"
            inheritall="false"/>
    </target>

    <target name="javadoc" depends="build"
        description="Build JavaDoc for SignServer">
        <!-- Load the classpath variable -->
        <property file="lib/nblibraries.properties"/>
        <mkdir dir="${apidoc}" />
        <javadoc failonerror="true" useexternalfile="true" packagenames="org.signserver.*" maxmemory="256m" destdir="${apidoc}"
        	extdirs="${lib}:${lib}/ext:${ant.home}/lib:${lib}/ext/ejb:${lib}/${server.java.target}/:${lib}/${client.java.target}/:${lib}/reports:${lib}/quartz:${lib}/module/odfsigner/odfdom.jar" author="true" version="true" use="true" windowtitle="${app.name.cap} API" bottom="Copyright &#169; 2005-2012 PrimeKey Solutions AB." encoding="utf-8" charset="utf-8">

                <!-- Include all java files in the modules folder but excluding the tests -->
                <fileset dir="modules" includes="**/*.java" excludes="*/test/**/*.java,SignServer-Lib-ODFDOM/**/*"/>
                
                <!-- When possible: this should be moved out to a properties file instead -->
                <classpath>
                    <fileset dir="lib/ext" includes="*.jar" />
                    <fileset dir="lib" includes="*.jar"/>
                    <fileset dir="lib/ext/ext" includes="*.jar" />
                    <fileset dir="lib/ext/ext/ejb" includes="*.jar" />
                    <fileset dir="lib/ext/quartz" includes="*.jar" />
                    <fileset dir="lib/ext/1.6" includes="*.jar" />
                    <fileset dir="lib/ext/module/odfsigner" includes="*.jar"/>
                    <fileset dir="lib/ext/module/ooxmlsigner" includes="*.jar"/>
                    <fileset dir="lib/ext/hibernate" includes="*.jar"/>
                    <fileset dir="${ant.home}/lib" includes="ant.jar" />
                    <path path="${libs.JBoss-Java-EE-Library.classpath}" />                    
                </classpath>
                <classpath path="lib/ext/swing-app-framework/appframework-1.0.3.jar:lib/ext/swing-app-framework/swing-worker-1.1.jar:lib/ext/beans-binding/beansbinding-1.2.1.jar"/>
        </javadoc>
        <echo message="Local documentation is now available in file://${apidoc}/index.html"/>
    </target>


    <!-- =================================================================== -->
    <!-- Test part                                                           -->
    <!-- =================================================================== -->

    <!-- Run tests -->
    <target name="test:run" depends="test:signserver:run" 
        description="Run the default JUnit testcases"/>

    <!-- Run all tests -->
    <target name="test:runall" depends="test:signserver:runall"
        description="Run all JUnit testcases"/>

    <target name="test:runperf" description="Test performace of signing modules">
        <antcall target="test:signserver:performance"/>
    </target>
        

    <!-- =================================================================== -->
    <!-- Release part                                                        -->
    <!-- =================================================================== -->

    <target name="-init-release-patternsets">
        <!-- All files for source release except scripts -->
        <patternset id="source.normalfiles">
            <include name="**/**" />
            
            <exclude name="bin/admingui.sh"/>
            <exclude name="bin/ant"/>
            <exclude name="bin/client.sh"/>
            <exclude name="bin/setstatusinsync.sh"/>
            <exclude name="bin/signclient"/>
            <exclude name="bin/signserver"/>
            <exclude name="bin/signserver.sh"/>
            <exclude name="bin/signserver-gui"/>
            
            <exclude name="**/CVS/**" />
            <exclude name="signserver_build.properties" />
            <exclude name="conf/signserver_build.properties" />
            <exclude name="tmp/**" />
            <exclude name="p12/**" />
            <exclude name="mods-available/**" />
            <exclude name="**/dist/**" />
            <exclude name="**/build/**" />
            <exclude name="SignServer-AdminGUI/lib/**" />
            <exclude name="out/**" />
            <exclude name="eclipseBuild/**" />
            <exclude name="**/*.class" />
            <exclude name="**/.cvsignore" />
            <exclude name="**/nbproject/private/**" />
            <exclude name="lib/**/*.jar" />
            <exclude name="lib/**/*.zip" />
            <exclude name="**/velocity.log" />
        </patternset>
        
        <!-- All scripts for source release -->
        <patternset id="source.executablefiles">
            <include name="bin/admingui.sh"/>
            <include name="bin/ant"/>
            <include name="bin/client.sh"/>
            <include name="bin/setstatusinsync.sh"/>
            <include name="bin/signclient"/>
            <include name="bin/signserver"/>
            <exclude name="bin/signserver.sh"/>
            <include name="bin/signserver-gui"/>
        </patternset>
        
        <!-- All files for binary release except scripts -->
        <patternset id="binary.normalfiles">
            <include name="**/**" />
            
            <exclude name="bin/admingui.sh"/>
            <exclude name="bin/ant"/>
            <exclude name="bin/client.sh"/>
            <exclude name="bin/setstatusinsync.sh"/>
            <exclude name="bin/signclient"/>
            <exclude name="bin/signserver"/>
            <exclude name="bin/signserver.sh"/>
            <exclude name="bin/signserver-gui"/>

            <exclude name="signserver_build.properties" />
            <exclude name="conf/signserver_build.properties" />
            <exclude name="conf/admingui.properties" />
            <exclude name="modules/**" />
            <exclude name="p12/**" />
            <exclude name="tmp/**" />
            <exclude name="**/velocity.log" />
            <exclude name=".eclipse/**" />
            <exclude name=".settings/**" />
            <exclude name=".classpath" />
            <exclude name=".project" />
            <exclude name="**/.svn/**" />

            <exclude name="res/install/**" />
            <exclude name="res/test/**" />

            <!-- TODO: The following should be moved anyway -->
            <exclude name="bin/junit/**"/>
            <exclude name="bin/classes/**"/>
        </patternset>
        
        <!-- All scripts for binary release -->
        <patternset id="binary.executablefiles">
            <!-- <include name="bin/admingui.sh"/>-->
            <include name="bin/ant"/>
            <!-- <include name="bin/client.sh"/>-->
            <include name="bin/setstatusinsync.sh"/>
            <include name="bin/signclient"/>
            <include name="bin/signserver"/>
            <!-- <include name="bin/signserver.sh"/>-->
            <include name="bin/signserver-gui"/>
        </patternset>
        
        <!-- All files for mixed release except scripts -->
        <patternset id="mixed.normalfiles">
            <include name="**/**" />
            <exclude name="doc/lgpl-**" />
            <exclude name="**/CVS/**" />
            <exclude name="signserver_build.properties" />
            <exclude name="conf/signserver_build.properties" />
            <exclude name="tmp/**" />
            <exclude name="p12/**" />
            <exclude name="dist/**" />
            <exclude name="lib/*.*ar" />
            <exclude name="out/**" />
            <exclude name="eclipseBuild/**" />
            <exclude name="**/*.class" />
            <exclude name=".classpath" />
            <exclude name=".project" />
            <exclude name=".eclipse/**" />
            <exclude name=".settings/**" />
            <exclude name="**/.cvsignore" />
            <exclude name="**/*.sh" />
            <exclude name="**/nbproject/private/**" />
        </patternset>
        
        <!-- All scripts for source release -->
        <patternset id="mixed.executablefiles">
            <patternset refid="source.executablefiles"/>
        </patternset>
    </target>

    <!-- Deprecated: New target called release:zip -->
    <target name="ziprelease" depends="release:zip"/>

    <target name="release:zip" description="Make a zip file for SignServer release" >
        <property name="signserver.zipversion" value="${app.version.number}"/>
        <!-- <input message="Version tag for zipfile (ex 3_1_0):" addproperty="signserver.zipversion" /> -->
        <antcall target="-release:zip-lgpl21"/>
    </target>

    <target name="release:source-zip" description="Make a source zip files for SignServer release" >
        <property name="signserver.zipversion" value="${app.version.number}"/>
        <!-- <input message="Version tag for zipfile (ex 3_1_0):" addproperty="signserver.zipversion" /> -->
        <antcall target="-release:source-zip-lgpl21"/>
    </target>

    <target name="release:source-tarball" description="Make a source tarball for SignServer release">
        <property name="signserver.zipversion" value="${app.version.number}"/>
        <antcall target="-release:source-tarball-lgpl21"/>
    </target>

    <target name="-release:zip-lgpl21" depends="clean,-init-release-patternsets">
        <copy file="doc/lgpl-2.1.txt" tofile="LICENSE" />
        <property name="zip.dest.file" location="../signserver-${signserver.zipversion}.zip"/>
        <zip destfile="${zip.dest.file}">
            <zipfileset dir="." prefix="signserver-${signserver.zipversion}" filemode="600" dirmode="700">
                <patternset refid="mixed.normalfiles"/>
            </zipfileset>
            <zipfileset dir="." prefix="signserver-${signserver.zipversion}" filemode="700" dirmode="700">
                <patternset refid="mixed.executablefiles"/>
            </zipfileset>
        </zip>
        <delete file="LICENSE"/>
        <checksum file="${zip.dest.file}" algorithm="SHA1" forceOverwrite="yes"/>
        <checksum file="${zip.dest.file}" algorithm="SHA1" property="zip.dest.file.sha1"/>
        <echo>Released file: ${zip.dest.file}
SHA1 checksum: ${zip.dest.file.sha1}</echo>
    </target>

    <target name="-release:source-zip-lgpl21" depends="clean,-init-release-patternsets">
        <copy file="doc/lgpl-2.1.txt" tofile="LICENSE" />
        <property name="zip.src.dest.file" location="../signserver-${signserver.zipversion}-src.zip"/>
        <zip destfile="${zip.src.dest.file}">
            <zipfileset dir="." prefix="signserver-${signserver.zipversion}-src" filemode="600" dirmode="700">
                <patternset refid="source.normalfiles"/>
            </zipfileset>
            <zipfileset dir="." prefix="signserver-${signserver.zipversion}-src" filemode="700" dirmode="700">
                <patternset refid="source.executablefiles"/>
            </zipfileset>
        </zip>
        <delete file="LICENSE"/>
        <checksum file="${zip.src.dest.file}" algorithm="SHA1" forceOverwrite="yes"/>
        <checksum file="${zip.src.dest.file}" algorithm="SHA1" property="zip.src.dest.file.sha1"/>
        <echo>Released file: ${zip.src.dest.file}
SHA1 checksum: ${zip.src.dest.file.sha1}</echo>
    </target>

    <target name="-release:source-tarball-lgpl21" depends="clean,-init-release-patternsets">
        <copy file="doc/lgpl-2.1.txt" tofile="LICENSE" />
        <property name="tgz.src.tar.file" value="../signserver-${signserver.zipversion}-src.tar" />
        <property name="tgz.src.tar.gz" location="${tgz.src.tar.file}.gz" />
        <tar tarfile="${tgz.src.tar.file}" basedir="." longfile="gnu">
            <exclude name="**/**"/>
            <tarfileset dir="." prefix="signserver-${signserver.zipversion}" filemode="600" dirmode="700">
                <patternset refid="source.normalfiles"/>
            </tarfileset>
            <tarfileset dir="." prefix="signserver-${signserver.zipversion}" filemode="700" dirmode="700">
                <patternset refid="source.executablefiles"/>
            </tarfileset>
        </tar>
        <gzip destfile="${tgz.src.tar.gz}" src="${tgz.src.tar.file}"/>
        <delete file="${tgz.src.tar.file}"/>
        <delete file="LICENSE"/>
        <checksum file="${tgz.src.tar.gz}" algorithm="SHA1" forceOverwrite="yes"/>
        <checksum file="${tgz.src.tar.gz}" algorithm="SHA1" property="tgz.src.tar.gz.sha1"/>
        <echo>Released file: ${tgz.src.tar.gz}
SHA1 checksum: ${tgz.src.tar.gz.sha1}</echo>
    </target>

    <target name="release:binary-tarball" depends="build,-init-release-patternsets" description="Make a binary tarball for SignServer release">
        <property name="signserver.zipversion" value="${app.version.number}"/>
        <copy file="doc/lgpl-2.1.txt" tofile="LICENSE" />
        <property name="tgz.bin.tar" value="../signserver-${signserver.zipversion}-bin.tar" />
        <property name="tgz.bin.tar.gz" location="${tgz.bin.tar}.gz" />
        <tar tarfile="${tgz.bin.tar}" basedir="." longfile="gnu">
            <exclude name="**/**"/>
            <tarfileset dir="." prefix="signserver-${signserver.zipversion}" filemode="600" dirmode="700">
                <patternset refid="binary.normalfiles"/>
            </tarfileset>
            <tarfileset dir="." prefix="signserver-${signserver.zipversion}" filemode="700" dirmode="700">
                <patternset refid="binary.executablefiles"/>
            </tarfileset>
        </tar>
        <gzip destfile="${tgz.bin.tar.gz}" src="${tgz.bin.tar}"/>
        <delete file="${tgz.bin.tar}"/>
        <delete file="LICENSE"/>
        <checksum file="${tgz.bin.tar.gz}" algorithm="SHA1" forceOverwrite="yes"/>
        <checksum file="${tgz.bin.tar.gz}" algorithm="SHA1" property="tgz.bin.tar.gz.sha1"/>
        <echo>Released file: ${tgz.bin.tar.gz}
SHA1 checksum: ${tgz.bin.tar.gz.sha1}</echo>
    </target>
    
    <target name="release:binary-zip" depends="build,-init-release-patternsets" description="Make a binary zip for SignServer release">
        <property name="signserver.zipversion" value="${app.version.number}"/>
        <copy file="doc/lgpl-2.1.txt" tofile="LICENSE" />
        <property name="zip.bin" location="../signserver-${signserver.zipversion}-bin.zip"/>
        <zip destfile="${zip.bin}">
            <exclude name="**/**"/>
            <zipfileset dir="." prefix="signserver-${signserver.zipversion}" filemode="600" dirmode="700">
                <patternset refid="binary.normalfiles"/>
            </zipfileset>
            <zipfileset dir="." prefix="signserver-${signserver.zipversion}" filemode="700" dirmode="700">
                <patternset refid="binary.executablefiles"/>
            </zipfileset>
        </zip>
        <delete file="LICENSE"/>
        <checksum file="${zip.bin}" algorithm="SHA1" forceOverwrite="yes"/>
        <checksum file="${zip.bin}" algorithm="SHA1" property="zip.bin.sha1"/>
        <echo>Released file: ${zip.bin}
SHA1 checksum: ${zip.bin.sha1}</echo>
    </target>


    <!-- =================================================================== -->
    <!-- Tests                                                               -->
    <!-- =================================================================== -->

    <target name="test:signserver:pre-run">
        <fail message="Please set the environment variable 'SIGNSERVER_HOME' before running the junit tests." unless="env.SIGNSERVER_HOME"/>
        <echo> Important, in order for all tests to complete must the web service and validation web service interfaces be enabled, and HTTPS be turned on.</echo>
        <echo> For Test-SignServerWS to complete the following must be run first:
            bin/signserver.sh setproperties modules/SignServer-Test-SignServerWS/test-configuration.properties
            bin/signserver.sh reload 7001
        </echo>
        <echo> For Test-ValidationWS to complete the following must be run first:
            bin/signserver.sh setproperties modules/SignServer-Test-ValidationWS/test-configuration.properties
            bin/signserver.sh reload 7101
        </echo>

        <delete dir="${test.dir}/reports" />
        <mkdir dir="${test.dir}/reports/html" />
    </target>

    <!-- Target that can be called to explicit compile all tests for instance
        to get rid of build errors in your IDE if you are using Eclipse -->
    <target name="test:signserver:compile" depends="test:compile"/>
    <target name="test:compile" description="Compile all tests">
        <!-- SignServer-Test-SignServerWS -->
        <ant target="compile-test" inheritall="false"
            antfile="${testsignserverws.dir}/build.xml"/>

        <!-- SignServer-Test-ValidationWS -->
        <ant target="compile-test" inheritall="false"
            antfile="${testvalidationws.dir}/build.xml"/>

        <!-- SignServer-Test-AdminWS -->
        <ant target="compile-test" inheritall="false"
            antfile="${testadminws.dir}/build.xml"/>

        <!-- SignServer-Test-System -->
        <ant target="compile-test" inheritall="false"
            antfile="${testsystem.dir}/build.xml"/>
    </target>
	
    <target name="test:signserver:run" depends="test:signserver:pre-run, build"
        description="Run the default JUnit testcases">

        <!-- Run all tests defined in modules-project.properties. -->
        <subant target="test">
            <fileset dir="." includes="${tests.modules.includes}"/>
        </subant>
        <antcall target="test:report"/>
    </target>

    <target name="test:report"
        description="Create HTML test report from previously run tests">
        <!-- Create report for all tests -->
        <junitreport todir="${test.dir}/reports">
            <fileset dir="." includes="**/test/results/TEST-*.xml"/>
            <report format="frames" todir="${test.dir}/reports/html" />
        </junitreport>
        <property name="reportfile" location="${test.dir}/reports/html/index.html"/>
        <echo message="Test report available at: file://${reportfile}"/>
    </target>

    <target name="test:signserver:runall"
        depends="test:signserver:pre-run, build">

        <!-- Currently we run all tests by default. When that is no longer the
            case copy and modify the test:signserver:run target to here -->
        <antcall target="test:signserver:run"/>
    </target>

    <!-- Keept only for backwards compatibility -->
    <target name="test:signserver:runone" depends="test:runone"/>

    <target name="test:runone" description="Run a single JUnit-test specified -Dtest.runone=classname">
        <fail message="'test.runone' not set. Example -Dtest.runone=TestXMLSigner" unless="test.runone" />
        <ant antfile="${testsystem.dir}/build.xml" target="test:runone" usenativebasedir="true" inheritall="false">
            <property name="test.runone" value="${test.runone}"/>
        </ant>
    </target>

    <target name="test:pdfperformance" description="Run PDF performance test locally">
        <available file="${performanceTestToolJar}" property="perfTestExists"/>
        <antcall target="test:signserver:initpdfperformance" />
        <antcall target="j2ee:assert-run" />
        <property name="performancetest.host" value="http://localhost:8080/signserver/" />
        <property name="performancetest.runtime" value="3000" />
        <property name="performancetest.threads" value="10" />
        <property name="performancetest.intervalsize" value="1" />
        <property name="performancetest.statisticsdir" value="${tmp}/statistics/" />
        <mkdir dir="${performancetest.statisticsdir}"/>
        <echo>Starting performance tests..</echo>
        <echo>Assuming: </echo>
        <echo> - collected data to be found in ${performancetest.statisticsdir} (set by worker property STATISTICS.CSVFILE.OUTPUTDIR).</echo>
        <echo> - A PDF worker with name "PDFSigner" exists.</echo>
        <echo />
        <echo>Processed data can be found in ${performancetest.statisticsdir}.</echo>
        <delete dir="${testperf.dir}" />
        
        <ant antfile="modules/SignServer-Client-CLI/build.xml" target="run" usenativebasedir="true">
            <property name="application.args" value="pdfperformancetest test ${performancetest.runtime} ${performancetest.threads} ${performancetest.host}"/>
        </ant>
        <ant antfile="modules/SignServer-Client-CLI/build.xml" target="run" usenativebasedir="true">
            <property name="application.args" value="pdfperformancetest postprocess ${performancetest.statisticsdir} ${performancetest.intervalsize}"/>
        </ant>
    </target>


    <!-- =================================================================== -->
    <!-- Debian packaging                                                    -->
    <!-- =================================================================== -->
    <target name="debian-pkgdist" depends="clean, unix-create-jar-symlinks, build" 
        description="Put together files to be included in Debian (or other) packages">
        <property name="pkg.basename" value="signserver3.3"/>
        <property name="pkg.version" value="3.3"/>
        <property name="prefix" value="usr/share"/>
        
        <delete dir="${debian.pkgdist.destdir}"/>
        
        <!-- libsignserver-common -->
        <mkdir dir="${debian.pkgdist.destdir}/libsignserver-common/${prefix}/${pkg.basename}"/>
        <copy todir="${debian.pkgdist.destdir}/libsignserver-common/${prefix}/${pkg.basename}/lib">
            <fileset dir="${base}/lib">
                <include name="SignServer-Common.jar"/>
                <include name="SignServer-ejb-interfaces.jar"/>
                <include name="SignServer-Module-Renewal-interface.jar"/>
            </fileset>
        </copy>
        <mkdir dir="${debian.pkgdist.destdir}/libsignserver-common/usr/share/java"/>
        <symlink resource="../${pkg.basename}/lib/SignServer-Common.jar" 
            link="${debian.pkgdist.destdir}/libsignserver-common/usr/share/java/signserver-common-${pkg.version}.jar"/>
        <symlink resource="../${pkg.basename}/lib/SignServer-ejb-interfaces.jar" 
            link="${debian.pkgdist.destdir}/libsignserver-common/usr/share/java/signserver-ejb-interfaces-${pkg.version}.jar"/>
        <copy todir="${debian.pkgdist.destdir}/libsignserver-common/${prefix}/${pkg.basename}/lib">
            <fileset dir="${base}/lib">
                <include name="nblibraries.properties"/>
                <include name="readme.txt"/>
                
                <!-- Bouncycastle (all) -->
                <include name="ext/1.6/**"/>
                
                <!-- EJB/Servlet (cli, gui) -->
                <include name="ext/ext/ejb/**"/>
                <include name="ext/ext/servlet-2.3.jar"/>
                
                <!-- CLI (both client and admin) -->
                <include name="ext/ext/commons-cli-1.2.jar"/>
                
                <!-- Common (all) -->
                <include name="ext/cert-cvc.jar"/>
                <include name="ext/commons-collections-3.2.jar"/>
                <include name="ext/commons-io-1.4.jar"/>
                <include name="ext/commons-lang-2.4.jar"/>
                <include name="ext/commons-logging.jar"/>
                <include name="ext/commons-configuration.jar"/>
                <include name="ext/ejbca-util.jar"/>
                <include name="ext/log4j.jar"/>
            </fileset>
        </copy>
        <copy todir="${debian.pkgdist.destdir}/libsignserver-common/${prefix}/${pkg.basename}/conf">
            <fileset dir="${base}/conf">
                <include name="jboss/*"/>
                <include name="glassfish/*"/>
                <include name="log4j.properties"/>
            </fileset>
        </copy>
        <symlinklibs action="replace" dir="${debian.pkgdist.destdir}/libsignserver-common/${prefix}/${pkg.basename}/lib" mappingsFile="${mappingsFile}"/>
        
        <!-- signserver-server -->
        <mkdir dir="${debian.pkgdist.destdir}/signserver-server/${prefix}/${pkg.basename}"/>
        <copy todir="${debian.pkgdist.destdir}/signserver-server/${prefix}/${pkg.basename}/bin">
            <fileset dir="${base}/bin">
                <include name="signserver"/>
                <include name="ant"/>
            </fileset>
        </copy>
        <copy todir="${debian.pkgdist.destdir}/signserver-server/${prefix}/${pkg.basename}/conf">
            <fileset dir="${base}/conf">
                <include name="signserver_build.properties.sample"/>
                <include name="signserver_cli.properties"/>
            </fileset>
        </copy>
        <copy todir="${debian.pkgdist.destdir}/signserver-server/${prefix}/${pkg.basename}/lib">
            <fileset dir="${base}/lib">
                <exclude name="ext/*"/>
                <exclude name="ext/**"/>
                <exclude name="ext/**/*"/>
                <exclude name="readme.txt"/>
                <exclude name="nblibraries.properties"/>
                <exclude name="SignServer-Common.jar"/>     <!-- libsignserver-common -->
                <exclude name="SignServer-ejb-interfaces.jar"/>      <!-- libsignserver-common -->
                <exclude name="SignServer-AdminGUI.jar"/> <!-- signserver-admingui -->
                <exclude name="SignServer-Client-CLI.jar"/> <!-- signserver-client -->
                <exclude name="SignServer-Client-SignServerWS.jar"/> <!-- signserver-client -->
                <exclude name="SignServer-Client-SigningAndValidationAPI.jar"/> <!-- signserver-client -->
                <exclude name="SignServer-Module*.jar"/> <!-- libsignserver-modules -->
                <exclude name="SignServer-war-Doc.war"/> <!-- signserver-doc -->
            </fileset>
        </copy>
        <copy todir="${debian.pkgdist.destdir}/signserver-server/${prefix}/${pkg.basename}/doc">
            <fileset dir="${base}/doc">
                <exclude name="htdocs/**"/> <!-- signserver-doc -->
            </fileset>
        </copy>
        <copy todir="${debian.pkgdist.destdir}/signserver-server/${prefix}/${pkg.basename}/lib/ext">
            <fileset dir="${base}/lib/ext">
               
                <!-- EJB -->
                <include name="hibernate/**"/>
                <include name="javaee-api-6.0/**"/>
                <include name="javaee-web-api-6.0/**"/>
                
                <!-- Quartz -->
                <include name="quartz/**"/>
                
                <!-- File uploads -->
                <include name="commons-fileupload-1.2.1.jar"/>
            </fileset>
        </copy>
        <copy todir="${debian.pkgdist.destdir}/signserver-server/${prefix}/${pkg.basename}/mods-available">
            <fileset dir="${base}/mods-available">
                <exclude name="40_*"/> <!-- libsignserver-modules -->
                <exclude name="30_webdoc.properties"/> <!-- signserver-doc -->
            </fileset>
        </copy>
        <mkdir dir="${debian.pkgdist.destdir}/signserver-server/${prefix}/${pkg.basename}/p12"/>
        <copy todir="${debian.pkgdist.destdir}/signserver-server/${prefix}/${pkg.basename}/res">
            <fileset dir="${base}/res">
                <exclude name="install/**"/>
                <exclude name="test/**"/>
                <exclude name="admingui-splash.png"/>
            </fileset>
        </copy>
        <copy todir="${debian.pkgdist.destdir}/signserver-server/${prefix}/${pkg.basename}">
            <fileset dir="${base}">
                <include name="build.xml"/>
                <include name="ChangeLog.txt"/>
                <include name="README"/>
            </fileset>
        </copy>
        <symlinklibs action="replace" dir="${debian.pkgdist.destdir}/signserver-server/${prefix}/${pkg.basename}/lib" mappingsFile="${mappingsFile}"/>
        
        <!-- signserver-admingui -->
        <mkdir dir="${debian.pkgdist.destdir}/signserver-admingui/${prefix}/${pkg.basename}"/>
        <copy todir="${debian.pkgdist.destdir}/signserver-admingui/${prefix}/${pkg.basename}/bin">
            <fileset dir="${base}/bin">
                <include name="signserver-gui"/>
            </fileset>
        </copy>
        <copy todir="${debian.pkgdist.destdir}/signserver-admingui/${prefix}/${pkg.basename}/res">
            <fileset dir="${base}/res">
                <include name="admingui-splash.png"/>
            </fileset>
        </copy>
        <copy todir="${debian.pkgdist.destdir}/signserver-admingui/${prefix}/${pkg.basename}/conf">
            <fileset dir="${base}/conf">
                <include name="admingui_default.properties"/>
            </fileset>
        </copy>
        <copy todir="${debian.pkgdist.destdir}/signserver-admingui/${prefix}/${pkg.basename}/lib/ext">
            <fileset dir="${base}/lib/ext">
                <include name="swing-app-framework/**"/>
                <include name="beans-binding/**"/>
            </fileset>
        </copy>
        <copy todir="${debian.pkgdist.destdir}/signserver-admingui/${prefix}/${pkg.basename}/lib">
            <fileset dir="${base}/lib">
                <include name="SignServer-AdminGUI.jar"/>
            </fileset>
        </copy>
        <symlinklibs action="replace" dir="${debian.pkgdist.destdir}/signserver-admingui/${prefix}/${pkg.basename}/lib" mappingsFile="${mappingsFile}"/>
        
        <!-- signserver-client -->
        <mkdir dir="${debian.pkgdist.destdir}/signserver-client/${prefix}/${pkg.basename}"/>
        <copy todir="${debian.pkgdist.destdir}/signserver-client/${prefix}/${pkg.basename}/bin">
            <fileset dir="${base}/bin">
                <include name="signclient"/>
            </fileset>
        </copy>
        <copy todir="${debian.pkgdist.destdir}/signserver-client/${prefix}/${pkg.basename}/lib">
            <fileset dir="${base}/lib">
                <include name="SignServer-Client-CLI.jar"/>
                <include name="SignServer-Client-SignServerWS.jar"/>
                <include name="SignServer-Client-SigningAndValidationAPI.jar"/>
            </fileset>
        </copy>
        <copy todir="${debian.pkgdist.destdir}/signserver-client/${prefix}/${pkg.basename}/lib">
            <fileset dir="${base}/lib">
                <!-- TODO -->
                <exclude name="**"/>
            </fileset>
        </copy>
        <symlinklibs action="replace" dir="${debian.pkgdist.destdir}/signserver-client/${prefix}/${pkg.basename}/lib" mappingsFile="${mappingsFile}"/>
        
        <!-- libsignserver-modules -->
        <mkdir dir="${debian.pkgdist.destdir}/libsignserver-modules/${prefix}/${pkg.basename}"/>
        <copy todir="${debian.pkgdist.destdir}/libsignserver-modules/${prefix}/${pkg.basename}/lib">
            <fileset dir="${base}/lib">
                <exclude name="ext/**"/>
                <include name="SignServer-Module*.jar"/>
            </fileset>
        </copy>
        <copy todir="${debian.pkgdist.destdir}/libsignserver-modules/${prefix}/${pkg.basename}/lib/ext">
            <fileset dir="${base}/lib/ext">
                <include name="module/pdfsigner/**"/>
            </fileset>
        </copy>
        <copy todir="${debian.pkgdist.destdir}/libsignserver-modules/${prefix}/${pkg.basename}/mods-available">
            <fileset dir="${base}/mods-available">
                <include name="40_*"/>
            </fileset>
        </copy>
        <symlinklibs action="replace" dir="${debian.pkgdist.destdir}/libsignserver-modules/${prefix}/${pkg.basename}/lib" mappingsFile="${mappingsFile}"/>
        
        <!-- signserver-doc -->
        <mkdir dir="${debian.pkgdist.destdir}/signserver-doc/${prefix}/${pkg.basename}"/>
        <copy todir="${debian.pkgdist.destdir}/signserver-doc/${prefix}/${pkg.basename}/lib">
            <fileset dir="${base}/lib">
                <include name="SignServer-war-Doc.war"/>
            </fileset>
        </copy>
        <copy todir="${debian.pkgdist.destdir}/signserver-doc/${prefix}/${pkg.basename}/mods-available">
            <fileset dir="${base}/mods-available">
                <include name="30_webdoc.properties"/>
            </fileset>
        </copy>
        <copy todir="${debian.pkgdist.destdir}/signserver-doc/${prefix}/${pkg.basename}/doc">
            <fileset dir="${base}/doc">
                <include name="htdocs/**"/>
            </fileset>
        </copy>
        <symlinklibs action="replace" dir="${debian.pkgdist.destdir}/signserver-doc/${prefix}/${pkg.basename}/lib" mappingsFile="${mappingsFile}"/>

    </target>
    
    <!-- Creates symlinks to all needed jars in the lib folder as specified by the mappingsFile. -->
    <target name="unix-create-jar-symlinks" depends="-build-buildtools">
        <taskdef name="symlinklibs" classname="org.signserver.anttasks.UnixSymlinkLibsTask" classpath="lib/SignServer-BuildTools.jar"/>
        <property name="libdir" location="lib"/>
        <property name="mappingsFile" location="res/install/debian/oneiric-jars.properties"/>
        <symlinklibs action="create" dir="${libdir}" mappingsFile="${mappingsFile}"/>
    </target>

    <!-- =================================================================== -->
    <!-- Other                                                               -->
    <!-- =================================================================== -->

</project>
