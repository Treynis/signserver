<?xml version="1.0" encoding="UTF-8"?>
<!-- ======================================================================= -->
<!--                                                                         -->
<!--  SignServer: The OpenSource Automated Signing Server                    -->
<!--                                                                         -->
<!--  This software is free software; you can redistribute it and/or         -->
<!--  modify it under the terms of the GNU Lesser General Public             -->
<!--  License as published by the Free Software Foundation; either           -->
<!--  version 2.1 of the License, or any later version.                      -->
<!--                                                                         -->
<!--  See terms of license at gnu.org.                                       -->
<!--                                                                         -->
<!-- ======================================================================= -->
<!-- Version: $Id$ -->
<project name="signserver" default="default" basedir=".">

    <!-- Load properties before including files -->
    <property environment="env" />
    <property name="base" location="."/>

    <!-- Import property file containing version numbers and other constants -->
    <property file="src/compile.properties"/>
    <property file="src/signserver-project.properties"/>
    

    <!-- Give user a chance to override without editing this file
       (and without typing -D each time it compiles it).
       First it checks your home directory for signserver_build.properties
       net it checks the properties file here. -->
    <property file="${user.home}/${app.name}_build.properties" />
    <property file="${app.name}_build.properties" />
 	
    <!--
    A little special something to handle backward compatibility with people
    using JBOSS_HOME. They can switch to APPSRV_HOME now, and both will work.
    -->
    <condition property="jboss.home" value="${env.JBOSS_HOME}" >
      <equals arg1="${appserver.home}" arg2="${appserver.home}"/>
    </condition>
    <condition property="appserver.home" value="${env.APPSRV_HOME}" else="${jboss.home}">
      <contains string="${jboss.home}" substring="JBOSS_HOME"/>
    </condition>
    <property name="j2ee.server.home" value="${appserver.home}"/>

    <!-- Lastly import the default properties -->
    <property file="src/default_build.properties"/>
    
    <condition property="j2ee.web-nohttps.condition">
        <istrue value="${j2ee.web-nohttps}"/>
    </condition>

    <!-- Import for the right appserver -->
    <import file="bin/${appserver.type}.xml" />  
	
    <import file="./signserver.xmli" />
    <import file="${custom.build.xml}" optional="true"/>

    <!-- Properties with paths to all module projects -->
    <property file="modules/modules-project.properties"/>

    <import file="modules/modules.xml"/>
    
    <!-- Classpaths -->
    <path id="signserver.compile.classpath">
        <path refid="signserver.ext.classpath" />
        <fileset dir="dist-server/lib" includes="*.jar"/>
        <fileset dir="lib" includes="*.jar" />
        <fileset dir="lib/quartz" includes="*.jar" />
        <fileset dir="lib/${server.java.target}" includes="*.jar" />
	    
        <fileset dir="lib/module/tsa/${client.java.target}" includes="*.jar" />
        <fileset dir="lib/module/pdfsigner/itext" includes="*.jar"/>
        <fileset dir="lib/module/odfsigner" includes="*.jar"/>
        <fileset dir="lib/module/ooxmlsigner" includes="*.jar"/>
        <fileset dir="lib/jaxws" includes="*.jar" />
        <fileset dir="lib/asm" includes="*.jar" />
        <fileset dir="lib/hibernate" includes="*.jar"/>
        <fileset dir="${ant.home}/lib" includes="ant.jar" />
        <path refid="j2ee.classpath" />
	        
        <path location="tmp/jaxws/gen-classes/client" />
        <path location="tmp/validationws/gen-classes/client" />
    </path>

    <path id="server.compile.classpath">
        <path refid="signserver.compile.classpath" />
    </path>
		
    <path id="client.compile.classpath">
        <fileset dir="${client.primeCard.dist}" includes="*.jar" />
        <path refid="signserver.compile.classpath" />
    </path>
	
    <path id="signserver.ext.classpath">
        <fileset dir="lib/ext" includes="*.jar" />
    </path>
        
    <path id="j2ee.classpath">
        <fileset dir="${appserver.home}">
	        	<!-- jboss -->
            <include name="client/jbossall-client.jar" />
            <include name="client/jboss-j2ee.jar" />
            <include name="client/jboss-javaee.jar" />
            <include name="client/ejb3-persistence.jar" />
            <include name="client/jboss-ejb3x.jar" />
	        	<!-- glassfish -->
            <include name="lib/javaee.jar"/>
            <include name="lib/appserv-rt.jar"/>
	        	<!-- weblogic -->
            <include name="server/lib/weblogic.jar"/>
	        	<!-- oracle -->
            <include name="j2ee/home/oc4jclient.jar"/>
	        	<!-- websphere -->
            <include name="runtimes/com.ibm.*.jar"/>
        </fileset>
    </path>
    
    <target name="configure-client" description="Configure CLI and GUI">
        <!-- Make a copy of the signserver_cli.properties in bin dir -->
        <copy file="signserver_cli.properties" todir="bin" />

        <!-- Copy the correct jndi.properties for your appserver -->
        <copy file="bin/jndi.properties.${appserver.type}" tofile="bin/jndi.properties" overwrite="true" failonerror="true"/>
    </target>
    
    
    <target name="compose-ear" description="Compose the configured EAR file" depends="-init-configure, -configure-ear, -configure-SignServer-ejb.jar, -configure-SignServer-war-Healthcheck, -configure-SignServer-ejb-ValidationWS.jar, -configure-SignServer-ejb-SignServerWS.jar, -configure-SignServer-ejb-AdminWS.jar">
        
        <ear destfile="${server.dist.dir}/signserver.ear" appxml="${signserver.ear.dir}/META-INF/application.xml" duplicate="fail">
            <fileset dir="${signserver.ear.dir}">
                <exclude name="META-INF/application.xml" />
            </fileset>
            
             <!-- EJB3 has automatic inclusion of all jars in 'lib' to the classpath. The jars should not be in
             subdirectories though so we must flatten the structure. zipfileset is a good was of flattening the structure, so
             all jar files is directly in lib directory in the ear file -->
            <zipfileset dir="lib" includes="log4j.jar,ejbca-util.jar,cert-cvc.jar,commons-lang-2.4.jar,commons-fileupload-1.2.1.jar,commons-io-1.4.jar,commons-logging.jar,commons-collections-3.2.jar" prefix="lib"/>
            <zipfileset dir="lib/asm" includes="*.jar" prefix="lib"/>
            <zipfileset dir="lib/module/pdfsigner/itext" includes="*.jar"  prefix="lib"/>
            <zipfileset dir="lib/module/odfsigner" includes="*.jar" prefix="lib"/>
            <zipfileset dir="lib/module/ooxmlsigner" includes="*.jar" prefix="lib"/>
            <zipfileset dir="lib/module/wsra" includes="dom4j.jar,antlr.jar,cglib.jar" prefix="lib"/>
            <zipfileset dir="lib/quartz" includes="*.jar" prefix="lib"/>
            <zipfileset dir="lib/${server.java.target}" includes="*.jar" prefix="lib"/>
            <zipfileset dir="lib/jaxws/" prefix="lib" >
                <include name="*.jar" if="includejaxws" />
                <exclude name="saaj*.jar"/>
            </zipfileset>
            <fileset dir="${server.dist.dir}">
                <include name="*-ejb.jar" />
                <include name="*.war" />
                
                <!-- Exclude all files that has been preprocessed -->
                <exclude name="SignServer-ejb.jar"/>
                <exclude name="SignServer-ejb-ValidationWS.jar"/>
                <exclude name="SignServer-ejb-SignServerWS.jar"/>
                <exclude name="SignServer-war-Healthcheck.war"/>
            </fileset>

            <!--
                Include application server depended extra JAR files.
                Edit ${appserver}.xml to define this set.
            -->
            <zipfileset refid="appserver.extralibs"/>

            <!-- Modules can be placed in dist-server/lib to be included in ear -->
            <zipfileset dir="${server.dist.dir}/lib" includes="*.jar" prefix="lib"/>
        </ear>
    
    </target>
    
    <target name="-init-configure">
        <property name="signserver.ear.dir" location="tmp/signserver.ear"/>
        <delete dir="${signserver.ear.dir}"/>
        <mkdir dir="${signserver.ear.dir}"/>
        
    </target>
    <target name="-configure-ear" depends="-init-configure">
        
        <mkdir dir="${signserver.ear.dir}/META-INF"/>
        
        <copy todir="${signserver.ear.dir}">
            <fileset dir="src/deploy/ear" includes="*/*.*"/>
        </copy>
        
        <!-- TODO Enable enterprise module, how to disable? -->
        <replace file="${signserver.ear.dir}/META-INF/application.xml" token="!--@signserverws-ejb.jar@-->" value="module&gt;&lt;ejb&gt;SignServer-ejb-SignServerWS.jar&lt;/ejb&gt;&lt;/module&gt;"/>
        <replace file="${signserver.ear.dir}/META-INF/application.xml" token="!--@signserverws-ejb.jar@-->" value="module>&lt;ejb>SignServer-ejb-SignServerWS.jar&lt;/ejb>&lt;/module>"/>
        <replace file="${signserver.ear.dir}/META-INF/application.xml" token="!--@validationws-ejb.jar@-->" value="module>&lt;ejb>SignServer-ejb-ValidationWS.jar&lt;/ejb>&lt;/module>"/>
        <replace file="${signserver.ear.dir}/META-INF/application.xml" token="!--@adminws-ejb.jar@-->" value="module>&lt;ejb>SignServer-ejb-AdminWS.jar&lt;/ejb>&lt;/module>"/>
        <replace file="${signserver.ear.dir}/META-INF/application.xml" token="!--@SignServer-war-Doc.war@-->" value="module>&lt;web>&lt;web-uri>SignServer-war-Doc.war&lt;/web-uri>&lt;context-root>/signserver/doc&lt;/context-root>&lt;/web>&lt;/module>"/>
        
    </target>
    
    <target name="-preprocess-persistence" depends="-init-configure">
        <property name="persistence.xml" location="tmp/persistence.xml"/>
        <property name="entity-mappings.xml" location="tmp/entity-mappings.xml"/>
        
        <!-- Persistence -->
        <echo message="Database type:      ${database.name}"/>
        <echo message="DataSource mapping: ${datasource.jndi-name-prefix}${datasource.jndi-name}"/>
        <condition property="hibernate.dialect" value="org.hibernate.dialect.DB2Dialect">
            <equals arg1="${database.name}" arg2="db2"/>
        </condition>
        <condition property="hibernate.dialect" value="org.hibernate.dialect.DerbyDialect">
            <equals arg1="${database.name}" arg2="derby"/>
        </condition>
        <condition property="hibernate.dialect" value="org.hibernate.dialect.HSQLDialect">
            <equals arg1="${database.name}" arg2="hsqldb"/>
        </condition>
        <condition property="hibernate.dialect" value="org.hibernate.dialect.InformixDialect">
            <equals arg1="${database.name}" arg2="informix"/>
        </condition>
        <condition property="hibernate.dialect" value="org.hibernate.dialect.IngresDialect">
            <equals arg1="${database.name}" arg2="ingres"/>
        </condition>
        <condition property="hibernate.dialect" value="org.hibernate.dialect.SQLServerDialect">
            <equals arg1="${database.name}" arg2="mssql"/>
        </condition>
        <condition property="hibernate.dialect" value="org.hibernate.dialect.MySQLDialect">
            <equals arg1="${database.name}" arg2="mysql"/>
        </condition>
        <condition property="hibernate.dialect" value="org.hibernate.dialect.Oracle10gDialect">
            <equals arg1="${database.name}" arg2="oracle"/>
        </condition>
        <condition property="hibernate.dialect" value="org.hibernate.dialect.PostgreSQLDialect">
            <equals arg1="${database.name}" arg2="postgres"/>
        </condition>
        <condition property="hibernate.dialect" value="org.hibernate.dialect.SybaseDialect">
            <equals arg1="${database.name}" arg2="sybase"/>
        </condition>
        <fail unless="hibernate.dialect" message="Unsupported database type '${database.name}'."/>
        <mkdir dir="${build}/META-INF"/>
        <copy file="src/appserver/${appserver.type}/persistence.xml" tofile="${persistence.xml}" failonerror="true" overwrite="true">
            <filterchain>
                <expandproperties/>
            </filterchain>
        </copy>
        
        <!-- Entity mappings -->
        <copy file="src/deploy/ejb/persistence-mappings/${database.name}/entity-mappings.xml" tofile="${entity-mappings.xml}"/>
    </target>
    
    <target name="-configure-SignServer-ejb.jar" depends="-init-configure, -preprocess-persistence">
        <property name="SignServer-ejb.jar.dir" location="tmp/SignServer-ejb.jar"/>
        <delete dir="${SignServer-ejb.jar.dir}"/>
        <mkdir dir="${SignServer-ejb.jar.dir}"/>
        <mkdir dir="${SignServer-ejb.jar.dir}/META-INF"/>
    
        <!-- Update SignServer-ejb.jar -->
        <zip destfile="${signserver.ear.dir}/SignServer-ejb.jar" duplicate="fail">
            <zipfileset src="${server.dist.dir}/SignServer-ejb.jar">
                <exclude name="META-INF/persistence.xml"/>
                <exclude name="META-INF/entity-mappings.xml"/>
            </zipfileset>
            <zipfileset file="${persistence.xml}" prefix="META-INF"/>
            <zipfileset file="${entity-mappings.xml}" prefix="META-INF"/>
        </zip>
    </target>
    
    <target name="-configure-SignServer-ejb-ValidationWS.jar" depends="-init-configure, -preprocess-persistence">
        <property name="signserver-ejb-ValidationWS.jar.dir" location="tmp/signserver-ejb-ValidationWS.jar.dir"/>
        <delete dir="${signserver-ejb-ValidationWS.jar.dir}"/>
        <mkdir dir="${signserver-ejb-ValidationWS.jar.dir}"/>
        <mkdir dir="${signserver-ejb-ValidationWS.jar.dir}/META-INF"/>
    
        <unzip src="${server.dist.dir}/SignServer-ejb-ValidationWS.jar" dest="${signserver-ejb-ValidationWS.jar.dir}">
            <patternset>
                <include name="META-INF/ejb-jar.xml"/>
            </patternset>
        </unzip>
    
<!--        <property name="datasource.jndi-name" value="SignServerDS"/>
        <property name="datasource.jndi-name-prefix" value="java:/"/>-->
        <copy file="${signserver-ejb-ValidationWS.jar.dir}/META-INF/ejb-jar.xml" tofile="${signserver-ejb-ValidationWS.jar.dir}/META-INF/ejb-jar.xml.2"
            failonerror="true" overwrite="true">
                <filterchain>
                    <expandproperties/>
                </filterchain>
        </copy>
        <copy file="${signserver-ejb-ValidationWS.jar.dir}/META-INF/ejb-jar.xml.2" tofile="${signserver-ejb-ValidationWS.jar.dir}/META-INF/ejb-jar.xml" overwrite="true"/>
        
        <!-- Update JAR -->
        <zip destfile="${signserver.ear.dir}/SignServer-ejb-ValidationWS.jar" duplicate="fail">
            <zipfileset src="${server.dist.dir}/SignServer-ejb-ValidationWS.jar">
                <exclude name="META-INF/ejb-jar.xml"/>
            </zipfileset>
            <zipfileset dir="${signserver-ejb-ValidationWS.jar.dir}">
                <include name="META-INF/ejb-jar.xml" />
            </zipfileset>
        </zip>
    </target>
    
    <target name="-configure-SignServer-ejb-SignServerWS.jar" depends="-init-configure, -preprocess-persistence">
        <property name="signserver-ejb-SignServerWS.jar.dir" location="tmp/signserver-ejb-SignServerWS.jar"/>
        <delete dir="${signserver-ejb-SignServerWS.jar.dir}"/>
        <mkdir dir="${signserver-ejb-SignServerWS.jar.dir}"/>
        <mkdir dir="${signserver-ejb-SignServerWS.jar.dir}/META-INF"/>
    
        <unzip src="${server.dist.dir}/SignServer-ejb-SignServerWS.jar" dest="${signserver-ejb-SignServerWS.jar.dir}">
            <patternset>
                <include name="META-INF/ejb-jar.xml"/>
            </patternset>
        </unzip>
    
<!--        <property name="datasource.jndi-name" value="SignServerDS"/>
        <property name="datasource.jndi-name-prefix" value="java:/"/>-->
        <copy file="${signserver-ejb-SignServerWS.jar.dir}/META-INF/ejb-jar.xml" tofile="${signserver-ejb-SignServerWS.jar.dir}/META-INF/ejb-jar.xml.2"
            failonerror="true" overwrite="true">
                <filterchain>
                    <expandproperties/>
                </filterchain>
        </copy>
        <copy file="${signserver-ejb-SignServerWS.jar.dir}/META-INF/ejb-jar.xml.2" tofile="${signserver-ejb-SignServerWS.jar.dir}/META-INF/ejb-jar.xml" overwrite="true"/>
        
        <!-- Update JAR -->
        <zip destfile="${signserver.ear.dir}/SignServer-ejb-SignServerWS.jar" duplicate="fail">
            <zipfileset src="${server.dist.dir}/SignServer-ejb-SignServerWS.jar">
                <exclude name="META-INF/ejb-jar.xml"/>
            </zipfileset>
            <zipfileset dir="${signserver-ejb-SignServerWS.jar.dir}">
                <include name="META-INF/ejb-jar.xml" />
            </zipfileset>
        </zip>
    </target>
    
    <target name="-configure-SignServer-ejb-AdminWS.jar" depends="-init-configure, -preprocess-persistence">
        <!-- Nothing to do -->
        <copy todir="${signserver.ear.dir}">
            <fileset file="${server.dist.dir}/SignServer-ejb-AdminWS.jar"/>
        </copy>
        
    </target>
    
    <target name="-configure-SignServer-war-Healthcheck" depends="-init-configure">
        <property name="healthcheck.war.dir" location="tmp/healthcheck.war"/>
        <delete dir="${healthcheck.war.dir}"/>
        <mkdir dir="${healthcheck.war.dir}"/>
        <mkdir dir="${healthcheck.war.dir}/WEB-INF"/>
        
        <unzip src="${server.dist.dir}/SignServer-war-Healthcheck.war" dest="${healthcheck.war.dir}">
            <patternset>
                <include name="WEB-INF/web.xml"/>
            </patternset>
        </unzip>
        
        <!-- Configure -->
        <copy file="${healthcheck.war.dir}/WEB-INF/web.xml" tofile="${healthcheck.war.dir}/WEB-INF/web.xml.2" overwrite="true">
            <filterchain>
                <tokenfilter>
                    <replacestring from="@datasource.jndi-name-prefix@"
                        to="${datasource.jndi-name-prefix}"/>
                    <replacestring from="@datasource.jndi-name@"
                        to="${datasource.jndi-name}"/>
                    <replacestring from="@healthcheck.authorizedips@"
                        to="${healthcheck.authorizedips}"/>
                    <replacestring from="@healthcheck.minimumfreememory@"
                        to="${healthcheck.minimumfreememory}"/>
                    <replacestring from="@healthcheck.checkdbstring@"
                        to="${healthcheck.checkdbstring}"/>
                </tokenfilter>
            </filterchain>
        </copy>
        <copy file="${healthcheck.war.dir}/WEB-INF/web.xml.2" tofile="${healthcheck.war.dir}/WEB-INF/web.xml" overwrite="true"/>
    
        <!-- Update web -->
        <zip destfile="${signserver.ear.dir}/SignServer-war-Healthcheck.war" duplicate="fail">
            <zipfileset src="${server.dist.dir}/SignServer-war-Healthcheck.war">
                <exclude name="WEB-INF/web.xml"/>
            </zipfileset>
            <zipfileset dir="${healthcheck.war.dir}">
                <include name="WEB-INF/web.xml" />
            </zipfileset>
        </zip>
    </target>
    
    <target name="-configure-SignServer-Common.jar" depends="-init-configure">
        <property name="SignServer-Common.jar.dir" location="tmp/SignServer-Common.jar"/>
        <delete dir="${SignServer-Common.jar.dir}"/>
        <mkdir dir="${SignServer-Common.jar.dir}"/>
    
        <unzip src="${server.dist.dir}/lib/SignServer-Common.jar" dest="${SignServer-Common.jar.dir}">
            <patternset>
                <include name="org/signserver/common/signservercompile.properties"/>
            </patternset>
        </unzip>
    
<!--        <property name="datasource.jndi-name" value="SignServerDS"/>
        <property name="datasource.jndi-name-prefix" value="java:/"/>-->
        <copy file="${SignServer-Common.jar.dir}/org/signserver/common/signservercompile.properties" tofile="${SignServer-Common.jar.dir}/org/signserver/common/signservercompile.properties.2"
            failonerror="true" overwrite="true">
                <filterchain>
                    <expandproperties/>
                </filterchain>
        </copy>
        <copy file="${SignServer-Common.jar.dir}/org/signserver/common/signservercompile.properties.2" tofile="${SignServer-Common.jar.dir}/org/signserver/common/signservercompile.properties" overwrite="true"/>
        
        <!-- Update JAR -->
        <zip destfile="${signserver.ear.dir}/lib/SignServer-Common.jar" duplicate="fail">
            <zipfileset src="${server.dist.dir}/lib/SignServer-Common.jar">
                <exclude name="org/signserver/common/signservercompile.properties"/>
            </zipfileset>
            <zipfileset dir="${SignServer-Common.jar.dir}">
                <include name="org/signserver/common/signservercompile.properties" />
            </zipfileset>
        </zip>
    </target>
    
        

    <!-- =================================================================== -->
    <!-- Build ALL                                                           -->
    <!-- =================================================================== -->
    <target name="default" depends="build" description="Default target"/>

    <target name="build" depends="signserver, signserver-cli,
        validationClient, signingAndValidationAPI, -build-admingui,
        -build-clientcli, init, preprocess, signserver-ejb.jar, web.war, doc.war, healthcheck.war, signserverws-ejb.jar, validationws-ejb.jar, adminws-ejb.jar, modules">
            <antcall target="showtime"/>
    </target>


    <!-- =================================================================== -->
    <!-- Create the time stamp and build directory -->
    <!-- =================================================================== -->
    <target name="init" depends="j2ee:check">
        <echo>
------------- SYSTEM PROPERTIES --------------
ANT version                         = ${ant.version}
JRE version                         = ${java.version}
JRE vendor                          = ${java.vendor}
Java home                           = ${java.home}
Java extensions dir                 = ${java.ext.dirs}
OS name                             = ${os.name}
OS architecture                     = ${os.arch}
OS version                          = ${os.version}
        </echo>
    	<antcall target="signserver.init"/>

        <!-- Create the time stamp -->
        <tstamp/>
        <!-- Create the build directory structure used by compile -->
        <mkdir dir="${build}"/>
        <mkdir dir="${server.dist.dir}/lib"/>
        <mkdir dir="${client.dist.dir}/lib"/>
    </target>


    <!-- =================================================================== -->
    <!-- Main Clean                                                          -->
    <!-- =================================================================== -->

    <target name="clean">
        <!-- Delete the ${build} and ${server.dist.dir} directory trees -->
        <delete dir="${build}" />
        <delete dir="${server.dist.dir}" />
    	<delete dir="${pkg.dist.dir}" />
        <delete dir="${apidoc}" />
        <delete dir="${tmp}"/>	
    	<delete dir="${client.dist.dir}" />
        <delete dir="${test.dir}" />
        <delete dir="${validationClientBuild}" />
        <delete dir="${signingAndValidationBuild}" />
        <delete dir="${wsraadminClientBuild}" />
        <delete dir="${timeStampClientBuild}" />

        <!-- Clean all modules -->
        <subant target="clean">
            <fileset dir="modules" includes="SignServer-*/build.xml"/>
         </subant>
    </target>

    <!--
      Preprocesses SignServer by replacing tags with correct version and
      application texts.
    -->
    <target name="preprocess" depends="preprocess-extjava, preprocess-extweb, configure-client" >

        <mkdir dir="${build}/org/signserver/common"/>

        <propertyfile file="${build}/org/signserver/common/signservercompile.properties" comment="SignServer compile-time properties. Generated file do not edit manually!">
            <entry key="appname" value="${app.name}"/>
            <entry key="appname_capital" value="${app.name.cap}"/>
            <entry key="buildmode" value="${build.mode}"/>
            <entry key="datasource.jndi-name-prefix" value="${datasource.jndi-name-prefix}"/>
            <entry key="datasource.jndi-name" value="${datasource.jndi-name}"/>
            <entry key="healthcheck.authorizedips" value="${healthcheck.authorizedips}"/>
            <entry key="healthcheck.minimumfreememory" value="${healthcheck.minimumfreememory}"/>
            <entry key="healthcheck.checkdbstring" value="${healthcheck.checkdbstring}"/>
            <entry key="signserver.useclusterclassloader" value="${useclusterclassloader}"/>
            <entry key="signserver.useclassversions" value="${clusterclassloader.useclassversions}"/>
            <entry key="signserver.requiresignature" value="${clusterclassloader.requiresignature}"/>
            <entry key="signserver.pathtotruststore" value="${clusterclassloader.pathtotruststore}"/>
            <entry key="signserver.truststorepwd" value="${clusterclassloader.truststorepwd}"/>
            <entry key="SignServerCommandFactory" value="${custom.commandfactory}"/>
            <entry key="signserver.configfile" value="${signserver.configfile}"/>
            <entry key="signserver.version" value="${app.version}"/>
            <entry key="webdoc.enabled" value="${webdoc.enabled}"/>
        </propertyfile>

    </target>

    <target name="preprocess-extjava"  if="custom.src.java">
        <mkdir dir="${preprocessed}/java"/>
        <copy todir="${preprocessed}/java">
            <fileset dir="${custom.src.java}">
              <include name="**"/>
            </fileset>
        </copy>
    </target>
	
    <target name="preprocess-extweb"  if="custom.src.web">
       <mkdir dir="${preprocessed}/web/pub"/>       	
       <copy todir="${preprocessed}/web/pub">
          <fileset dir="${custom.src.web}">
             <include name="**"/>
           </fileset>	      
       </copy>
     </target>


     <!-- SignServer-Common -->
     <target name="signserver-common" depends="preprocess">
        <ant inheritall="false" target="jar"
            antfile="${signservercommon.dir}/build.xml"/>
        <mkdir dir="dist-client/lib" />
        <copy todir="dist-client/lib">
            <fileset dir="${signservercommon.dir}/dist">
                <include name="*.jar"/>
            </fileset>
        </copy>
        <mkdir dir="dist-server/lib" />
        <copy todir="dist-server/lib">
            <fileset dir="${signservercommon.dir}/dist">
                <include name="*.jar"/>
            </fileset>
        </copy>
     </target>


     <!-- SignServer-ejb -->
     <target name="signserver-ejb">
        <ant inheritall="false" target="dist"
            antfile="${signserverejb.dir}/build.xml"/>
        <mkdir dir="dist-client/lib" />
        <copy todir="dist-client/lib">
            <fileset dir="${signserverejb.dir}/dist">
                <include name="*.jar"/>
            </fileset>
        </copy>
     </target>


    <!-- AdminCLI -->
    <target name="signserver-cli" depends="signserver-common, signserver-ejb"
        description="Build SignServer AdminCLI">
        <ant inheritall="false" target="jar"
            antfile="${admincli.dir}/build.xml"/>
	
    	<echo message="Ignore warnings about jar files that can not be copied, they are for other application servers"/>
    	<!-- JBoss:
            For JBoss 4.2.3.GA only jbossall-client.jar is needed.
            For JBoss 5.1.0.GA jbossall-client.jar is referencing the needed
            libraries so all of them needs to be copied.
            <copy file="${appserver.home}/client/jbossall-client.jar" todir="${client.dist.dir}/lib" failonerror="false"/>
        -->
        <copy todir="${client.dist.dir}/lib" failonerror="false">
          <fileset dir="${appserver.home}/client">
             <include name="*.jar"/>
           </fileset>
       </copy>
    	<!-- Glassfish -->
    	<copy file="${appserver.home}/lib/appserv-rt.jar" todir="${client.dist.dir}/lib" failonerror="false"/> 
    	<copy file="${appserver.home}/lib/appserv-deployment-client.jar" todir="${client.dist.dir}/lib" failonerror="false"/> 
    	<copy file="${appserver.home}/lib/appserv-ext.jar" todir="${client.dist.dir}/lib" failonerror="false"/> 
    </target>


    <!-- AdminGUI -->
    <target name="admingui" depends="preprocess"
        description="Build the administration GUI">
        <ant antfile="${admingui.dir}/build.xml" target="jar"
            inheritall="false"/>
    </target>
    <target name="-build-admingui" if="admingui.conditionenabled">
        <antcall target="admingui"/>
    </target>

    <!-- ClientCLI -->
    <target name="clientcli"
        description="Build the client CLI">
        <ant antfile="${clientcli.dir}/build.xml" target="jar"
            inheritall="false"/>
    </target>
    <target name="-build-clientcli" if="clientcli.conditionenabled">
        <antcall target="clientcli"/>
    </target>


    <!-- =================================================================== -->
    <!-- Build preparation for package distribution                         -->
    <!-- =================================================================== -->

    <target name="pkgdist" depends="signserver, signserver-cli, signserver-pkgdist"/>

    <!-- =================================================================== -->
    <!-- Documentation part                                                  -->
    <!-- =================================================================== -->
    <target name="doc"
        description="Build SignServer web site and docs">
        <ant antfile="modules/SignServer-Doc/build.xml" target="build"
            inheritall="false"/>
    </target>
    
    
    <!-- =================================================================== -->
    <!-- Build Javadoc part                                                  -->
    <!-- =================================================================== -->

    <target name="javadoc" depends="build"
        description="Build JavaDoc for SignServer">
        <mkdir dir="${apidoc}" />
        <javadoc failonerror="true" useexternalfile="true" packagenames="org.signserver.*" maxmemory="256m" sourcepath="${src.java}" destdir="${apidoc}"
        	extdirs="${lib}:${lib}/ext:${ant.home}/lib:${lib}/ext/ejb:${lib}/ext/james:${lib}/asm:${lib}/${server.java.target}/:${lib}/${client.java.target}/:${lib}/module/tsa/${server.java.target}:${lib}/module/pdfsigner/itext:${lib}/module/wsra:${lib}/reports:${lib}/quartz:${lib}/jaxws:${lib}/module/odfsigner/odfdom.jar" author="true" version="true" use="true" windowtitle="${app.name.cap} API" bottom="Copyright &#169; 2005-2011 PrimeKey Solutions AB." encoding="utf-8" charset="utf-8">
                <fileset dir="${src.java}">
                    <include name="**/*.java"/>
                </fileset>
                <fileset dir="${signservercommon.src.java}">
                    <include name="**/*.java"/>
                </fileset>
                <fileset dir="${signserverejb.src.java}">
                    <include name="**/*.java"/>
                </fileset>

                <!-- Include all java files in the modules folder but excluding the tests -->
                <fileset dir="modules" includes="**/*.java" excludes="*/test/**/*.java"/>
                
                <classpath refid="server.compile.classpath"/>
                <classpath path="modules/SignServer-AdminGUI/lib/swing-app-framework/appframework-1.0.3.jar:modules/SignServer-AdminGUI/lib/swing-app-framework/swing-worker-1.1.jar:modules/SignServer-AdminGUI/lib/beans-binding/beansbinding-1.2.1.jar"/>
        </javadoc>
        <echo message="Local documentation is now available in file://${apidoc}/index.html"/>
    </target>
    

    <!-- =================================================================== -->
    <!-- Test part                                                           -->
    <!-- =================================================================== -->

    <target name="test:compile"/>

    <!-- Run tests -->
    <target name="test:run" depends="test:signserver:run" 
        description="Run the default JUnit testcases"/>

    <!-- Run all tests -->
    <target name="test:runall" depends="test:signserver:runall"
        description="Run all JUnit testcases"/>

    <target name="test:runperf" description="Test performace of signing modules">
        <antcall target="test:signserver:performance"/>
    </target>
        

    <!-- =================================================================== -->
    <!-- Release part                                                        -->
    <!-- =================================================================== -->

    <!-- Deprecated: New target called release:zip -->
    <target name="ziprelease" depends="release:zip"/>

    <target name="release:zip" description="Make a zip file for SignServer release" >
        <property name="signserver.zipversion" value="${app.version.number}"/>
        <!-- <input message="Version tag for zipfile (ex 3_1_0):" addproperty="signserver.zipversion" /> -->
        <antcall target="-release:zip-lgpl21"/>
    </target>

    <target name="release:source-zip" description="Make a source zip files for SignServer release" >
        <property name="signserver.zipversion" value="${app.version.number}"/>
        <!-- <input message="Version tag for zipfile (ex 3_1_0):" addproperty="signserver.zipversion" /> -->
        <antcall target="-release:source-zip-lgpl21"/>
    </target>

    <target name="release:source-tarball" description="Make a source tarball for SignServer release">
        <property name="signserver.zipversion" value="${app.version.number}"/>
        <antcall target="-release:source-tarball-lgpl21"/>
    </target>

    <target name="-release:zip-lgpl21" depends="clean">
        <copy file="doc/lgpl-2.1.txt" tofile="LICENSE" />
        <zip destfile="../signserver-${signserver.zipversion}.zip">
            <zipfileset dir="." prefix="signserver-${signserver.zipversion}" filemode="600" dirmode="700">
                <include name="**/**" />
                <exclude name="doc/lgpl-**" />
                <exclude name="**/CVS/**" />
                <exclude name="signserver_build.properties" />
                <exclude name="tmp/**" />
                <exclude name="p12/**" />
                <exclude name="dist/**" />
                <exclude name="dist-client/**" />
                <exclude name="dist-server/**" />
                <exclude name="out/**" />
                <exclude name="eclipseBuild/**" />
                <exclude name="**/*.class" />
                <exclude name=".classpath" />
                <exclude name=".project" />
                <exclude name=".eclipse/**" />
                <exclude name=".settings/**" />
                <exclude name="**/.cvsignore" />
                <exclude name="**/*.sh" />
                <exclude name="**/nbproject/private/**" />
            </zipfileset>
            <zipfileset dir="." prefix="signserver-${signserver.zipversion}" filemode="700" dirmode="700">
                <include name="**/*.sh" />
            </zipfileset>
        </zip>
        <delete file="LICENSE"/>
        <checksum file="../signserver-${signserver.zipversion}.zip" algorithm="SHA1" forceOverwrite="yes"/>
        <checksum file="../signserver-${signserver.zipversion}.zip" algorithm="SHA1" property="signserverSHA1"/>
        <echo message="SHA1 checksum: ${signserverSHA1}" />
    </target>

    <target name="-release:source-zip-lgpl21" depends="clean">
        <copy file="doc/lgpl-2.1.txt" tofile="LICENSE" />
        <zip destfile="../signserver-${signserver.zipversion}-src.zip">
            <zipfileset dir="." prefix="signserver-${signserver.zipversion}-src" filemode="600" dirmode="700">
                <include name="**/**" />
                <exclude name="doc/lgpl-**" />
                <exclude name="**/CVS/**" />

                <exclude name="signserver_build.properties" />
                <exclude name="tmp/**" />
                <exclude name="p12/**" />
                <exclude name="**/dist/**" />
                <exclude name="**/build/**" />
                <exclude name="SignServer-AdminGUI/lib/**" />
                <exclude name="dist-client/**" />
                <exclude name="dist-server/**" />
                <exclude name="out/**" />
                <exclude name="eclipseBuild/**" />
                <exclude name="**/*.class" />
                <exclude name=".classpath" />
                <exclude name=".project" />
                <exclude name=".eclipse/**" />
                <exclude name=".settings/**" />
                <exclude name="**/.cvsignore" />
                <exclude name="**/*.sh" />
                <exclude name="**/nbproject/private/**" />
                <exclude name="**/lib/**" />
            </zipfileset>
            <zipfileset dir="." prefix="signserver-${signserver.zipversion}-src" filemode="700" dirmode="700">
                <include name="**/*.sh" />
            </zipfileset>
        </zip>
        <delete file="LICENSE"/>
        <checksum file="../signserver-${signserver.zipversion}-src.zip" algorithm="SHA1" forceOverwrite="yes"/>
        <checksum file="../signserver-${signserver.zipversion}-src.zip" algorithm="SHA1" property="signserverSHA1"/>
        <echo message="SHA1 checksum: ${signserverSHA1}" />
    </target>

    <target name="-release:source-tarball-lgpl21" depends="clean">
        <copy file="doc/lgpl-2.1.txt" tofile="LICENSE" />
        <property name="tarball.tar" value="../signserver-${signserver.zipversion}-src.tar" />
        <property name="tarball.tar.gz" value="${tarball.tar}.gz" />
        <tar tarfile="${tarball.tar}" basedir="." longfile="gnu">
            <include name="**/**" />
            <exclude name="doc/lgpl-**" />
            <exclude name="**/CVS/**" />
            <exclude name="signserver_build.properties" />
            <exclude name="tmp/**" />
            <exclude name="p12/**" />
            <exclude name="**/dist/**" />
            <exclude name="**/build/**" />
            <exclude name="SignServer-AdminGUI/lib/**" />
            <exclude name="dist-client/**" />
            <exclude name="dist-server/**" />
            <exclude name="out/**" />
            <exclude name="eclipseBuild/**" />
            <exclude name="**/*.class" />
            <exclude name=".classpath" />
            <exclude name=".project" />
            <exclude name=".eclipse/**" />
            <exclude name=".settings/**" />
            <exclude name="**/.cvsignore" />
            <exclude name="**/*.sh" />
            <exclude name="**/nbproject/private/**" />
            <exclude name="**/lib/**" />
        </tar>
        <gzip destfile="${tarball.tar.gz}" src="${tarball.tar}"/>
        <delete file="${tarball.tar}"/>
        <delete file="LICENSE"/>
        <checksum file="${tarball.tar.gz}" algorithm="SHA1" forceOverwrite="yes"/>
        <checksum file="${tarball.tar.gz}" algorithm="SHA1" property="signserverSHA1"/>
        <echo message="SHA1 checksum: ${signserverSHA1}" />
    </target>


    <!-- =================================================================== -->
    <!-- Other part                                                        -->
    <!-- =================================================================== -->

    <target name="showtime">
        <tstamp>
                <format property="completiontime" pattern="yyyy-MM-dd HH:mm:ss Z"/>
        </tstamp>
        <echo message="Task completed ${completiontime}."/>
    </target>

</project>
