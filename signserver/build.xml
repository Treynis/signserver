<?xml version="1.0" encoding="UTF-8"?>
<!-- ======================================================================= -->
<!--                                                                         -->
<!--  SignServer: The OpenSource Automated Signing Server                    -->
<!--                                                                         -->
<!--  This software is free software; you can redistribute it and/or         -->
<!--  modify it under the terms of the GNU Lesser General Public             -->
<!--  License as published by the Free Software Foundation; either           -->
<!--  version 2.1 of the License, or any later version.                      -->
<!--                                                                         -->
<!--  See terms of license at gnu.org.                                       -->
<!--                                                                         -->
<!-- ======================================================================= -->
<!-- Version: $Id$ -->
<project name="signserver" default="usage" basedir=".">

    <!-- Load properties before including files -->
    <property environment="env" />
    <property name="base" location="."/>
    
    <property name="platform.project.dir" location="."/>

    <!-- Import property file containing version numbers and other constants -->
    <property file="res/compile.properties"/>
    
    <!-- Project properties such as folder names and locations. Can be overriden 
        by creating a file called signserver-project-custom.properties. -->
    <property file="res/signserver-project-custom.properties"/>
    <property file="res/signserver-project.properties"/>
    

    <!-- Give user a chance to override without editing this file
       (and without typing -D each time it compiles it).
       First it checks your home directory for signserver_build.properties
       net it checks the properties file here. -->
    <property file="${user.home}/${app.name}_build.properties" />
    <property file="${app.name}_build.properties" />
    <property file="${conf}/${app.name}_build.properties" />
 	
    <!--
    A little special something to handle backward compatibility with people
    using JBOSS_HOME. They can switch to APPSRV_HOME now, and both will work.
    -->
    <condition property="jboss.home" value="${env.JBOSS_HOME}" >
      <equals arg1="${appserver.home}" arg2="${appserver.home}"/>
    </condition>
    <condition property="appserver.home" value="${env.APPSRV_HOME}" else="${jboss.home}">
      <contains string="${jboss.home}" substring="JBOSS_HOME"/>
    </condition>
    <property name="j2ee.server.home" value="${appserver.home}"/>

    <!-- Lastly import the default properties -->
    <property file="${res}/default_build.properties"/>
    
    <condition property="j2ee.web-nohttps.condition">
        <istrue value="${j2ee.web-nohttps}"/>
    </condition>
    
    <!-- Auto-detect supported application server type -->
    <available file="${appserver.home}/client/jboss-appclient.jar" property="appserver.type" value="jboss"/>
    <available file="${appserver.home}/modules/org/jboss/as/standalone/main/module.xml" property="appserver.type" value="jboss"/>
    <available file="${appserver.home}/modules/system/layers/base/org/jboss/as/standalone/main/module.xml" property="appserver.type" value="jboss"/>
    <available file="${appserver.home}/client/cxf-api.jar" property="appserver.subtype" value="jboss6"/>
    <available file="${appserver.home}/common/lib/jboss-javaee.jar" property="appserver.subtype" value="jboss5"/>
    <available file="${appserver.home}/common/lib/jboss-ejb3-common.jar" property="appserver.subtype" value="jboss5"/>
    <available file="${appserver.home}/modules/org/jboss/as/standalone/main/module.xml" property="appserver.subtype" value="jboss7"/>
    <available file="${appserver.home}/modules/system/layers/base/org/jboss/as/standalone/main/module.xml" property="appserver.subtype" value="jbosseap6"/>
    <available file="${appserver.home}/lib/javaee.jar" property="appserver.type" value="glassfish"/>
    <available file="${appserver.home}/lib/appserv-ext.jar" property="appserver.subtype" value="glassfish2"/>
    <available file="${appserver.home}/modules/bean-validator.jar" property="appserver.subtype" value="glassfish3"/>
    <available file="${appserver.home}/wlserver_10.3/server/lib/wlclient.jar" property="appserver.type" value="weblogic"/>
    <available file="${appserver.home}/lib/commandlineutils.jar" property="appserver.type" value="websphere"/>
    
    <!-- Import for the right appserver -->
    <import file="${res}/appserver/${appserver.type}.xml" optional="true"/>
    
    <target name="check-appserver">
         <fail unless="appserver.type" message="Unable to identify application server type"/>
         <available file="${res}/appserver/${appserver.type}.xml" property="appserver.supported"/>
         <fail unless="appserver.supported" message="Application server type '${appserver.type}' not supported"/>
         <antcall target="j2ee:check"/>
    </target>
    
    <import file="${custom.build.xml}" optional="true"/>

    <!-- Properties with paths to all module projects -->
    <property file="${res}/modules-project.properties"/>
    
    <condition property="web.admingui.dist.conditionenabled">
        <istrue value="${web.admingui.dist.enabled}"/>
    </condition>
    
    <import file="${modules}/modules.xml" optional="true"/> 
    <import file="${modules}/compile.xml" optional="true"/>
    
    
    <!-- =================================================================== -->
    <!-- Help targets                                                        -->
    <!-- =================================================================== -->
    
    <target name="help" depends="usage"/>
    <target name="usage" description="Displays usage examples for this Ant script">
        <echo>
Usage examples for the SignServer Ant script


bin/ant -p                  Prints the main Ant targets supported by this 
                            script.
bin/ant usage               Prints this text with sample usages.
bin/ant clean               Cleans temporary files, the final EAR file and if 
                            this is a source distribution all the built 
                            binaries.

Some targets available in both binary and source distribution:
bin/ant display-properties  Prints the properties that will be used to build or
                            composing the EAR file.
bin/ant compose-ear         Puts together the final configured EAR file.
bin/ant deploy              Configures the EAR file and then deploys it and 
                            data sources etc (if supported) to the configured 
                            application server.
bin/ant systemtest:jars     Run all available systemtest JARs.
            
Some targets available only in the source distribution:
bin/ant build               Builds everything enabled.
bin/ant build-systemtests   Builds the systemtest JARs.
bin/ant test:run            Run the default JUnit tests.
bin/ant test:compile        Compiles the tests so they can be run by an IDE.
            
To clean &amp; build and deploy run:
bin/ant clean build deploy
        </echo>
    </target>
    
    <target name="display-properties">
        <echo>
------------- SYSTEM PROPERTIES --------------
ANT version                         = ${ant.version}
JRE version                         = ${java.version}
JRE vendor                          = ${java.vendor}
Java home                           = ${java.home}
Java extensions dir                 = ${java.ext.dirs}
OS name                             = ${os.name}
OS architecture                     = ${os.arch}
OS version                          = ${os.version}
        </echo>

        <!-- Build properties, if source distribution -->
        <subant target="display-build-properties" inheritall="true">
            <fileset dir="${base}" includes="modules/compile.xml"/>
         </subant>
         
         <echo>
------------- CONFIG PROPERTIES --------------
appserver.type                      = ${appserver.type}
appserver.subtype                   = ${appserver.subtype}
appserver.home                      = ${appserver.home}
web.contentencoding                 = ${web.contentencoding}
j2ee.web-nohttps                    = ${j2ee.web-nohttps}
datasource.jndi-name                = ${datasource.jndi-name}
datasource.jndi-name-prefix         = ${datasource.jndi-name-prefix}
database.name                       = ${database.name}
database.url                        = ${database.url}
database.driver                     = ${database.driver}
database.username                   = ${database.username}
database.password                   = ${database.password}
database.nodb.location              = ${database.nodb.location}
healthcheck.maintenancefile         = ${healthcheck.maintenancefile}
        </echo>
    </target>
    
    <target name="showtime">
        <tstamp>
                <format property="completiontime" pattern="yyyy-MM-dd HH:mm:ss Z"/>
        </tstamp>
        <echo message="Task completed ${completiontime}."/>
    </target>


    <!-- =================================================================== -->
    <!-- Main Clean                                                          -->
    <!-- =================================================================== -->

    <target name="clean">
        <echo>Cleaning tmp</echo>
        <delete dir="${tmp}"/>	

        <!-- Clean everything if this is a source distribution -->
        <subant target="clean-build" inheritall="true" failonerror="true">
            <fileset dir="${base}" includes="modules/compile.xml"/>
         </subant>
    </target>

    
    <!-- =================================================================== -->
    <!-- Configuring                                                         -->
    <!-- =================================================================== -->
    
    <target name="-check-built">
        <fileset dir="lib" includes="SignServer*.jar" id="signserverjar"/>
        <condition property="signserver-ejb.jar.available">
          <not>
            <equals arg1="${toString:signserverjar}" arg2="" />
          </not>
        </condition>
        <available file="lib/SignServer-ejb.jar" property="signserver-ejb.jar.available"/>
        <fail message="SignServer needs to be built first. Run 'ant build'." unless="signserver-ejb.jar.available"/>
    </target>
    
    <target name="compose-ear" description="Compose the configured EAR file" depends="-check-built, display-properties, -init-configure, -process-modules, -create-admingui-dist">
        <!-- Build the ear file from the signserver.ear folder -->
        <ear destfile="${ear.dist.file}" appxml="${signserver.ear.dir}/META-INF/application.xml" duplicate="fail">
            <fileset dir="${signserver.ear.dir}">
                <exclude name="META-INF/application.xml" />
            </fileset>
            <zipfileset refid="appserver.extralibs"/>
        </ear>
        <echo>
Configured ear file available at: ${ear.dist.file}    
        </echo>
    </target>
    
    <target name="-process-modules" depends="check-appserver, -init-configure, -preprocess-persistence, -set-ejbjarheader-nodb">
        <echo/>
<!--        <taskdef name="postprocess-jar" classname="org.signserver.anttasks.JarPostProcessTask" classpath="lib/SignServer-BuildTools.jar:lib/ext/commons-io-1.4.jar:lib/ext/commons-lang-2.5.jar"/>-->
        
        <taskdef name="mods" classname="org.signserver.anttasks.ProcessModulesTask" classpath="lib/SignServer-BuildTools.jar"/>
        
        <condition property="allEnabled">
            <istrue value="${includemodulesinbuild}"/>
        </condition>
        
        <mods modsDir="mods-available" libSet="toLibs" rootSet="toRoot" configRootSet="toConfigRoot" configConfSet="toConfigConf" applicationXml="appXml" enabledModules="enabledModules" allEnabled="${allEnabled}"/>
<!--        <echo>
Enabled modules:
    ${enabledModules}</echo>-->
        <echo level="verbose">
Additions to application.xml: 
${appXml}
        </echo>
        <replace file="${signserver.ear.dir}/META-INF/application.xml" value="${appXml}">
            <replacetoken><![CDATA[<!--@MODULES@-->]]></replacetoken>
        </replace>

        <echo level="verbose">Enterprise modules to include:
    ${toRoot}</echo>
        <copy todir="${signserver.ear.dir}" flatten="true">
            <fileset dir="." includes="${toRoot}"/>
        </copy>
        
        <echo level="verbose">
Libraries to include:
    ${toLibs}
        </echo>
        <mkdir dir="${signserver.ear.dir}/lib"/>
        <copy todir="${signserver.ear.dir}/lib" flatten="true" verbose="true">
            <fileset dir="." includes="${toLibs}" excludes="${appserver.lib.excludes}"/>
        </copy>
        
        <!-- For each module call postprocess -->
<!--        <taskdef name="antcallforall" classname="org.signserver.anttasks.AntCallForAllTask" classpath="lib/SignServer-BuildTools.jar"/>-->

        <echo/>
        <echo>Post processing files...</echo>
        
        <taskdef name="postprocess" classname="org.signserver.anttasks.PostProcessModulesTask" classpath="lib/SignServer-BuildTools.jar:lib/ext/commons-io-1.4.jar:lib/ext/commons-lang-2.5.jar"/>
        
        <postprocess modules="${enabledModules}"/>
        
        <echo/>
        <echo>Filtering jars...</echo>
        <antcall target="-filter-jars"/>
        
        <echo level="verbose">
Configurations to include:
  /
    ${toConfigRoot}
  /conf/
    ${toConfigConf}
            
        </echo>
        
        <!-- Config -->
        <property name="config.tmp.dir" location="${tmp}/config.jar"/>
        <delete dir="${config.tmp.dir}"/>
        <mkdir dir="${config.tmp.dir}"/>
        <mkdir dir="${config.tmp.dir}/conf"/>
        <copy todir="${config.tmp.dir}" flatten="true">
            <fileset dir="." includes="-non-existing-,${toConfigRoot}"/>
        </copy>
        <copy todir="${config.tmp.dir}/conf" flatten="true">
            <fileset dir="." includes="-non-existing-,${toConfigConf}"/>
        </copy>
        
        <mkdir dir="${signserver.ear.dir}/lib"/>
        <jar destfile="${signserver.ear.dir}/lib/config.jar">
            <zipfileset dir="${config.tmp.dir}" />
        </jar>
    </target>
    
    <!-- 
        Special trick to filter out different SessionBeans from cesecore-ejb
        depending on if the NODB mode is used or not.
    -->
    <!-- TODO: This is SignServer and CESeCore specific but could be made more generic 
        by adding properties to the module descriptors to configure what to filter etc. -->
    <target name="-filter-jars" depends="-init-filter-jars-db,-init-filter-jars-nodb">
        
        <!-- cesecore-ejb.jar -->
        <property name="cesecore-ejb.jar" value="cesecore-ejb-1.1.2.jar"/>
        <move todir="${tmp}" file="${signserver.ear.dir}/${cesecore-ejb.jar}"/>
        <jar destfile="${signserver.ear.dir}/${cesecore-ejb.jar}">
            <zipfileset src="${tmp}/${cesecore-ejb.jar}" excludes="${cesecore-ejb-excludes}"/>
        </jar>
        
        <!-- cesecore-entities.jar -->
        <property name="cesecore-entities.jar" value="cesecore-entity-1.1.2.jar"/>
        <move todir="${tmp}" file="${signserver.ear.dir}/lib/${cesecore-entities.jar}"/>
        <jar destfile="${signserver.ear.dir}/lib/${cesecore-entities.jar}">
            <zipfileset src="${tmp}/${cesecore-entities.jar}" excludes="${cesecore.entities.excludes}"/>
        </jar>
        
        <!-- signserver-ejb.jar -->
        <property name="signserver-ejb.jar" value="SignServer-ejb.jar"/>
        <move todir="${tmp}" file="${signserver.ear.dir}/${signserver-ejb.jar}"/>
        <jar destfile="${signserver.ear.dir}/${signserver-ejb.jar}">
            <zipfileset src="${tmp}/${signserver-ejb.jar}" excludes="${signserver-ejb-excludes}"/>
        </jar>
    </target>
    <target name="-init-filter-jars-db" unless="noDB">
        <property name="cesecore-ejb-excludes" value="${cesecore.ejb.withdb.excludes}"/>
        <property name="signserver-ejb-excludes" value="${signserver.ejb.withdb.excludes}"/>
    </target>
    <target name="-init-filter-jars-nodb" if="noDB">
        <property name="cesecore-ejb-excludes" value="${cesecore.ejb.nodb.excludes}"/>
        <property name="signserver-ejb-excludes" value="${signserver.ejb.nodb.excludes}"/>
    </target>
    
    
<!--    <target name="-postprocess-module">
        <echo>Post processing module: ${_acfa.calledname}</echo>
        <antcallforall names="${_acfa.postprocess.files}" target="-postprocess-file" prePrefix="_acfa." newPropertyPrefix="_acfa2"/>
    </target>-->
    
<!--    <target name="-postprocess-file">
        <echo level="verbose">Post processing file "${_acfa2.src}" with includes "${_acfa2.includes}"</echo>
        <echo>module.type: ${_acfa.module.type}</echo>
        <property name="_acfa2.dest" value=""/>
        <postprocess-jar src="lib/${_acfa2.src}" destfile="${signserver.ear.dir}/${_acfa2.dest}${_acfa2.src}" tempdir="${tmp}/${_acfa.calledname}-${_acfa2.src}.dir" replaceincludes="${_acfa2.includes}"/>
    </target>-->
        
    <target name="-init-configure">
        <echo>
Configuring EAR...    
        </echo>
        
    	<condition property="noDB">
    		<equals arg1="${database.name}" arg2="nodb"/>
    	</condition>

        <property name="signserver.ear.dir" location="${tmp}/signserver.ear"/>
        <property name="database.name" value="${database.name}"/>
    	<delete dir="${signserver.ear.dir}"/>
        <mkdir dir="${signserver.ear.dir}"/>
        
        <mkdir dir="${signserver.ear.dir}/META-INF"/>
        <copy todir="${signserver.ear.dir}">
            <fileset dir="${res}/deploy/ear" includes="*/*.*"/>
        </copy>
    </target>
	
    <target name="-set-ejbjarheader-nodb" if="noDB">
    	<!-- generate starting and closing comment marks short-circuiting the
    		enterprise-beans tag in the generated ejb-jar.xml file -->
    	<property name="ejbjarheader">
			<![CDATA[
    			<!--
    		]]>
    	</property>
    	<property name="ejbjarfooter">
    		<![CDATA[
    			-->
    		]]>
    	</property>
    	<property name="persistenceheader">
    		<![CDATA[
    			<!--
    		]]>
    	</property>
    	<property name="persistencefooter">
    		<![CDATA[
    			-->
    		]]>
		</property>
    </target>

    <target name="-preprocess-persistence">
        <echo message="Database type:      ${database.name}"/>
        <echo message="DataSource mapping: ${datasource.jndi-name-prefix}${datasource.jndi-name}"/>
        <condition property="hibernate.dialect" value="org.hibernate.dialect.DB2Dialect">
            <equals arg1="${database.name}" arg2="db2"/>
        </condition>
        <condition property="hibernate.dialect" value="org.hibernate.dialect.DerbyDialect">
            <equals arg1="${database.name}" arg2="derby"/>
        </condition>
        <condition property="hibernate.dialect" value="org.hibernate.dialect.HSQLDialect">
            <equals arg1="${database.name}" arg2="hsqldb"/>
        </condition>
        <condition property="hibernate.dialect" value="org.hibernate.dialect.InformixDialect">
            <equals arg1="${database.name}" arg2="informix"/>
        </condition>
        <condition property="hibernate.dialect" value="org.hibernate.dialect.IngresDialect">
            <equals arg1="${database.name}" arg2="ingres"/>
        </condition>
        <condition property="hibernate.dialect" value="org.hibernate.dialect.SQLServerDialect">
            <equals arg1="${database.name}" arg2="mssql"/>
        </condition>
        <condition property="hibernate.dialect" value="org.hibernate.dialect.MySQLDialect">
                <equals arg1="${database.name}" arg2="mysql"/>
        </condition>
        <condition property="hibernate.dialect" value="org.hibernate.dialect.Oracle10gDialect">
            <equals arg1="${database.name}" arg2="oracle"/>
        </condition>
        <condition property="hibernate.dialect" value="org.hibernate.dialect.PostgreSQLDialect">
            <equals arg1="${database.name}" arg2="postgres"/>
        </condition>
        <condition property="hibernate.dialect" value="org.hibernate.dialect.SybaseDialect">
            <equals arg1="${database.name}" arg2="sybase"/>
        </condition>
    	<condition property="hibernate.dialect" value="dummy">
    		<equals arg1="${database.name}" arg2="nodb"/>
    	</condition>
        <fail unless="hibernate.dialect" message="Unsupported database type '${database.name}'."/>
    </target>
    
    <!-- =================================================================== -->
    <!-- Deploy target                                                       -->
    <!-- =================================================================== -->
    <target name="deploy" depends="check-appserver,compose-ear" description="Deploys SignServer">
        <antcall target="j2ee:deploy"/>
        <antcall target="showtime" />
    </target>


    <!-- Target for creating a binary distribution for arbitrary jars and their dependencies. -->
    <target name="dist">
        <fail unless="dist.jars" message="Usage: bin/ant dist -Ddist.jars=JARNAME -Ddist.includes=OTHERFILES"/>
        
        <loadresource property="classpath">
            <zipentry zipfile="lib/${dist.jars}" name="META-INF/MANIFEST.MF"/>
            <filterchain>
                <tokenfilter>
                    <filetokenizer/>
                    <replaceregex pattern="\r?\n (.+)$" replace="\1" flags="m"/>
                </tokenfilter>
                <tokenfilter>
                    <filetokenizer/>
                    <replaceregex pattern="\r?\n (.+)$" replace="\1" flags="m"/>
                </tokenfilter>
                <tokenfilter>
                    <filetokenizer/>
                    <replaceregex pattern="\r?\n (.+)$" replace="\1" flags="m"/>
                </tokenfilter>
                <tokenfilter>
                    <filetokenizer/>
                    <replaceregex pattern="\r?\n (.+)$" replace="\1" flags="m"/>
                </tokenfilter>
                <tokenfilter>
                    <filetokenizer/>
                    <replaceregex pattern="\r?\n (.+)$" replace="\1" flags="m"/>
                </tokenfilter>
                <tokenfilter>
                    <filetokenizer/>
                    <replaceregex pattern="\r?\n (.+)$" replace="\1" flags="m"/>
                </tokenfilter>
                <tokenfilter>
                    <filetokenizer/>
                    <replaceregex pattern="\r?\n (.+)$" replace="\1" flags="m"/>
                </tokenfilter>
                <tokenfilter>
                    <filetokenizer/>
                    <replaceregex pattern="\r?\n (.+)$" replace="\1" flags="m"/>
                </tokenfilter>
                <tokenfilter>
                    <filetokenizer/>
                    <replaceregex pattern="\r?\n (.+)$" replace="\1" flags="m"/>
                </tokenfilter>
                <tokenfilter>
                    <filetokenizer/>
                    <replaceregex pattern="\r?\n (.+)$" replace="\1" flags="m"/>
                </tokenfilter>
                <tokenfilter>
                    <filetokenizer/>
                    <replaceregex pattern="\r?\n (.+)$" replace="\1" flags="m"/>
                </tokenfilter>
                <tokenfilter>
                    <filetokenizer/>
                    <replaceregex pattern="\r?\n (.+)$" replace="\1" flags="m"/>
                </tokenfilter>
                <tokenfilter>
                    <filetokenizer/>
                    <replaceregex pattern="\r?\n (.+)$" replace="\1" flags="m"/>
                </tokenfilter>
                <tokenfilter>
                    <filetokenizer/>
                    <replaceregex pattern="\r?\n (.+)$" replace="\1" flags="m"/>
                </tokenfilter>
                <tokenfilter>
                    <filetokenizer/>
                    <replaceregex pattern="\r?\n (.+)$" replace="\1" flags="m"/>
                </tokenfilter>
                <tokenfilter>
                    <filetokenizer/>
                    <replaceregex pattern="\r?\n (.+)$" replace="\1" flags="m"/>
                </tokenfilter>
                <tokenfilter>
                    <filetokenizer/>
                    <replaceregex pattern="\r?\n (.+)$" replace="\1" flags="m"/>
                </tokenfilter>
                <tokenfilter>
                    <containsregex pattern="^Class-Path: (.+)$" flags="i"/>
                    <replaceregex pattern="^Class-Path: (.+)$" replace="\1" flags="i"/>
                </tokenfilter>
                <tokenfilter>
                    <filetokenizer/>
                    <replaceregex pattern="(\r?\n)+" replace="" flags="m"/>
                </tokenfilter>
                <tokenfilter>
                    <filetokenizer/>
                    <replaceregex pattern="( )+" replace="," flags="g"/>
                </tokenfilter>
            </filterchain>
        </loadresource>
        <echo level="verbose">Class-path from MANIFEST-MF: ${classpath}</echo>
        
        <property name="dist.dir" location="${tmp}/dist"/>
        <echo>Copying distribution to ${dist.dir}</echo>
        <mkdir dir="${dist.dir}"/>
        
        <mkdir dir="${dist.dir}/lib"/>
        <copy todir="${dist.dir}">
            <fileset dir="." includes="_NON_EXISTING,${dist.includes}"/>
        </copy>
        <chmod perm="a+x">
            <fileset dir="${dist.dir}/bin/" includes="*"/>
        </chmod>
        <copy todir="${dist.dir}/lib">
            <fileset dir="lib" includes="_NON_EXISTING,${dist.jars}"/>
            <fileset dir="lib" includes="_NON_EXISTING,${classpath}"/>
        </copy>
        
    </target>
    
    <target name="dist:zip" description="Create a zip file from the dist output">
        <fail unless="dist.zipdest" message="Usage: bin/ant dist:zip -Ddist.zipdest=tmp/admingui-bin.zip -Ddist.zipprefix=admingui"/>
        <fail unless="dist.zipprefix" message="Usage: bin/ant dist:zip -Ddist.zipdest=tmp/admingui-bin.zip -Ddist.zipprefix=admingui"/>
        <property name="dist.zipsrc" location="${tmp}/dist"/>
        
        <zip destfile="${dist.zipdest}">
            <zipfileset dir="${dist.zipsrc}" prefix="${dist.zipprefix}" filemode="600" dirmode="700" excludes="bin/*"/>
            <zipfileset dir="${dist.zipsrc}" prefix="${dist.zipprefix}" filemode="700" dirmode="700" includes="bin/*"/>
        </zip>
        <echo>Wrote ${dist.zipdest}</echo>
    </target>

    <target name="dist:admingui">
        <available file="${basedir}/lib/SignServer-AdminGUI.jar" property="admingui.jar" value="SignServer-AdminGUI.jar"/>
        <available file="${basedir}/lib/SignServer-AdminGUI-${app.version.number}.jar" property="admingui.jar" value="SignServer-AdminGUI-${app.version.number}.jar"/>
        <fail unless="admingui.jar" message="Must build SignServer-AdmingGUI first"/>
        <antcall target="dist">
            <param name="dist.jars" value="${admingui.jar}"/>
            <param name="dist.includes" value="
                bin/signserver-gui,
                bin/admingui.cmd,
                conf/admingui.properties,
                conf/admingui_default.properties,
                conf/log4j.properties,
                conf/jboss/*,
                conf/jboss7/*,
                conf/glassfish/*,
                res/admingui-splash.png,
                "/>
        </antcall>
    </target>
    <target name="dist:admingui-zip" description="Create a binary ZIP distribution of the Admin GUI">
        <delete dir="${tmp}/dist"/> <!-- Only include the admingui in the zip file -->
        <antcall target="dist:admingui"/>
        <antcall target="dist:zip">
            <param name="dist.zipdest" value="${lib}/signserver-admingui-bin.zip"/>
            <param name="dist.zipprefix" value="signserver"/>
        </antcall>
    </target>

    <target name="-create-admingui-dist" if="web.admingui.dist.conditionenabled">
        <delete dir="${tmp}/dist"/> <!-- Only include the admingui in the zip file -->
        <antcall target="dist:admingui"/>
        <antcall target="dist:zip">
            <param name="dist.zipdest" value="${web.admingui.dist.file}"/>
            <param name="dist.zipprefix" value="signserver"/>
        </antcall>
    </target>
    
    <target name="systemtest:jars" description="Run system tests from all systest jars (or specify which to include/exclude)" depends="-set-systemtest-classpath">
        <property name="systemtest.dir" value="${tmp}/systemtest"/>
        <delete dir="${systemtest.dir}"/>
        <mkdir dir="${systemtest.dir}"/>
        <property name="systemtest.jars.include" value="lib/*-tests.jar"/>
        <property name="systemtest.includes" value="**/*Test.class"/>
        <property name="systemtest.excludes" value="-NO-"/>
        <echo>Running systemtests for JARs with: 
-Dsystemtest.jars.include=${systemtest.jars.include}
-Dsystemtest.includes=${systemtest.includes}
-Dsystemtest.excludes=${systemtest.excludes}
        </echo>
        <unzip dest="${systemtest.dir}">
            <fileset dir="${basedir}">
                <include name="${systemtest.jars.include}" />
            </fileset>    
        </unzip>
        
        <echo level="verbose">systemtest.path: ${systemtest.path}</echo>
        
        <property name="junit.output.dir" location="${tmp}/test/results"/>
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="on" haltonfailure="off">
            <formatter type="xml"/>
            <batchtest fork="yes" todir="${junit.output.dir}">
                <resources> 
                    <fileset dir="${systemtest.dir}" includes="${systemtest.includes}" excludes="${systemtest.excludes}"/>
                </resources> 
            </batchtest>
            <classpath>
                <path path="${systemtest.path}"/>
                <fileset dir="${basedir}" includes="${systemtest.jars.include}"/>
                <pathelement path="${basedir}/lib/ext/ext/junit-4.11.jar"/>
                <pathelement path="${basedir}/lib/ext/ext/hamcrest-core-1.3.jar"/>
            </classpath>
        </junit>
    </target>
    
    <target name="systemtest:jar" description="Run system tests from arbitrary test-jar">
        <echo>${systemtest.path}</echo>
        <fail unless="systemtest.jar" message="Usage: bin/ant systemtest:jar -Dsystemtest.jar=SignServer-Test-AdminWS-tests.jar"/>
        <echo>Running systemtests for JAR ${systemtest.jar}</echo>
        <property name="junit.output.dir" location="${tmp}/test/results"/>
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="on" haltonfailure="off">
            <formatter type="xml"/>
            <batchtest fork="yes" todir="${junit.output.dir}">
                <resources> 
                   <zipfileset src="${basedir}/lib/${systemtest.jar}" includes="**/*Test.class" excludes="${systemtest.excludes}"/>
                </resources> 
            </batchtest>
            <classpath>
                <path path="${systemtest.path}"/>
                <pathelement path="${basedir}/lib/${systemtest.jar}"/>
                <pathelement path="${basedir}/lib/ext/ext/junit-4.11.jar"/>
                <pathelement path="${basedir}/lib/ext/ext/hamcrest-core-1.3.jar"/>
            </classpath>
        </junit>
    </target>
    
    <target name="systemtest:report" unless="no.report"
        description="Create HTML test report from previously run systemtests">
        <mkdir dir="${tmp}/test/reports"/>
        <junitreport todir="${tmp}/test/reports">
            <fileset dir="." includes="**/TEST-*.xml"/>
            <report format="frames" todir="${tmp}/test/reports/html" />
        </junitreport>
        <property name="reportfile" location="${tmp}/test/reports/html/index.html"/>
        <echo message="Test report available at: file://${reportfile}"/>
    </target>

    <target name="systemtest:adminws" description="Run system tests for AdminWS">
        <antcall target="systemtest:jar">
            <param name="systemtest.jar" value="SignServer-Test-AdminWS-tests.jar"/>
        </antcall>
    </target>
    
    <target name="systemtest:signserverws" description="Run system tests for SignServerWS">
        <antcall target="systemtest:jar">
            <param name="systemtest.jar" value="SignServer-Test-SignServerWS-tests.jar"/>
        </antcall>
    </target>

    <target name="systemtest:validationws" description="Run system tests for ValidationWS">
        <antcall target="systemtest:jar">
            <param name="systemtest.jar" value="SignServer-Test-ValidationWS-tests.jar"/>
        </antcall>
    </target>
    
    <target name="-set-systemtest-classpath" depends="check-appserver">
        <!-- JNDI configuration for appserver -->
        <condition property="appserver.jndi.conf" value="${basedir}/conf/jboss/">
            <equals arg1="${appserver.subtype}" arg2="jboss5" />
        </condition>
        <condition property="appserver.jndi.conf" value="${basedir}/conf/jboss7/">
            <or>
                <equals arg1="${appserver.subtype}" arg2="jboss7" />
                <equals arg1="${appserver.subtype}" arg2="jbosseap6" />
            </or>
        </condition>
        <condition property="appserver.jndi.conf" value="${basedir}/conf/glassfish/">
            <equals arg1="${appserver.type}" arg2="glassfish" />
        </condition>
        
        <property name="systemtest.path" value="${appserver.jndi.conf}:${basedir}/res/cesecore/:${env.APPSRV_HOME}/client/jbossall-client.jar:conf:${env.APPSRV_HOME}/bin/client/jboss-client.jar:${env.APPSRV_HOME}/lib/appserv-rt.jar:${env.APPSRV_HOME}/lib/gf-client.jar:${basedir}/lib/ext/jdbc/jdbc.jar"/>
    </target>
    
    <target name="systemtest:p11" description="Run system tests for P11" depends="-set-systemtest-classpath">
        <antcall target="systemtest:jar">
            <param name="systemtest.jar" value="SignServer-Test-P11-tests.jar"/>
            <param name="systemtest.path" value="${systemtest.path}"/>
        </antcall>
    </target>
    
    <target name="systemtest:system" description="Run system tests for system" depends="-set-systemtest-classpath">
        <echo>${systemtest.path}</echo>
        <antcall target="systemtest:jar">
            <param name="systemtest.jar" value="SignServer-Test-System-tests.jar"/>
            <param name="systemtest.path" value="${systemtest.path}"/>
        </antcall>
    </target>
    
    <target name="systemtest:databasecli" description="Run system tests for DatabaseCLI" depends="-set-systemtest-classpath">
            <antcall target="systemtest:jar">
            <param name="systemtest.jar" value="SignServer-Test-DatabaseCLI-tests.jar"/>
            <param name="systemtest.path" value="${basedir}/conf:${basedir}/res/cesecore:${systemtest.path}:${basedir}/lib/ext/jdbc/jdbc.jar"/>
        </antcall>
    </target>
    
    <target name="systemtest:renewal" description="Run system tests for Renewal" depends="-set-systemtest-classpath">
        <antcall target="systemtest:jar">
            <param name="systemtest.jar" value="SignServer-Test-Renewal-tests.jar"/>
            <param name="systemtest.path" value="${systemtest.path}"/>
        </antcall>
    </target>
   
</project>
