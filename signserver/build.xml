
<project name="signserver" default="build" basedir=".">

	<property name="app.name" value="signserver" />
    <property name="app.name.cap" value="Sign Server" />
	<property name="app.version" value="${app.name.cap} 3.0Beta1" />
	
    <property environment="env" />

    <!-- Give user a chance to override without editing this file
       (and without typing -D each time it compiles it).
       First it checks your home directory for signserver_build.properties
       net it checks the properties file here. -->
    <property file="${user.home}/${app.name}_build.properties" />
    <property file="${app.name}_build.properties" />
	
	<property name="ant.home" value="${env.ANT_HOME}"/>
	
    <import file="bin/jboss.xml" />


    <!-- set global properties for this build -->
	<property name="tmp" value="./tmp" />
    <property name="bin" value="./${tmp}/bin" />
    <property name="build" value="${bin}/classes" />
    <property name="lib" value="lib" />
	<property name="preprocessed" value="${tmp}/preprocessed"/>

    <property name="src" value="${preprocessed}" />
    <property name="src.java" value="${src}/java" />
    <property name="src.appserver" value="${src}/appserver/jboss" />
	<property name="src.external" location="${tmp}/external"/>
    <property name="resources.dir"  location="./src/resources"/>	
    
    <property name="server.java.target" value="1.5" />
    <property name="client.java.target" value="1.5" />
<!-- the ejbca.target could have any valid value. no PrimeCard code dependent of ejbca is used -->
    <property name="ejbca.target" value="3.2"/>

    <property name="test.dir" value="${bin}/junit" />
    <property name="test.src.dir" location="${src}/test" />
    <property name="server.dist.dir" location="dist-server" />
    <property name="client.dist.dir" location="dist-client" />
    <property name="apidoc" value="./doc/api" />  
	
	<property name="custom.commandfactory" value="org.signserver.cli.DefaultSignServerCommandFactory"/>

    <property name="jar.extclasspath" value="lib/${server.java.target}/bcmail-jdk.jar lib/${server.java.target}/bcprov-jdk.jar lib/${server.java.target}/bctsp-jdk.jar lib/log4j.jar lib/ejbca-util.jar lib/caToken.jar lib/commons-lang-2.0.jar lib/ldap.jar lib/itext.jar"/>

	<import file="./signserver.xmli" />
	<import file="./mailsigner.xmli" />
	<import file="${custom.build.xml}" optional="true"/>
	
	
	<property name="build.mode" value="SIGNSERVER" />
	<condition property="buildMailSigner">		
		  <equals arg1="${build.mode}" arg2="MAILSIGNER" casesensitive="false" trim="true"/>		
	</condition>

    <!-- =================================================================== -->
    <!-- Build ALL                                                           -->
    <!-- =================================================================== -->
	<target name="build" depends="signserver, mailsigner" />
	


    <!-- =================================================================== -->
    <!-- Create the time stamp and build directory -->
    <!-- =================================================================== -->
    <target name="init" depends="j2ee:check">
    	<antcall target="signserver.init"/>
    	<antcall target="mailsigner.init"/>

        <!-- Create the time stamp -->
        <tstamp/>
        <!-- Create the build directory structure used by compile -->
        <mkdir dir="${build}"/>
        <mkdir dir="${server.dist.dir}/${lib}"/>
        <mkdir dir="${client.dist.dir}/${lib}"/>
    </target>
	
	<target name="ant:configure" description="Copies required libraries to ant directory">
        <fail message="Please set the environment variable 'ANT_HOME' before running this task." unless="ant.home"/>
        <available file="${ant.home}/lib" property="ant.home.valid"/>
        <fail message="'ant.home' (${ant.home}) does not seem to be a valid ant home directory" unless="ant.home.valid"/>
		<copy todir="${ant.home}/lib">
		   <fileset dir="lib/ext">
			 <include name="junit-3.8.1.jar"/>
			 <include name="jsch-0.1.32.jar"/>
		   </fileset>
		</copy>
	</target>

    <!-- =================================================================== -->
    <!-- Main Clean                                                            -->
    <!-- =================================================================== -->
    <target name="clean" depends="signserver:clean, mailsigner:clean">
        <!-- Delete the ${build} and ${server.dist.dir} directory trees -->
        <delete dir="${build}" />
        <delete dir="${server.dist.dir}" />
        <delete dir="${client.dist.dir}" />
        <delete dir="${apidoc}" />
        <delete dir="${tmp}"/>	
    </target>

 
 
	<!--
	  Preprocesses Sign Server by replacing tags with correct version and application texts.
	-->
	<target name="preprocess" depends="preprocess-extjava, preprocess-extweb" >
        <copy todir="${preprocessed}">
            <fileset dir="src">
              <include name="**"/>
              <exclude name="**/*.java"/>
              <exclude name="**/*.html"/>
              <exclude name="**/*.htm"/>            	
              <exclude name="**/*.xml"/>
              <exclude name="**/*.jsp"/>
              <exclude name="**/*.jspf"/>
              <exclude name="**/*.properties"/>
            </fileset>	      
	    </copy>
        <copy todir="${preprocessed}">
            <fileset dir="src">
                <include name="**/*.java"/>
                <include name="**/*.html"/>
                <include name="**/*.htm"/>
                <include name="**/*.xml"/>
                <include name="**/*.jsp"/>
                <include name="**/*.jspf"/>
                <include name="**/*.properties"/>
            </fileset>	   

			<filterchain>
			<tokenfilter>			    
		        <replacestring from="@signserver@" to="${app.name}"/>
		    	<replacestring from="@SIGNSERVER@" to="${app.name.cap}"/>
				<replacestring from="@RMIREGISTRYPORT@" to="${rmi.registry.port}"/>
				<replacestring from="@RMISERVERPORT@" to="${rmi.server.port}"/>
				<replacestring from="@MAILSIGNERPORT@" to="${mailsigner.smtpport}"/>
				<replacestring from="@BUILDMODE@" to="${build.mode}"/>
				<replacestring from="@datasource.jndi-name-prefix@" to="${datasource.jndi-name-prefix}"/>
				<replacestring from="@datasource.jndi-name@" to="${datasource.jndi-name}"/>
				<replacestring from="@healthcheck.authorizedips@" to="${healthcheck.authorizedips}"/>
				<replacestring from="@healthcheck.minimumfreememory@" to="${healthcheck.minimumfreememory}"/>
				<replacestring from="@healthcheck.checkdbstring@" to="${healthcheck.checkdbstring}"/>
				<replacestring from="@SignServerCommandFactory@" to="${custom.commandfactory}"/>
			</tokenfilter>
			</filterchain>
	    </copy>
		<replace file="${preprocessed}/java/org/signserver/common/GlobalConfiguration.java" token="@signserver.version@" value="${app.version}"/>	
		<!-- Make a copy of the signserver_cli.properties in bin dir -->
		<copy file="signserver_cli.properties" todir="bin" />
	</target>
	
	<target name="preprocess-extjava"  if="custom.src.java">
	    <mkdir dir="${preprocessed}/java"/>
        <copy todir="${preprocessed}/java">
            <fileset dir="${custom.src.java}">
              <include name="**"/>
            </fileset>	      
	    </copy>
	</target>
	
    <target name="preprocess-extweb"  if="custom.src.web">
       <mkdir dir="${preprocessed}/web/pub"/>       	
       <copy todir="${preprocessed}/web/pub">
          <fileset dir="${custom.src.web}">
             <include name="**"/>
           </fileset>	      
       </copy>
     </target>
 
    
    <!-- =================================================================== -->
    <!-- Build Javadoc part                                                  -->
    <!-- =================================================================== -->
    <target name="javadoc" depends="">
        <mkdir dir="${apidoc}" />
        <javadoc packagenames="se.primeKey.*" maxmemory="256m" sourcepath="${src.java}" destdir="${apidoc}" extdirs="${lib}" classpath="server.compile.classpath" author="true" version="true" use="true" windowtitle="${app.name.cap} API" bottom="Copyright &#169; 2005 PrimeKey Solutions AB.">
        </javadoc>
    </target>
		
    <macrodef name="keytool">
       <attribute name="arg"/>
         <sequential>
         <exec executable="keytool">
            <arg line="@{arg}"/>
         </exec>
         </sequential>
    </macrodef>

    <!--
        this macro is a specialized copy for deployment descriptors (dd).
        In the wonderful world of J2EE nothing it is always painful
        Basically it is copying the appropriate DD for each J2EE server
        and selected database:
        @database.name
    -->
    <macrodef name="ejb-merge-copy">
        <attribute name="database" />
        <attribute name="overwrite" default="false" />
        <sequential>
            <!-- Remove old possible files -->
        	<delete dir="${ejbdd.src}/merge/se"/>
            <!-- jboss configuration -->
            <copy todir="${ejbdd.src}/merge" overwrite="@{overwrite}" failonerror="false">
                <fileset dir="${ejbdd.src}/merge/${database.name}" includes="**/*.xml" />
            </copy>
        </sequential>
    </macrodef>

	<!--
        this macro is a specialized copy for deployment descriptors (dd).
        In the wonderful world of J2EE nothing it is always painful
    -->
    <macrodef name="ejb-dd-copy">
        <attribute name="todir" />
        <attribute name="dir" />
        <attribute name="overwrite" default="false" />
        <sequential>
        </sequential>
    </macrodef>

    <target name="test:compile"  depends="test:signserver:compile, test:mailsigner:compile" description="compile JUnit testcases"/>
 	
    <target name="test:run" description="compile JUnit testcases">
        <antcall target="test:signserver:run"/>
    	<antcall target="test:mailsigner:run"/>
    </target>
		
	<property name="velocity.dir" location="lib/ext/velocity"/>
    <!-- Initialization properties -->
    <property name="project.name" value="signserver"/>
    <property name="docs.src"     location="doc/xdocs"/>
    <property name="docs.dest"    location="tmp/htdocs"/>
    <property name="project.file" value="stylesheets/project.xml" />
    <property name="templ.path"   location="${docs.src}/stylesheets" />
    <property name="velocity.props"   location="${docs.src}/velocity.properties" />
    <property name="include.xml"  value="**/*.xml" />

    <target name="prepare">
        <path id="anakia.classpath">
            <fileset dir="${velocity.dir}">
                <include name="*.jar"/>
            </fileset>
        </path>
        <available classname="org.apache.velocity.anakia.AnakiaTask"
                   property="AnakiaTask.present">
            <classpath refid="anakia.classpath"/>
        </available>
    </target>

    <target depends="prepare" name="prepare-error" unless="AnakiaTask.present">
        <echo>
            AnakiaTask is not present! Please check to make sure that
            velocity.jar is in your classpath.
        </echo>
        <mkdir dir="${docs.dest}"/>
    </target>

    <target name="doc" if="AnakiaTask.present" depends="prepare-error" description="Build EJBCA web site and docs">
        <taskdef name="anakia" classname="org.apache.velocity.anakia.AnakiaTask">
            <classpath refid="anakia.classpath"/>
        </taskdef>

        <anakia basedir="${docs.src}" destdir="${docs.dest}"
             extension=".html" style="./site.vsl"
             projectFile="${project.file}"
             excludes="**/stylesheets/**"
             includes="${include.xml}"
             lastModifiedCheck="true"
             templatePath="${templ.path}"
             velocityPropertiesFile="${velocity.props}">
        </anakia>
        
        <copy todir="${docs.dest}">
        	<fileset dir="${docs.src}" includes="**/*.css,**/*.png,**/*.jpg,**/*.gif"/>        	
        	<fileset dir="${docs.src}" includes="docs/**/*"/>
        </copy>
    </target>
    
    <target name="site:test:publish" depends="doc" description="Publish the website to the sandbox subdirectory.">
    	<property name="publish.dir" value="signserver/htdocs/sandbox"/>
    	<tar destfile="htdocs.tgz" compression="gzip">
    		<tarfileset dir="${docs.dest}" mode="664" dirmode="775" username="${username}" group="ejbca"/>
    	</tar>
    	<scp trust="true" file="htdocs.tgz" todir="${username}:${password}@shell.sourceforge.net:"/>
    	<sshexec trust="true" host="shell.sourceforge.net"
				username="${username}" password="${password}"
				command="mkdir ${publish.dir} ; tar -xzpf htdocs.tgz -C ${publish.dir};"/>
		<!-- I'm setting the permissions this way as there seems to be a problem with dirmode -->
		<echo message="Setting directory permissions"/>
    	<sshexec trust="true" host="shell.sourceforge.net"
				username="${username}" password="${password}"
				command="find ${publish.dir} -type d -exec chmod 775 {} \;"/> 
		<echo message="Setting file permissions"/>
    	<sshexec trust="true" host="shell.sourceforge.net"
				username="${username}" password="${password}"
				command="find ${publish.dir} -type f -exec chmod 664 {} \;"/>
		
    </target>
    <target name="site:publish" depends="doc" description="Publish the website to the sandbox subdirectory.">
    	<property name="publish.dir" value="signserver/htdocs"/>
    	<tar destfile="htdocs.tgz" compression="gzip">
    		<tarfileset dir="${docs.dest}" mode="664" dirmode="775" username="${username}" group="ejbca"/>
    	</tar>
    	<scp trust="true" file="htdocs.tgz" todir="${username}:${password}@shell.sourceforge.net:"/>
    	<sshexec trust="true" host="shell.sourceforge.net"
				username="${username}" password="${password}"
				command="mkdir ${publish.dir} ; tar -xzpf htdocs.tgz -C ${publish.dir};"/>
		<!-- I'm setting the permissions this way as there seems to be a problem with dirmode -->
		<echo message="Setting directory permissions"/>
    	<sshexec trust="true" host="shell.sourceforge.net"
				username="${username}" password="${password}"
				command="find ${publish.dir} -type d -exec chmod 775 {} \;"/> 
		<echo message="Setting file permissions"/>
    	<sshexec trust="true" host="shell.sourceforge.net"
				username="${username}" password="${password}"
				command="find ${publish.dir} -type f -exec chmod 664 {} \;"/>
		
    </target>
	
    	<target name="ziprelease" description="Make a zip files for SignServer release" >
    		<input message="Version tag for zipfile (ex 3_0):" addproperty="signserver.zipversion" />
    		<antcall target="ziprelease-lgpl3"/>
    		<antcall target="ziprelease-lgpl21"/>
    	</target>
    		
    	
    		
	<target name="ziprelease-lgpl3" >
		<antcall  target="clean"/>
		<copy file="doc/lgpl-3.0.txt" tofile="LICENSE" />
		<zip destfile="../signserver_lgpl_v3_version_${signserver.zipversion}.zip">
		    <zipfileset dir="." prefix="signserver_lgpl_v3_version_${signserver.zipversion}" filemode="600" dirmode="700"> 
		    	<include name="**/**" />
		    	<exclude name="**/CVS/**" />
		    	<exclude name="doc/lgpl-**" />
		    	<exclude name="tmp/**" />
		    	<exclude name="dist/**" />
		    	<exclude name="dist-client/**" />
		    	<exclude name="dist-server/**" />
		    	<exclude name="out/**" />
		    	<exclude name="eclipseBuild/**" />
		    	<exclude name="**/*.class" />
		    	<exclude name=".classpath" />
		    	<exclude name=".project" />
		    	<exclude name=".eclipse/**" />
		    	<exclude name="**/.cvsignore" />
		    	<exclude name="**/*.sh" />
		    </zipfileset>
		    <zipfileset dir="." prefix="signserver_lgpl_v3_version_${signserver.zipversion}" filemode="700" dirmode="700"> 
		    	<include name="**/*.sh" />
		    </zipfileset>
		</zip>
		<delete file="LICENSE"/>
	</target>
	
	<target name="ziprelease-lgpl21" >
		<antcall  target="clean"/>  
		<copy file="doc/lgpl-2.1.txt" tofile="LICENSE" />
		<zip destfile="../signserver_lgpl_v21_version_${signserver.zipversion}.zip">
		    <zipfileset dir="." prefix="signserver_lgpl_v21_version_${signserver.zipversion}" filemode="600" dirmode="700"> 
		    	<include name="**/**" />
		    	<exclude name="doc/lgpl-**" />
		    	<exclude name="**/CVS/**" />
		    	<exclude name="tmp/**" />
		    	<exclude name="dist/**" />
		    	<exclude name="dist-client/**" />
		    	<exclude name="dist-server/**" />
		    	<exclude name="out/**" />
		    	<exclude name="eclipseBuild/**" />
		    	<exclude name="**/*.class" />
		    	<exclude name=".classpath" />
		    	<exclude name=".project" />
		    	<exclude name=".eclipse/**" />
		    	<exclude name="**/.cvsignore" />
		    	<exclude name="**/*.sh" />
		    </zipfileset>
		    <zipfileset dir="." prefix="signserver_lgpl_v21_version_${signserver.zipversion}" filemode="700" dirmode="700"> 
		    	<include name="**/*.sh" />
		    </zipfileset>
		</zip>
		<delete file="LICENSE"/>
	</target>
	

</project>