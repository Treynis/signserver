# File containing internal localization messages used by 
# log comments, approval notifications and some exceptions.
#
# The keys should be sections into which module the message
# originates from, example raadmin.msg1 or keyrecovery.testmessage
#
# ENGLISH VERSION

# This are resources only used with the test script
raadmin.testmsg       = Test ENG                        
raadmin.testparams    = Test {0} {1} {2} {3} {4} message {0} 


services.serviceadded             = Service {0} added.
services.erroraddingservice       = Error adding service {0}
services.notauthorizedtoadd       = Error, not authorized to add service : {0}
services.serviceedited            = Service {0} edited.
services.erroreditingservice      = Error service {0}.
services.notauthorizedto          = Error, not authorized to service : {0}
services.servicecloned            = New service {0}, used service {1} as template.
services.errorcloningservice      = Error adding service {0} using service {1} as template.
services.serviceremoved           = Service {0} removed.
services.errorremovingservice     = Error removing user data source {0}.
services.servicerenamed           = Service {0} renamed to {1}.
services.errorrenamingservice     = Error renaming Service  {0} to {1}.
services.serviceexecuted          = Service {0} executed successfully.
services.servicenotfound          = Service with id {0} not found.
services.serviceexecutionfailed   = Service {0} execution failed.
services.servicerunonothernode    = Service {0} have been executed on another node in the cluster, waiting.
services.erroractionclasspath = Error Monitoring Service {0} actionClassPath is misconfigured.
services.errorintervalclasspath = Error Monitoring Service {0} intervalClassPath is misconfigured, service will not execute.
services.errorworkerconfig = Worker {0} is misconfigured for service {1}, check the classpath.
services.errorworker.errornoemail = Sending email notification to user {0} failed, no email address configured.
services.errorworker.errornoca = CA with id {0} and name '{1}' does not exist. Has it been removed?
services.errorexpireworker.errorconfig  = Error: Expire Notification Worker {0} is misconfigured, check {1} value.
services.interval.errorconfig = Error\: Periodical service {0} is misconfigured, check {1} value. 
services.mailaction.errorreceiveraddress = Error: No receiver address could be found.
services.mailaction.errorsenderaddress = Error: A sender address must be configured.
services.mailaction.sent = Email Notification was sent to {0} successfully.
services.mailaction.errorsend = Error when sending mail action notification to {0}.
services.mailaction.erroractioninfo = Error: Only MailActionInfo is supported.
services.upgrade = Upgrading serviceconfiguration with version {0}.
services.alreadyrunninginvm = Service {0} is already running in this VM! Not starting work.
services.servicefailedrescheduled = Service failed and was rescheduled to run in {0} milliseconds.

# Notification resources

notification.newrequest.subject      = New EJBCA Approval Request (${approvalRequest.ID}) to ${approvalRequest.TYPE} have been made by ${requestAdmin.CN} ${requestAdmin.O}.

notification.newrequest.msg          = ${NL}${NL}An approval request to ${approvalRequest.TYPE} have been created by ${requestAdmin.CN} ${requestAdmin.O} at ${approvalRequest.DATE}${NL}${NL}To review and approve the request click on the link ${approvalRequest.APROVEURL} for more details. ${NL}${NL}${approvalReqiest.APPROVALSLEFT} more need to approve the action in order for it to be executed.

notification.requestconcured.subject = The EJBCA Approval Request (${approvalRequest.ID}) to ${approvalRequest.TYPE} have been concured by ${approvalAdmin.CN} ${approvalAdmin.O}.

notification.requestconcured.msg     = ${NL}${NL}The approval request to ${approvalRequest.TYPE} by ${requestAdmin.CN} ${requestAdmin.O} at ${approvalRequest.DATE} have been concured by ${approvalAdmin.CN} ${approvalAdmin.O}. ${NL}${NL}The approving administrator's comment on the action is\: ${approvalRequest.APPROVALCOMMENT}${NL}${NL}But there is still a need for ${approvalReqiest.APPROVALSLEFT} authorized administrators to agree upon the action. To review and approve the request click on the link ${approvalRequest.APROVEURL} for more details. 

notification.requestapproved.subject = The EJBCA Approval Request (${approvalRequest.ID}) to ${approvalRequest.TYPE} have been APPROVED by ${approvalAdmin.CN} ${approvalAdmin.O}.

notification.requestapproved.msg     = ${NL}${NL}Depending on the type of request the requesting administrator can now access the information, or the action have been executed ${NL}${NL}The approving administrator's comment on the action is: ${approvalRequest.APPROVALCOMMENT}${NL}${NL}Click on the link ${approvalRequest.APROVEURL} for more details.

notification.requestrejected.subject = The EJBCA Approval Request (${approvalRequest.ID}) to ${approvalRequest.TYPE} have been REJECTED by ${approvalAdmin.CN} ${approvalAdmin.O}.

notification.requestrejected.msg     = ${NL}${NL}The approval request (${approvalRequest.ID}) to ${approvalRequest.TYPE} have been REJECTED by ${approvalAdmin.CN} ${approvalAdmin.O} and the action will not be performed. ${NL}${NL}The rejecting administrator's comment on the action is: ${approvalRequest.APPROVALCOMMENT}${NL}${NL}Click on the link ${approvalRequest.APROVEURL} for more details.

# Sign session resource
signsession.requestcert = Received certificate request for user {0} for CA {1} with certificate profile {2}.
signsession.nouserinrequest = No username in request, request DN: {0}.
signsession.nopasswordinrequest = No password in request.
signsession.nokeyinrequest = No public key in request.
signsession.wrongauthority = CA from request ({0}) does not match users CA ({1}).
signsession.nosuchuser = User {0} not found.
signsession.finishnouser = Called finishUser for non existing user {0}.
signsession.unsupportedkeytype = Unsupported public key ({0}), only RSA and ECDSA keys are supported.
signsession.illegalkeylength = Illegal key length: {0}.
signsession.certificateissued = Certificate issued to user {0}.
signsession.popverificationfailed = POPO verification failed.
signsession.canotactive = Signing CA {0} is not active.
signsession.caexpired = Signing CA {0} has expired.
signsession.canotyetvalid = Signing CA {0} is not yet valid.
signsession.canotfoundissuerusername = Can not find CA Id from issuerDN '{0}' or username '{1}'.
signsession.canotfoundcaid =  Invalid CA Id: {0}.
signsession.createdcrl = Created CRL with number {0} for CA {1} with DN\: {2}. 
signsession.errorcreatecrl = Error creating CRL.
signsession.nocrlcreate = No CRL is created for a {0} CA. 
signsession.usertypeinvalid = User type is USER_INVALID, cannot create certificate for this user.
signsession.errorcertprofiletype = Wrong type of Certificate Profile ({0}) for end entity. Only End Entity Certificate Profiles can be issued by signsession bean.
signsession.errorcertprofilenotauthorized = End Entity data contains a CA, {0}, which the Certificate Profile, {1}, isn't authorized to use.
signsession.errorupgradingxkmsservice = Error initializing xkms service when upgrading CA {0}.
signsession.errorupgradingcmsservice = Error initializing cms service when upgrading CA {0}.
signsession.limitingvalidity = Limiting validity of certificate because requested validity ({0}) is beyond CA validity ({1}).
signsession.errorpathverifykeyid = AuthorityKeyId of issued certificate ({0}) does not match SubjectKeyId of CA-certificate ({1}).
signsession.errorpathverifydn = Issuer DN of issued certificate ({0}) does not match Subject DN of CA-certificate ({1}).
signsession.errorbeyondmaxvalidity = notAfter from request ({0}) for user '{1}' is longer than maximum specified in certificate profile ({2}), not allowed, using notAfter from certificate profile.
signsession.errorbeforecurrentdate = notBefore from request ({0}) for user '{1}' pre-dates current time, not allowed, using current time instead.
signsession.errorinvalidstarttime = Ignoring invalid start time format ({0}).
signsession.errorinvalidcausality = Start date ({0}) is after end date ({1}). Trying to recover by swapping the dates.
signsession.errorbeyondtoolateexpiredate = Requested expire date is not before the configured 'ca.toolateexpiredate'. Certificate expire date '{0}'. ca.toolateexpiredate '{1}'.
 
cvc.info.renewallowed = Verification of outer signature in CVC request was succesful with valid certificate with fp {0}. Request allowed for user {1}.
cvc.error.outersignature = Verification of outer signature in CVC request failed for holderRef '{0}'. Message: {1}.
cvc.error.renewsamekeys = Trying to renew a certificate using the same key for holderRef '{0}'.
cvc.error.notcvcrequest = Request is not a CVCertificate request.
cvc.info.nocvcpkcs7 = PKCS7 does not exist for CV Certificates. 
cvc.info.createlinkcert = Creating a CVCA link certificate for '{0}' issued by '{1}'.

caadmin.notauthorizedtocreateca = Administrator not authorized to create CA {0}.
caadmin.notauthorizedtoeditca = Administrator not authorized to edit CA {0}.
caadmin.notauthorizedtoremoveca = Administrator is not authorized to remove CA with id {0}.
caadmin.notauthorizedtorenameca = Administrator is not authorized to rename CA with id {0}.
caadmin.notauthorizedtocertreq = Administrator is not authorized to make certificate request for CA {0}.
caadmin.notauthorizedtocertresp = Administrator is not authorized to process CA {0}.
caadmin.notauthorizedtorenew = Administrator is not authorized to renew CA {0}.
caadmin.notauthorizedtorevoke = Administrator is not authorized to revoke CA {0}.
caadmin.notauthorizedtoactivatetoken = Administrator is not authorized to activate CA token for CA {0}.
caadmin.notauthorizedtodeactivatetoken = Administrator is not authorized to deactivate CA token for CA {0}.
caadmin.wrongcaid = Illegal CA id {0}, CA can not be created.
caadmin.badcaactivationcode = Activation code for CA {0} was rejected.
caadmin.caexistsid = CA with id {0} already exists.
caadmin.caexistsname = CA with name {0} already exists.
caadmin.errorcreatetoken = Error when creating CA token.
caadmin.errorcreatetokenpin = Error when creating hard CA token. Authorization code was wrong.
caadmin.errorcreateca = Could not create CA {0}.
caadmin.errorcreatecaservice = Could not Create ExternalCAService {0}.
caadmin.erroreditca = Could not edit CA {0}.
caadmin.errorremoveca = Could not remove CA {0}. Message: {1}.
caadmin.errorrenameca = Could not rename CA {0}.
caadmin.errorrestorecakeystore = Could not restore keystore for CA {0}.
caadmin.errorgetcainfo = Error getting CA info for {0}.
caadmin.errorcertreq = Error creating certificate request for CA {0}.
caadmin.errorcertreqsign = Error signing certificate request by CA {0}.
caadmin.errorcertresp = Error receiving certificate response for CA {0}.
caadmin.errorprocess = Error processing CA {0}.
caadmin.errorrenewca = Error renewing CA {0}.
caadmin.errorrevoke = Error revoking CA {0}.
caadmin.certreqcreated = Certificate request generated successfully for CA {0}.
caadmin.certreqsigned = CA {0} Signed a certificate request.
caadmin.errorcertrespinternalca = Cannot receive certificate response for an Internal CA {0}.
caadmin.errorcertrespillegalmsg = Illegal response message of type {0}.
caadmin.errorcertrespwrongdn = Subject DN of recieved certificate ({0} does not match request ({1}).
caadmin.errorcaexists = Error when processing CA {0}. CA already exists.
caadmin.erroractivatetoken = Error when trying to activate CA token for CA {0}.
caadmin.errordeactivatetoken = Error when trying to deactivate CA token for CA {0}.
caadmin.errornotoffline = CA {0} must have the status 'offline' in order to be activated.
caadmin.errornotonline = CA {0} must have the status 'active' in order to be deactivated.
caadmin.errorcanotfound = Error when trying to access CA with caid {0}. CA could not be found.
caadmin.errorreadingtoken = Error reading CATokenInfo for CA {0}.
caadmin.errorremovecakeystore = Error removing soft keystore for CA {0}.
caadmin.createdca = CA {0} created successfully, status\: {1}. 
caadmin.editedca = CA {0} edited. 
caadmin.removedca = CA {0} removed.
caadmin.removedcakeystore = CA {0} soft keystore removed.
caadmin.restoredcakeystore = CA {0} soft keystore restored.
caadmin.renamedca = CA {0} renamed to {1}.
caadmin.processedca = CA {0} processed successfully.
caadmin.renewdca = CA {0} renewed successfully.
caadmin.revokedca = CA {0} revoked successfully, reason: {1}.
caadmin.catokenactivated = CA token for CA {0} activated successfully. 
caadmin.catokendeactivated = CA token for CA {0} deactivated successfully. 
caadmin.catokenexternal = CA {0} is external and cannot be activated/deactivated. 
caadmin.certrespreceived = Certificate responce recieved successfully to CA {0}.
caadmin.exportedca = CA '{0}' exported successfully to {1} file.
caadmin.errorexportca = Error exporting CA '{0}' to {1} file: {2}.
caadmin.importedca = CA '{0}' imported successfully from old {1} file, status\: {2}. 
caadmin.errorimportca = Error importing CA '{0} from {1} file: {2}.
caadmin.errornorequestchain = No request certificate chain for CA with id {0} and DN '{1}'.

authorization.admingroupadded = Administratorgroup {0} added.
authorization.erroraddadmingroup = Error adding administratorgroup {0}.
authorization.admingroupremoved = Administratorgroup {0} removed.
authorization.errorremoveadmingroup = Error removing administratorgroup {0}.
authorization.admingrouprenamed = Administratorgroup renamed from {0} to {1}.
authorization.errorrenameadmingroup = Error renaming administratorgroup from {0} to {1}.
authorization.accessrulesadded = Added accessrules to admingroup {0}.
authorization.erroraddaccessrules = Error adding accessrules to admingroup{0}.
authorization.accessrulesremoved = Removed accessrules from admingroup {0}.
authorization.errorremoveaccessrules = Error removing accessrules from admingroup {0}.
authorization.accessrulesreplaced = Replaced accessrules from admingroup {0}.
authorization.errorreplaceaccessrules = Error replacing accessrules from admingroup {0}.
authorization.adminadded = Added administrator entities to administratorgroup {0}.
authorization.erroraddadmin = Error adding administrator entities to administratorgroup {0}.
authorization.adminremoved = Removed administrator entities from administratorgroup {0}.
authorization.errorremoveadmin = Error removing administrator entities from administratorgroup {0}.
authorization.errorcreateauthtree = Error creating AuthorizationTreeUpdateDataBean.
 
authentication.invalidpwd = Got request for user with invalid password: {0}.
authentication.authok = Authenticated user {0}.
authentication.wrongstatus = Got request with status {0} ({1}), NEW, FAILED or INPROCESS required: {2}.
authentication.usernotfound = Got request for nonexisting user: {0}.
authentication.statuschanged = Changed status to STATUS_GENERATED.

createcrl.createdcrl = Created CRL for CA {0}, with DN\: {1}. 
createcrl.errorcreate = Error creating CRL for CA {0}. 
createcrl.caoffline = CA {0}, {1} is off-line. CRL can not be created.
createcrl.errornotactive = CA {0}, {1} is not active. CRL can not be created. Status is {2}.
createcrl.catokenoffline = CA token for CA {0}, {1} is off-line. CRL can not be created.
createcrl.crlinfonull = Crlinfo is null for CA {0}, so we use 0 as nextUpdate.
createcrl.generalerror = Error generating CRL for CA {0}.
createcrl.erroravailcas = Error getting available CAs.

publisher.store = Published object {0} successfully to publisher {1}.
publisher.storequeue = Stored publish to queue. Publisher {0}, fingerprint {1}, status {2}.
publisher.errorstore = Error when publishing to {0}, fingerprint: {1}.
publisher.errorstorequeue = Error when storing publish to queue. Publisher {0}, fingerprint {1}, status {2}.
publisher.nopublisher = Publisher with id {0} does not exist.
publisher.testedpublisher = Successfully tested the connection with publisher {0}.
publisher.errortestpublisher = Error when testing the connection with publisher {0}.
publisher.addedpublisher = Publisher {0} added.
publisher.erroraddpublisher = Error adding publisher {0}.
publisher.changedpublisher = Publisher {0} edited.
publisher.errorchangepublisher = Error editing publisher {0}.
publisher.clonedpublisher = New publisher {0} used publisher {1} as template.
publisher.errorclonepublisher = Error adding publisher {0} using publisher {1} as template.
publisher.removedpublisher = Publisher {0} removed.
publisher.errorremovepublisher = Error removing publisher {0}.
publisher.renamedpublisher = Publisher {0} renamed to {1}.
publisher.errorrenamepublisher = Error renaming publisher {0} to {1}.
publisher.queuedataupgrade = Upgrading publisher queue data with version {0}.
publisher.errornocert = Certificate or CRL to publish does not exist, fingerprint: {0}.
publisher.unknowntype = Publish type in publisher queue is of unknown type, {0}. Not publishing.

store.storecert = Certificate stored.
store.errorstorecert = Error storing certificate.
store.storecrl = CRLNumber\: {0}, fingerprint\: {1}.  
store.storecrlwrongnumber = Trying to store CRL with number {0}, but a CRL with number {1} already exists.
store.errorcertinfo = Error finding certificate with fp {0}.
store.errorfindcertuser = Could not find certificate with username {0}.
store.errorfindcertserno = Could not find certificate with serno {0}.
store.revokedcert = Revoked certificate, reason: {0}.
store.republishunrevokedcert = Republished unrevoked cert, reason\: {0}. 
store.ignorerevoke = Ignored setRevokeStatus() request serialNo\: {0}. Current cert status\: {1}. Revocation reason\: {2}. 
store.revokedallbyca = Revoked All CAs certificates from issuer {0} successfully. Permantly revoked {1} certificates with reason {2}.
store.errorrevokeallbyca = Error when trying to revoke a CA's all certificates by issuer {0}.
store.getcrl = Retrieved CRL from issuer {0}, with CRL number {1}.
store.errorgetcrl = Error retrieving crl for issuer {0} with CRL number {1}.
store.errorgetcrlinfo = Error retrieving crl info for issuer {0}.
store.storehistory = Storing certificate request history successful for user {0}.
store.errorstorehistory = Error storing certificate request history for user {0}.
store.removehistory = Removal of certificate request history successful for fingerprint {0}.
store.errorremovehistory = Error removing certificate request history for fingerprint {0}.
store.errorcertprofilefixed = Error processing certificaterprofile {0}, name of fixed profile.
store.errorcertprofileexists = Certificate Profile {0} already exists.
store.addedcertprofile = New certificateprofile {0} added successfully.
store.errorcreatecertprofile = Error when creating new certificateprofile {0}.
store.erroraddprofilewithtempl = Error adding certificaterprofile {0} using profile {1} as template.
store.addedprofilewithtempl = New certificateprofile {0} added using profile {1} as template.
store.removedprofile = Removed certificateprofile {0}.
store.errorremoveprofile = Error removing certificateprofile {0}.
store.renamedprofile = Renamed certificateprofile {0} to {1}.
store.errorrenameprofile = Error removing certificateprofile {0} to {1}.
store.editedprofile = Edited certificateprofile {0}.
store.erroreditprofile = Error editing certificateprofile {0}.
store.errorseveralissuerserno = Possible error in database, more than one certificate has the same Issuer: {0}, and serialnumber {1}, is it CVC certificates?.

hardtoken.userdatasent = Userdata sent for token generation to issuer with alias {0}.
hardtoken.errorsenduserdata = Error when retrieving next token for issuer with alias {0}.
hardtoken.addedprofile = Hard token profile {0} added.
hardtoken.erroraddprofile = Error adding hard token profile {0}.
hardtoken.editedprofile = Hard token profile {0} edited.
hardtoken.erroreditprofile = Error editing hard token profile {0}.
hardtoken.clonedprofile = New hard token profile {0}, used profile {1} as template."  
hardtoken.errorcloneprofile = Error adding hard token profile {0}, using profile {1} as template."  
hardtoken.removedprofile = Hard token profile {0} removed.
hardtoken.errorremoveprofile = Error removing hard token profile {0}.
hardtoken.renamedprofile = Hard token profile {0} renamed to {1}. 
hardtoken.errorrenameprofile = Error renaming hard token profile {0} to {1}. 
hardtoken.addedissuer = Hard token issuer {0} added.
hardtoken.erroraddissuer = Error adding hard token issuer {0}.
hardtoken.editedissuer = Hard token issuer {0} edited.
hardtoken.erroreditissuer = Error editing hard token issuer {0}.
hardtoken.clonedissuer = New hard token issuer {0}, used profile {1} as template."  
hardtoken.errorcloneissuer = Error adding hard token issuer {0}, using profile {1} as template."  
hardtoken.removedissuer = Hard token issuer {0} remved.
hardtoken.errorremoveissuer = Error removing hard token issuer {0}.
hardtoken.renameissuer = Hard token issuer {0} renamed to {1}.
hardtoken.errorrenameissuer = Error renaming hard token issuer {0} to {1}.
hardtoken.unavailabletoken = Error hard token issuer cannot issue specified tokentype for user {0}. Change tokentype or issuer for user.
hardtoken.addedtoken = Hard token with token serial number {0} added.
hardtoken.tokenexists = Hard token with token serial {0} already exists.
hardtoken.changedtoken = Hard token with token serial number {0} changed.
hardtoken.errorchangetoken = Error changing hard token with token serial number {0}.
hardtoken.removedtoken = Hard token with token serial number {0} removed.
hardtoken.errorremovetoken = Error removing hard token with token serial number {0}.
hardtoken.viewedtoken = Hard token with token serial number {0} viewed.
hardtoken.viewedpuk = PUK data of hard token with token serial number {0} viewed.
hardtoken.addedtokencertmapping = Certificate mapping added, certificatesn: {0}, tokensn: {1}.
hardtoken.erroraddtokencertmapping = Error adding certificate mapping, certificatesn: {0}, tokensn: {1}.
hardtoken.removedtokencertmappingcert = Certificate mapping removed, certificatesn: {0}.
hardtoken.errorremovetokencertmappingcert = Error removing certificate mapping, certificatesn: {0}.
hardtoken.removedtokencertmappingtoken = Certificate mapping removed, certificatesn: {0}.
hardtoken.errorremovetokencertmappingtoken = Error removing certificate mapping, certificatesn: {0}.
hardtoken.generatedtoken = Token with token serialnumber {0} generated successfully.
hardtoken.errorgeneratetoken = Error generating token with token serialnumber {0}.

keyrecovery.addedforapproval = Key Recovery Action have been added for approval by authorized adminstrators.
keyrecovery.addeddata = Keyrecovery data for certificate with serial number {0}, issuer {1} added.
keyrecovery.erroradddata = Error when trying to add keyrecovery data for certificate with serial number {0}, issuer {1}.
keyrecovery.changeddata = Keyrecovery data for certificate with serial number {0}, issuer {1} changed.
keyrecovery.errorchangedata = Error when trying to update keyrecovery data for certificate with serial number {0}, issuer {1}. 
keyrecovery.removeddata = Keyrecovery data for certificate with serial number {0}, issuer {1} removed.
keyrecovery.errorremovedata = Error when trying to remove keyrecovery data for certificate with serial number {0}, issuer {1}. 
keyrecovery.removeduser = All keyrecovery data for user {0} removed.
keyrecovery.errorremoveuser = Error when removing all keyrecovery data for user {0}.
keyrecovery.sentdata = Keydata for user {0} have been sent for key recovery.
keyrecovery.errorsenddata = Error trying to recover keydata for user {0}.
keyrecovery.markeduser = User {0} newest certificate marked for recovery.
keyrecovery.errormarkuser = Error when trying to mark user {0} newest certificate for recovery.
keyrecovery.markedcert = Certificate with serialNo {0}, issuer {1} marked for recovery.
keyrecovery.errormarkcert = Error when trying to mark certificate with serialNo {0}, issuer {1} for recovery.

log.errormissingentry = Log device has generated an Exception.
log.errorcreateconf = Error creating new log configuration data for caid {0}.
log.createconf = Can not find logconfiguaration during save for caid {0}, creating new.
log.notauthtocustomlog = Not authorized to perform custom logging.
log.warningduplicatekey = DuplicateKeyException during log, will increment log counter and try again.

protect.errorcreatesession = PROTECT ERROR: Can not create TableProtectSession:
protect.rowexistsupdate = PROTECT INFO: protection row for entry type: {0}, with key: {1} already exists, updating.
protect.errorcreate = PROTECT ERROR: can not create protection row for entry type: {0}, with key: {1}.
protect.errorverify = PROTECT ERROR: verify failed for entry type: {0}, with key: {1}.
protect.errorverifynokey = PROTECT ERROR: verify failed for entry type: {0}, with key: {1}. No key exists.
protect.errorverifyalg = PROTECT ERROR: verify failed for entry type: {0}, with key: {1}. Incompatible algorithm.
protect.errorverifywronghash = PROTECT ERROR: wrong hash for entry type: {0}, with key: {1}.
protect.errorverifynorow = PROTECT ERROR: can not find protection row for entry type: {0}, with key: {1}.
protect.errorverifycant = PROTECT ERROR: can not verify protection row for entry type: {0}, with key: {1}.

protectedlog.abstainexport = Abstained from exporting log. Another node is already doing this.
protectedlog.acceptedchain = Accepted node-chain {0}.
protectedlog.canceledexp = Export canceled.
protectedlog.canceledver = Verification canceled.
protectedlog.mafailed = MailAction failed.
protectedlog.macause = The cause of the problem was {0}.
protectedlog.nonewevents = No new events to export.
protectedlog.progress = Log-export is processing another {0} log-events. ({1} log-events in total so far.)
protectedlog.saerrorcode = Target executable terminated with an error code.
protectedlog.safailed = ScriptAction failed.
protectedlog.sanotarget = No target specified.
protectedlog.startingexport = Starting export procedure.
protectedlog.waitingforservice = Waiting up to {0} seconds for services to stop.
protectedlog.sda.killingjvm = Killing JVM now!
protectedlog.cause.unknown = Unknown error.
protectedlog.cause.internalerror = An internal error occurred. This could be caused by bad configuration or be a bug.
protectedlog.cause.testing = This event was generated for testing puposes only and is not an actual error.
protectedlog.cause.missingtoken = A token used to protect a log-row is missing.
protectedlog.cause.modifiedtoken = A token used to protect a log-row has been tampered with.
protectedlog.cause.missinglogrow = A log-row is missing.
protectedlog.cause.modifiedlogrow = A log-row has been tampered with.
protectedlog.cause.emptylog = The log is empty. This is normal if you just installed this service.
protectedlog.cause.rolledback = The log has been rolled back to a previous state.
protectedlog.cause.frozen = Nothing has been added to the log for a long time.
protectedlog.cause.invalidtoken = Token was not valid at the time of use.
protectedlog.cause.modifiedexport = The export record has been modifed.
protectedlog.cause.invalidexport = Invalid export record.
protectedlog.cause.unverifyablechain = A chain that isn't linked to any other chain was found.
protectedlog.error.canotworking = CA {0} could not be used for signing.
protectedlog.error.catokenoffline = Cannot export since CA token is offline.
protectedlog.error.couldnotfetch = Could not fetch log event ({0}, {1}).
protectedlog.error.emptyorunprotected = Log is empty or unprotected.
protectedlog.error.exportverify = Export failed. Could not verify node-chain at {0}, {1}.
protectedlog.error.frozen = Frozen node. Nothing has been added to node {0} for a long time.
protectedlog.error.handlerupdate = Error in export handler during update.
protectedlog.error.handlerdone = Error in export handler during finalization.
protectedlog.error.internallogerror = Internal logging error.
protectedlog.error.invalidlastexport = Last export is invalid.
protectedlog.error.invalidtokencert = Invalid token certificate.
protectedlog.error.logdropped = Forced to drop log-event (shutdown in progress): "{0}". This was caused by {1}.
protectedlog.error.logrowchanged = Log-event ({0}, {1}) has changed in database.
protectedlog.error.logrowmissing = Log-event ({0}, {1}) is missing in database.
protectedlog.error.logunprotected = Forced to log event unprotected (shutdown in progress): "{0}". Use accept-CLI to sign this event.
protectedlog.error.noexportcacert = No valid CA certificate to use for log-export.
protectedlog.error.notoken = No token availabe for log event ({0}, {1}).
protectedlog.error.reverttonone = Requested CA was not found. Reverting to "none".
protectedlog.error.rolledback = The log has been rolled back.
protectedlog.error.tokenmissing = Could not locate the requested log protection token ({0}).
protectedlog.error.tokennotfound = Could not locate the requested log protection token ({0}). This is normal when you use a new token.
protectedlog.error.tokennotworking = Token {0} could not be used for protection.
protectedlog.error.unprotectednode = No protected log events found for node {0}.
protectedlog.verifier.failed = Log verification failed at {0} {1}.
protectedlog.warn.usingunsafeconfig = Using {0}=true and {1}>0 is not safe in an environment where more than one node is running at the same time.
protectedlog.error.notprocessednodeguid = NodeGUID {0} from IP {1} was not processed during verification, last event was nr {2} at date '{3}'.
	
ra.adminprefadded = Administrator preference with id {0} added. 
ra.changedadminpref = Administrator preference with key {0} changed.
ra.adminprefexists = Trying to add preference for administrator that already exists.
ra.adminprefnotfound = Administrator preference with key {0} cannot be found in database. 
ra.defaultadminprefsaved = Default administrator preference changed.
ra.errorsavedefaultadminpref = Error saving default administrator preference.
ra.addedprofile = End entity profile {0} added.
ra.erroraddprofile = Error adding end entity profile {0}.
ra.clonedprofile = Added new end entity profile {0} using profile {1} as template.
ra.errorcloneprofile = Error adding new end entity profile {0} using profile {1} as template.
ra.removedprofile = End entity profile {0} removed.
ra.errorremoveprofile = Error removing end entity profile {0}.
ra.renamedprofile = End entity profile {0} renamed to {1}.
ra.errorrenameprofile = Error renaming end entity profile {0} to {1}.
ra.changedprofile = End entity profile {0} edited.
ra.errorchangeprofile = Error editing end entity profile {0}.
ra.savedconf = Saved global configuration with id {0}.
ra.createdconf = Global configuration with id {0} created.
ra.errorcreateconf = Failed to create global configuration.
ra.errorgetids = Error getting authorized entity profile ids.
ra.errorreadprofiles = Error reading entity profiles.

ra.errorfullfillprofile = Userdata did not fullfill end entity profile {0}, dn '{1}: {2}.
ra.errorauthprofile = Administrator not authorized to end entity profile {0}.
ra.errorauthprofileexist = Administrator is not authorized to end entity profile {0} that existing user {1} was created with.
ra.errorauthca = Administrator not authorized to CA {0}.
ra.errorauthcaexist = Administrator not authorized to CA {0} that existing user {1} was created with.
ra.errorcertnoadmin = Your certificate does not belong to an administrator. Issuer {0}, serialNo {1}.
ra.errorcertnouser = Your certificate does not belong to any user. Issuer {0}, serialNo {1}.
ra.errorprint = Error when printing userdata for user {0}, message: {1}.
ra.approvalad = Add Endity Action have been added for approval by authorized adminstrators.
ra.approvaledit = Add Endity Action have been added for approval by authorized adminstrators.
ra.approvalrevoke = Revocation have been sent for approval by authorized adminstrators.
ra.approvalcaactivation = CA activation have been sent for approval by authorized adminstrators.
ra.errorrevocationexists = Certificate is already revoked.
ra.addedentity = Added end entity {0}.
ra.errorentityexist = Entity {0} already exists.
ra.errorentitynotexist = Entity {0} does not exist.
ra.erroraddentity = Error adding end entity {0}.
ra.decreasedentityrequestcounter = Decreased request counter for entity {0}, new value {1}.
ra.decreasedloginattemptscounter = Decreased remaining login attempts counter for entity {0}, new value {1}.
ra.resettedloginattemptscounter = Resetted remaining login attempts counter for entity {0}, new value {1}.
ra.errorrequestcounterinvalid = Invalid request counter '{0}' for entity {1}, errormsg: {2}.
ra.errorallowedrequestsinvalid = Invalid allowed requests value '{0}' for entity {1}, errormsg: {2}.
ra.editedentitystatus = Edited end entity {0}, new status {1}.
ra.editedentity = Edited end entity {0}.
ra.erroreditentity = Error editing end entity {0}.
ra.removedentity = Removed end entity {0}.
ra.errorremoveentity = Error removing end entity {0}.
ra.editpwdentity = Password changed for end entity {0}.
ra.revokedentity = Revoked end entity {0}.
ra.revokedentitycert = Revoked end entity certificate. Issuer {0}, serialNo {1}.
ra.errorfindentitycert = Could not find end entity certificate. Issuer {0}, serialNo {1}.
ra.errorunrevokenotonhold = Not allowed to unrevoke a certificate that is not on hold. Issuer {0}, serialNo {1}.
ra.errornotificationnoemail = Notification cannot be sent to user {0} where email field is null.
ra.sentnotification = Notification to user {0} with email {1} sent successfully.
ra.errorsendnotification = Error sending notification to user {0} with email {1}.
ra.extendedinfoupgrade = Upgrading extended information with version {0}.
ra.eeprofileupgrade = Upgrading entityprofile with version {0}.
ra.eeprofileaddfield = Adding new field, {0}, to NUMBERARRAY.
ra.eeprofilenonimpl = isFieldImplemented got call for non-implemented field\: {0}. 
ra.errorbadrequest = The requested action could not be performed.
ra.errorcustomrcptshort = Custom notification recipient specified, but string too short: {0}.
ra.errorcustomnoemail = Custom notification recipient specified, but no email addresses returned: {0}.
ra.errorcustomnoclasspath = Custom notification recipient specified, but classpath is empty: {0}.

userdatasource.fetcheduserdatasource = Userdata fetched from user data source {0} successfully.
userdatasource.errorfetchuserdatasource = Error fetching from user data source {0}.
userdatasource.removeduserdata = Userdata removed from user data source {0} successfully.
userdatasource.errorremovinguserdatasource = Error removing from user data source {0}.
userdatasource.erroruserdatasourceexist = User data source with id {0} does not exist.
userdatasource.errornotauth = Error, not authorized to user data source {0}.
userdatasource.errorfindingall = Error looking for all user data sources.
userdatasource.testedcon = Successfully tested the connection with user data source {0}. 
userdatasource.errortestcon = Error when testing the connection with user data source {0}.
userdatasource.errortestconauth = Error, not authorized to test user data source {0}.
userdatasource.addedsource = User data source {0} added.
userdatasource.erroraddsource = Error adding user data source {0}.
userdatasource.changedsource = User data source {0} changed.
userdatasource.errorchangesource = Error changing user data source {0}.
userdatasource.clonedsource = Added user data source {0} using user data source {1} as template.
userdatasource.errorclonesource = Error adding user data source {0} using user data source {1} as template.
userdatasource.removedsource = User data source {0} removed.
userdatasource.errorremovesource = Error removing user data source {0} removed.
userdatasource.renamedsource = Renamed user data source {0} to {1}.
userdatasource.errorrenamesource = Error renaming user data source {0} to {1}.


sernogenerator.discarding = Discarding serial number out of range.

caservice.notactive = CA Service not activated. Activate it in the Edit CA Page.
ocspcaservice.upgrade = Upgrading OCSPCAService with version {0}.

catoken.deactivate = De-activating CAToken.
catoken.activated = Activated CAToken of type {0}.
catoken.inforegisterclasspath = Can not register {0}. This is normally not an error.
catoken.classnotfound = Class not found: {0}.
catoken.errorinstansiate = Can not instantiate {0}. {1}.
catoken.upgrade = Upgrading CA Token with version {0}.
catoken.erroractivate = Error activating CA token: {0}.
catoken.deletecert = Deleted certificate with alias '{0}'.
catoken.errornocertalias = Certificate alias '{0}' not found in keystore.
catoken.errornokeyalias = Key alias '{0}' not found in keystore.
catoken.errorcertreqverify = Certificate request is not verifying.
catoken.errorkeynottoken = Key not on token.
catoken.genkeysnotavail = GenerateKeys is only available for Soft CA tokens (PKCS12).
catoken.generatedkeys = Generated new keys for {0} CA token.

certprofile.upgrade = Upgrading certificateprofile with version {0}.

publisher.upgrade = Upgrading LdapPublisher with version {0}.
publisher.entryexists = Duplicate entry, updating: {0}
publisher.noentry = No old entry exist for {0}.
publisher.infoexists = An entry with DN '{0}' exists  
publisher.errorextocsppubl = EXTERNAL OCSP ERROR, publishing is not working for {0}.
publisher.notpublwithstatus = Not publishing certificate with status, status={0}.
publisher.notpubltype = Certificate of type '{0}' will not be published.
publisher.errorldapdecode = LDAP ERROR: Error decoding {0}.
publisher.errorldapencodestore = LDAP ERROR: Error encoding {0} when storing in LDAP.
publisher.ldapadd = LDAP {0}: Added object: {1} successfully.
publisher.ldapmodify = LDAP {0}: Modified object: {1} successfully.
publisher.ldapremove = LDAP REVOKE: Removed certificate from object: {0}  successfully.
publisher.ldapaddedintermediate = LDAP {0}: Created intermediate nodes for {1}.
publisher.errorldapstore = LDAP ERROR: Error storing {0} ({1}) in LDAP ({2}) for DN ({3}). Message: {4}.
publisher.errorldapremove = LDAP ERROR: Error when removing certificate from LDAP ({0}).
publisher.errorldapintermediate = LDAP ERROR: could not create node '{0}' on LDAP.
publisher.ldapintermediatenotappropriate = LDAP: field '{0}' is not appropriate for intermediate node.
publisher.errorpassword = LDAP ERROR: Can't decode password for LDAP login: {0}.
publisher.errordisconnect = LDAP ERROR: LdapPublisher: LDAP disconnection failed.
publisher.errorrevokenoentry = LDAP ERROR: Entry holding certificate doesn't exist in LDAP.
publisher.inforevokenocert = Trying to remove certificate from LDAP, but no certificate attribute exists in the entry.
publisher.errorldapbind = LDAP ERROR: Error binding to LDAP server. {0}
publisher.errornobinddn = LDAP ERROR: Could not find bindDN.
publisher.errortempfile = Could not output to tempfile.
publisher.errormissingproperty = {0} must be specified.
publisher.errorexternalapp = Detected errors while running the external application {0}.  
publisher.errordeletetempfile = Could not remove tempfile {0}.
publisher.errorcertconversion = Could not convert certificate for publishing.
publisher.commandnotfound = Could not find external command {0}.

cmp.errorunknownprotalg = Received CMP message with unknown protection alg: {0}.
cmp.errorcertconfirmstatus = Received a Cert Confirm with status {0}.
cmp.receivedmsg = CMP message received from: {0}.
cmp.sentresponsemsg = Sent a CMP response to: {0}.
cmp.receivedrevreq = Received a revocation request for issuer: {0} and serno: {1}.
cmp.receivedrevreqnoissuer = Received a revocation request missing issuer or serno.
cmp.errornullresp = Response from CmpMessageDispatcher is null.
cmp.errortcptoolongmsg = Received a message of length {0}, which is way too much to be sane.
cmp.errortcpwronglen = Received a message of length {0}, that claimed to contain {1} bytes.
cmp.erroradduserupdate = Could not add user '{0}', although it did not exists a blink of an eye ago! Will update instead.
cmp.erroradduser = Error adding user '{0}'.
cmp.errorgeneral = Error during CMP processing. {0}.
cmp.errorauthmessage = Authentication failed for message.
cmp.errorcalcprotection = Error calculating protection.
cmp.errorunauthmessagera = Received an unathenticated message in RA mode.
cmp.infonouserfordn = Did not find a username matching dn: {0}.
cmp.errornocmrfreq = ICmpMessage is not a CrmfRequestMessage.
cmp.errornotauthrevoke = Not authorized to revoke certificate for the user with issuer: {0} and serno: {1}.
cmp.errorcertnofound = Certificate not found for issuer: {0} and serno: {1}.
cmp.errormissingissuerrevoke = Received a revocation request missing issuer or serno.
cmp.errorrevoke = Error revoking certificate.
cmp.errornoprot = No PKI protection to verify.
cmp.erroralreadyrequested = The request is already awaiting approval. 
cmp.erroralreadyrevoked = Already revoked. 

ocsp.receivedunidreq = Got request (ip;fqdn): {0}; {1} for Fnr mapping to Unid={2}.
ocsp.errordatabaseunid = Got a database error when looking up databasource for Unid-Fnr mapping.
ocsp.errorunidnosnindn = Did not find a serialNumber in DN: {0}.
ocsp.errorunidnosnmapping = No Fnr mapping exists for UNID {0}.
ocsp.returnedunidresponse = Returned response to (ip;fqdn): {0}; {1} with Fnr={2} for Unid={3}.
ocsp.errornoclientauth = Got request without client authentication from (ip;fqdn): {0};{1}.
ocsp.errorverifycert = Error when trying to verify client certificate.
ocsp.erroruntrustedclientauth = Got request with untrusted client cert from (ip;fqdn): {0};{1}.
ocsp.errornoinitparam = {0} init-parameter must be set.
ocsp.errornotrustfiles = No files in trustDir directory: {0}.
ocsp.errorreadingtrustfiles = Error reading files from trustDir: {0}.
ocsp.errorreadingfile = Error reading {0} from {1}: {2}.
ocsp.certcollectionempty = The passed certificate collection is empty.
ocsp.errorcomparehash = OCSPException comparing certificate hashes, skipping cacert for '{0}'.
ocsp.nomatchingcacert = Did not find matching CA-cert for DN: {0}.
ocsp.reloadkeys = Reloading keys due to request from {0}.
ocsp.errorunsignedreq = OCSP request from ip {0} is unsigned. Service enforces signing.
ocsp.errorinvalidsignature = Signature of incoming OCSPRequest is invalid. Signed by '{0}'.
ocsp.infosigner = OCSPRequest was signed by '{0}'.
ocsp.infosigner.invalidcertsignature = Signer certificate verification for (subjectDN '{0}', issuer DN '{1}') failed. Message\: {2}.
ocsp.infosigner.certnotyetvalid = Signature certificate is not yet valid for (subjectDN '{0}', issuer DN '{1}') failed. Message\: {2}.
ocsp.infosigner.certexpired = Signature certificate is expired for (subjectDN '{0}', issuer DN '{1}') failed. Message\: {2}.
ocsp.infosigner.nocacert = No matching issuer certificate found for signer certificate with subjectDN '{0}' and issuerDN '{1}'.
ocsp.infosigner.revoked = Signer certificate for '{0}' is revoked. IssuerDN '{1}', serialNo {2}.
ocsp.infosigner.notallowed = Signer certificate for '{0}' is not authorized due to signer or issuer restrictions. IssuerDN '{1}', serialNo {2}.
ocsp.errornoreqentities = The OCSP request does not contain any simpleRequest entities.
ocsp.errortoomanyreqentities = The OCSP request contains too many simpleRequest entities. Max {0} allowed.
ocsp.errorgencerthash = Unable to generate CA certificate hash.
ocsp.errorfindcacert = Unable to find CA certificate by issuer name hash: {0}, or even the default responder: {1}.
ocsp.errorfindcacertusedefault = Unable to find CA certificate by issuer name hash: {0}, using the default reponder to send 'UnknownStatus'.
ocsp.errorprocessextension = En error occured when processing OCSP extensions class: {0}, error code={1}.
ocsp.errornocacreateresp = Unable to find CA certificate and key to generate OCSP response.
ocsp.errorprocessreq = Error processing OCSP request. Message: {0}.
ocsp.classnotfound = Class {0} could not be loaded.
ocsp.nocardpwd = No card password specified. 
ocsp.nohwsigningclass = No HW OCSP signing class defined.
ocsp.errornosignkeys = No valid signing keys are available at this time.
ocsp.errornovalidkeys = No valid keys specified.
ocsp.errorinitialize = Unable to initialize OCSPServlet.
ocsp.signcertnotindb = Signing certificate with serial number {0} from issuer {1} can not be found in database (signing- and CA-certs must be published to OCSP responder).
ocsp.signcertrevoked = Signing certificate with serial number {0} from issuer {1} is revoked.
ocsp.signcerthasnochain = Signing certificate with serial number {0} from issuer {1} has no chain to a root CA.
ocsp.errorgetalias = Unable to get alias {0} in file {1}.
ocsp.newsigningkey = New OCSP signing key for CA '{0}'. Key cert '{1}'.
ocsp.errorocspkeynotusable = OCSP signing key not useable for CA '{0}'. Key certificate with serial number: {1}.
ocsp.errorloadsigningcerts = Not possible to load signing certificates.
ocsp.infoaddedstatusinfo = Adding status information ({0}) for certificate with serial '{1}' from issuer '{2}'.
ocsp.inforeceivedrequest = Received OCSP request for certificate with serNo: {0}, and issuerNameHash: {1}. Client ip {2}.
ocsp.toolarge = Request dropped. OCSP only supports requests of {0} bytes in total or less. Current request was {1} bytes. 
ocsp.badurlenc = Bad URL encoding in request.
ocsp.missingreq = Request is missing last part of URL defined in RFC 2560 A.1.1.
ocsp.unknownmethod = Unknown request method '{0}'. Only GET and POST supported.
ocsp.emptyreq = No request bytes from IP {0}.
ocsp.shrinkmaxage = RFC 5019 6.2: max-age should be 'later than thisUpdate but earlier than nextUpdate'. Shrinking maxAge to largest possible value '{0}'.

scep.errormissingparam = Got request missing parameters from {0}. Parameters 'operation' and 'message' must be supplied.
scep.receivedmsg = Received a SCEP message from {0}.
scep.sentresponsemsg = Sent a SCEP {0} response to {1}.
scep.errorunknownca = SCEP {0} request for unknown CA '{1}'.
scep.errorinvalidreq = Empty or invalid request received.
scep.errorauth = Authorization denied.
scep.errorclientstatus = Wrong client status.
scep.errorgeneral = Error processing SCEP request.

batch.createkeystore = Created Keystore for '{0}'.
batch.errornokeyrecoverydata = No Key Recovery Data available for user '{0}', can not be generated.
batch.retrieveingkeys = Retrieving keys for {0}.
batch.generatingkeys = Generating keys for {0}.
batch.generateduser = New user generated successfully - {0}.
batch.generatingallstatus = Generating for all {0}.
batch.generatingnoofusers = Batch generating {0} users.
batch.errorsetstatus = An error happened, setting status to {0}.
batch.infonoclearpwd = User '{0}' does not have clear text password.
batch.errorbatchfailed = BatchMakeP12 failed for {0} users ({1} succeeded) - {0}.
batch.errorbatchfaileduser = BatchMakeP12 failed for '{0}'.
batch.success = {0} new users generated successfully - {1}.
batch.generateindir = Generating keys in directory {0}.
batch.errorunknown = Unknown user, or clear text password is null: {0}.
batch.errorrootnotverify = RootCA certificate does not verify.
batch.errorrootnotselfsigned = RootCA certificate not self-signed.
batch.errorgennotverify = Generated certificate does not verify using CA-certificate.

certreq.sentlatestcertreq = Sent latest Certificate Request to client at {0}.
certreq.errorsendlatestcertreq = Error sending Certificate Request to {0}.
certreq.errorsendcert = Error sending processed certificate to {0}, cause: {1}.
certreq.sentlatestcrl = Sent latest CRL to client at {0}.
certreq.errorsendcrl = Error sending CRL to {0}, cause: {1}.
certreq.receivedcertreq = Received certificate request for user '{0}' from {1}.
certreq.badcertprofile = Requested certificate profile '{0}' is not allowed in end entity profile. Using default '{1}'.
certreq.nosuchcertprofile = Requested certificate profile '{0}' does not exist. Using default '{1}'.
certreq.ovpntnoruntime = Runtime (shell) is not available.
certreq.ovpntfailedexec = Could not execute of OpenVPN Windows installer script '{0}'.
certreq.ovpntexiterror = Openvpn windows installer script returned '{0}' on exit.
certreq.nosuchusername = Non existent username. To generate a certificate a valid username and password must be supplied.
certreq.wrongstatus = Wrong user status! To generate a certificate for a user the user must have status New, Failed or In process.
certreq.wrongpassword = Wrong username or password! To generate a certificate a valid username and password must be supplied.
certreq.invalidreq = Empty or invalid request received. Please supply a correct request.
certreq.invalidsign = Invalid signature on certificate request. Please supply a correctly signed request.
certreq.invalidkey = Invalid Key in request: {0}. Please supply a correct request.
certreq.catokenoffline = CA token is off line: {0}. Contact your administrator.
certreq.errorgeneral = An unknown error occured.
certreq.parameters = Parameter names and values
certreq.postonly = The certificate request servlet only handles POST method.

healthcheck.allipsauthorized = All IPs are authorized.
healthcheck.errorauth = ERROR : Healthcheck request recieved from an non authorized IP: {0}.

startservice.shutdown = Destroy, EJBCA shutdown.
startservice.startup = Init, {0} startup.
startservice.waitservicever=Waiting up to {0} seconds for verification service to finish..
startservice.waitserviceexp=Waiting up to {0} seconds for export service to finish.

xkms.errorregisteringnamespace = Error registering namespace mapper property
xkms.errorinitializinggenerator = Error initializing RequestAbstractTypeResponseGenerator
xkms.errorparsingdomreq = Error when DOM parsing request.
xkms.errorunmarshallingreq = Error unmarshalling the request
xkms.errorparsingresp = Error parsing the response
xkms.recievedreqwithoutsig = Received XKMS request without signature, which is required
xkms.errorreqsigdoesntverify = Error XKMS request signature doesn't verify
xkms.errorwhenverifyingreq = Error when verifying signature request.
xkms.errorgenrespsig = Error generating response signature on XKMS request
xkms.errorinitadminsession = Error instancing User Admin Session Bean
xkms.errorinitauthsession = Error instancing Authorization Session Bean
xkms.errorinitkeyrecsession = Error instancing Key Recovery Session Bean
xkms.errorinitauthentsession = Error instancing Authentication Session Bean
xkms.errordecodingcert = Error decoding certificate
xkms.errorcreatesession = Error creating session beans.
xkms.illegaluserquery = Illegal User Query
xkms.errorextractingusekeywith = Error extracting UseKeyWith Attributes from Cert
xkms.errorregisteringreq = Error registering XKMS request
xkms.errorinreqwrongstatus = Error in XKMS request, wrong status {0} of user {1}
xkms.errorinprivs = Error the administrator didn't have enough priviledges to find user
xkms.errorfindinguserdata = Error finding userdata for certificate with DN : {0}
xkms.errorauthverification = Error performing authentication verification :
xkms.errorverifyingcert = Error verifying certificate :
xkms.errorsettinguserstatus = Error setting user's status to new : {0}
xkms.errorgenrespid = Error generating response ID
xkms.onlyrsakeysupported = Only RSA keys are supported for key value info.
xkms.errorfetchinglastcrl = Error fetching last CRL
xkms.errorextractingusekeyattr = Error extracting use key with attributes from cert
xkms.errorsetvalidityinterval = Error setting Validity Interval

certext.errorparsingproperty= Error parsing the '/certextensions.properties' file
certext.certextmissconfigured = Certificate Extension {0} seems to be misconfigured in the certextensions.properties
certext.noextensionforid = No extension configured for id: {0}. Returning null.
certext.basic.incorrectvalue= Incorrect property 'value' for basic certificate extension with id : {0}
certext.basic.incorrectenc= Incorrect encoding ({0}) for basic certificate extension with id : {1}
certext.basic.illegalvalue = Illegal value {0} of certificate extension with id : {1}

# Messages used by the log system itself
log.nouserinvolved = No user involved
log.nocertinvolved = No certificate involved
log.adminnotknown = Administrator not known

# General error messages, used in several places
error.catokenoffline = CA token is offline for CA {0}.
error.caoffline = CA '{0}' is not active. CA status={1}.
error.unknown = Unknown error.

# Messages used by approvals
APACTIVATECATOKEN         = activate CA Token

APADDENDENTITY            = add End Entity

APCHANGESTATUSENDENTITY   = change status of end entity

APEDITENDENTITY           = edit end entity

APVIEWHARDTOKENDATA       = view hard token data

APKEYRECOVERY             = key recover

APGENERATETOKEN           = generate token

APREVOKEENDENTITY         = revoke end entity

APREVOKEDELETEENDENTITY   = revoke and delete end entity

APREVOKECERTIFICATE       = revoke or reactivate certificate

CLITOOL                   = Command Line Tool