<?xml version="1.0"?>
<document>

  <properties>
    <title>Howto</title>
  </properties>

<body>
  <section name="Howto documents">
    <p>
    A number of HOWTO documents are available in the <strong>doc/howto</strong> directory in the source distribution.
    </p>
    </section>
  
  <section name="Using CVC CAs for EU EAC ePassports">
  <p>
  Usage of EJBCA for a complete PKI for CVC CAs are explained in this <a href="cvccas.html">document</a>.
  </p>
  </section>
   
  <section name="SensorNet PKI">
    <p>
    This excellent HOWTO on PKI in general, LDAP, email and server setup has been kindly contributed by SensorNet. Please read this notice!
    </p>
    <note>
These pages were created by the SensorNet Project at Oak Ridge National
Laboratory (ORNL), Oak Ridge, Tennessee, USA to provide help for their
instance of EJBCA. You are welcome to modify these pages for your own
use, but please remove any links to the SensorNetCA web pages so that we
do not get excess traffic. Please tell your users not to use the URLs in
the screen shots, and please credit Oak Ridge National Laboratory. ORNL
is operated by UT-Battelle for the U.S. Department Of Energy.
    </note>
    <p>
    <ul>
    <li><a href="sensornet/infrastructure.html">SensorNet certificate infrastructure </a></li>
    <li><a href="sensornet/short-course.html">A short course on certificates</a></li>
    <li><a href="sensornet/ca-enrollment.html">Certificate Authority Enrollment</a></li>
    <li><a href="sensornet/CertificateInfrastructure.html">SensorNet certificate infrastructure basics and enrollment</a></li>
	</ul>
	</p>
	
	<subsection name="Managing certificates">
	<p>
	<ul>
    <li><a href="sensornet/MozillaHowTo/MozillaCertificateManagement.html">Using Firefox</a></li>
    <li><a href="sensornet/IEHowTo/ManagingCertificateIE.html">Using Microsoft Internet Explorer</a></li>
    </ul>
    </p>
	</subsection>

	<subsection name="Configuring email client and LDAP">
	<p>
	<ul>
    <li><a href="sensornet/LDAPHowTo/SecureEmailNS-Moz/LDAPandMail.html">Using Firefox</a></li>
    <li><a href="sensornet/LDAPHowTo/SecureEmailO/SecureEmailUsingOutlook.html">Using Microsoft Outlook</a></li>
    <li><a href="sensornet/LDAPHowTo/SecureEmailOE/Securee-mail%20OutlookExpress.html">Using Microsoft Outlook Express</a></li>
    </ul>
    </p>
	</subsection>

	<subsection name="Server certificates">
	<p>
	<ul>
    <li><a href="sensornet/IISHowTo/ServerCert.html">Microsoft IIS</a></li>
    <li><a href="sensornet/howto-server.html">Apache HTTPd and Unix servers</a></li>
    <li><a href="sensornet/howto-tomcat.html">Apache Tomcat</a></li>
    </ul>
    </p>
    </subsection>
    
  </section>

  <section name="Microsoft smart card logon">
  <p>
  PrimeKey has made a detailed guide how you set up and configure Windows and EJBCA for Windows SmartCard Logon.
  The guide is divided in three section, introduction, Windows configuration and PKI configuration. 
  The reason for this division is that you can give the Windows guide to the windows administrator, who can easily
  follow this guide on the Windows servers, while the PKI can be a hosted service or operated by another department.   
  </p>
  <p>
  <ul>
  <li><a href="http://download.primekey.se/ejbca/smartcardlogon/EJBCA-SmartCardLogon-Guide.pdf">Introduction</a></li>
  <li><a href="http://download.primekey.se/ejbca/smartcardlogon/EJBCA-SmartCardLogon-Guide-Windows.pdf">Windows configuration</a></li>
  <li><a href="http://download.primekey.se/ejbca/smartcardlogon/EJBCA-SmartCardLogon-Guide-PKI.pdf">PKI configuration</a></li>
  </ul>
  </p>
  <p>
  The scripts and profiles can be fetched <a href="http://download.primekey.se/ejbca/smartcardlogon/ReleasePackage">here</a>.
  </p>  
  
  </section>
  
  <section name="Migrating from other CAs to EJBCA">
  
  <subsection name="Migrating an OpenSSL based CA">
  <p>This article is written for an older version of EJBCA. Now there is a command to import a PKCS#12 file, also in the Admin-GUI under "Edit Certificate Authorities->Import CA keystore".
  <br/><br/>The cli command to import a PKCS#12 file is now called <i>bin/ejbca.sh ca importca ...</i>.
  <br/>The cli command to import user certificates is now called <i>bin/ejbca.sh ca importcert ...</i>. 
  </p><p>
  Read the <a href="http://www.csita.unige.it/software/free/ejbca/">howto</a> at Csita.
  </p>
  </subsection>
  
  <subsection name="Migrating RSA Keon CA with nCipher">
  <p>This document describes how to migrate an RSA Keon CA using nCipher HSM to EJBCA. 
  The migration guide goes through migrating the CA signing keys, importing the CAs to EJBCA and importing 
  issued certificates to EJBCA. The result is a setup in EJBCA that can continue operation transparently.
  <br/>
  Download <a href="http://download.primekey.se/documents/Migrating_to_EJBCA.pdf">EJBCA migration guide</a> (pdf).
  </p>
  
  </subsection>
  
  </section>
  
  <section name="EJBCA and Cisco IOS">
  <p>This howto is contributed by Bruno Bonfils.</p>
  <p>
  There is a <a href="#Cisco IOS simulator">Cisco emulator</a> available.
  </p>
  <p>Here is the IOS config related to the CA:
  </p>
  <source>
!
crypto ca trustpoint FMSCA
enrollment url http://your.ca.host.name:8080/ejbca/publicweb/apply/scep
serial-number
source interface Ethernet0
auto-enroll regenerate
!
  </source>
  <p>
  <ul>
    <li>The enrollment line tell how (the method, here an http url) to contact the PKI software. Note: you must omit the pkiclient.exe filename at the end which is automagically add by IOS.</li>
    <li>The serial-number tells IOS to include the serial number in the request.</li>
    <li>The name of the trustpoint you use MUST MATCH exactly the shortname of your CA in EJBCA (here FMSCA).</li>
  </ul>
  Once you have that, use the command:
  </p>
  <source>
# crypto ca authenticate FMSCA  
  </source>
  <p>
  to fetch the CA certificate.
  </p>
  <p>
  Then, login to EJBCA, and create a new entity profile that looks like:
  </p>
  <p>
  <img alt="End Entity profile for IOS" src="images/ios-profile.jpg"/>
  </p>
  <p>
  Then, do the password enrollment with the command:  
  </p>
  <source>
# crypto ca enroll FMSCA
  </source>
  <p>
  Check your ejbca logs, you shoud see something like:
  </p>
  <source>
ERROR [PKCS10RequestMessage] No CN in DN: SN=12013150+unstructuredName=your.ciscobox.hosts.name
ERROR [Log4jLogDevice] October 19, 2005 9:48:33 AM CEST, CAId : 0, CA, EVENT_ERROR_USERAUTHENTICATION, Administrator : \
PUBLICWEBUSER, IP Address : 192.168.134.1, User : 12013150, Certificate : No Certificate Involved, Comment : \
Got request for nonexisting user: 12013150
  </source>
  <p>
  So, you know you must add an entity using the serial number as username, the password you define in IOS, and serialNumber/unstructuredNamed as subject DN fields.
  </p>
  <p>
  After adding the end entity, do the password enrollment again. If you see this you have enrolled succesfully:
  </p>
  <source>
saroumane#sh crypto ca cert
Certificate
  Status: Available
  Certificate Serial Number: 426FA96340F5D2CA
  Certificate Usage: General Purpose
  Issuer:
    c=FR
    o=Fimasys
    cn=Fimasys Security CA
  Subject:
    Name: your.ciscobox.hosts.name
    Serial Number: 12013150
    serialNumber=12013150
    hostname=your.ciscobox.hosts.name
  Validity Date:
    start date: 08:58:28 CET Oct 19 2005
    end   date: 09:08:28 CET Oct 19 2007
  Associated Trustpoints: FMSCA

CA Certificate
  Status: Available
  Certificate Serial Number: 7AA2B9942CD0D362
  Certificate Usage: Signature
  Issuer:
    c=FR
    o=Fimasys
    cn=Fimasys Security CA
  Subject:
    c=FR
    o=Fimasys
    cn=Fimasys Security CA
  Validity Date:
    start date: 07:29:35 CET Oct 17 2005
    end   date: 07:39:35 CET Oct 15 2015
  Associated Trustpoints: FMSCA  
  </source>

  <subsection name="Cisco IOS simulator">
  <p>
  There is a Cisco 7200 emulator called <a href="http://www.ipflow.utc.fr/index.php/Cisco_7200_Simulator">dynamips</a> available  
  and a graphical front end <a href="http://www.gns3.net/">GNS3</a>.
  </p>
  <p>Below is a short run through how to configure and enroll directly with EJBCA using GNS3 on Ubuntu 8.10.
  </p>
  <source>
sudo apt-get install gns3 uml-utilities bridge-utils
  </source>
  <p>Now you have to configure the host and gns3 to be able to communicate with each other, so the router can connect to EJBCA on the host computer. 
  This is taken from <a href="http://www.blindhog.net/linux-bridging-for-gns3-lan-communications/">http://www.blindhog.net/linux-bridging-for-gns3-lan-communications/"</a>.
  </p>
  <source>
1. Create a tap interface
   sudo tunctl -t tap0
2. Remove ip addressing and set eth0 and tap0 to promiscuous mode
   sudo ifconfig tap0 0.0.0.0 promisc up
   sudo ifconfig eth0 0.0.0.0 promisc up
3. Create a new bridge interface
   sudo brctl addbr br0
4. Add tap0 and eth0 to the bridge group
   sudo brctl addif br0 tap0
   sudo brctl addif br0 eth0
5. Enable the bridge interface and give it an ip address
   sudo ifconfig br0 up
   sudo ifconfig br0 10.10.10.99/24
6. Configure the default route
   sudo route add default gw 10.10.10.254
  </source>
  <p>Now start gns3.</p>
  <source>
sudo gns3
  </source>
  <p>Configure with IOS image, for example c7200-jk9s-mz.124-13b.bin (an image with crypto commands), it's available on the net.
  Also configure a simple topology:
  <ul>
  <li>drag cloud to topology window</li>
  <li>drag c7200 to topology window</li>
  <li>configure cloud and add tap0 interface</li>
  <li>add manual link from cloud to c7200</li>
  <li>start c7200</li>
  <li>open console on c7200</li>
  <li>enter configuration and configure FastEthernet0/0 with ip 10.10.10.98/255.255.255.0</li>
  </ul>
  Now you should be able to ping the host computer, where EJBCA is running. 
  It is now time to do the actual enrollment as described above. Below are sample commands I have used.
  </p>
  <source>
Router>enable
Router#configure terminal
Router(config)#
Router(config)#crypto ca trustpoint ScepCA

Router(ca-trustpoint)#enrollment url http://10.10.10.99:8080/ejbca/publicweb/apply/scep
Router(ca-trustpoint)#serial-number
Router(ca-trustpoint)#ip-address none
Router(ca-trustpoint)#subject-name OU=Network Management, O=PrimeKey Solutions AB, C=SE
Router(ca-trustpoint)#revocation-check none
Router(ca-trustpoint)#exit

Router(config)#crypto ca authenticate ScepCA
Router(config)#crypto ca enroll ScepCA
  </source>
  <p>
  You will see in the log what the username of the user you must create is called.
  create end entity profile and user with DN containing SN=FFFFFF and unstructuredName=Router, as seen in the log file (FFFFFF and Router are the default values in the simulator).
  </p>
  <source>
Router(config)#crypto ca enroll ScepCA
Router(config)#exit
Router#show crypto ca certificate
</source>
<p>
You can always look at the defined trustpoints using the command:
</p>
<source>
Router#show crypto ca trustpoints
</source>
<p>
If you are enrolling towards an RA instead (see External RA documentation for information how to set up an external RA for SCEP) you issue the following commands:
</p>
<source>
Router>enable
Router#configure terminal
Router(config)#
Router(config)#crypto ca trustpoint ScepRA

Router(ca-trustpoint)#enrollment url http://10.10.10.99:8080/scepraserver/scep
Router(ca-trustpoint)#enrollment mode ra
Router(ca-trustpoint)#serial-number
Router(ca-trustpoint)#ip-address none
Router(ca-trustpoint)#subject-name OU=Network Management, O=PrimeKey Solutions AB, C=SE
Router(ca-trustpoint)#revocation-check none
Router(ca-trustpoint)#exit

Router(config)#crypto ca authenticate ScepRA
Router(config)#crypto ca enroll ScepRA
</source>
<p>
Note! This would only have a chance to work in EJBCA 3.8.1 and later, and actually it does not work due to the following
error in Cisco. If you have any ideas, please contact us.
</p>
<source>
Router#debug crypto pki API
Router#debug crypto pki messages
Router#debug crypto pki server
Router#debug crypto pki transactions
Router#debug crypto pki validation

...

*Jan 16 21:47:32.546: CRYPTO_PKI: make trustedCerts list for ScepRA
*Jan 16 21:47:32.550: CRYPTO_PKI: subject="c=SE,o=Foo,cn=Scep RA" serial number= 3A 46 2F B4 5B AC 06 47                         

*Jan 16 21:47:32.554: CRYPTO_PKI: subject="c=SE,o=EJBCA Sample,cn=ScepCA" serial number= 19 A6 7D 78 AF 9D 3B 27                         

*Jan 16 21:47:32.566: E ../cert-c/source/p7digdat.c(377) : Error #703h
*Jan 16 21:47:32.566: E ../cert-c/source/p7spprt.c(589) : Error #703h
*Jan 16 21:47:32.582: pkcs7 verify data returned status 0x703
*Jan 16 21:47:32.582: CRYPTO_PKI: status = 1795: failed to verify
*Jan 16 21:47:32.582: %PKI-6-CERTFAIL: Certificate enrollment failed.
*Jan 16 21:47:32.582: CRYPTO_PKI: All enrollment requests completed for trustpoint ScepRA.
</source>

  </subsection>

  </section>


  <section name="OpenSSH and X509 authentication">
  <p>Bruno Bonfils has written this excellent howto on using SSH with certificates from EJBCA:</p>
  <p>
  <a href="http://asyd.net/home/geeklog/2006/08/24/openssh_x509">OpenSSH and X509 authentication</a>.
  </p>
  <p>
  Another interesting link is this one:
  <br/>
  <a href="http://alon.barlev.googlepages.com/openssh-pkcs11">PKCS#11 support in OpenSSH</a>.
  </p>
  </section>
  
  <section name="Configure EJBCA with Sun Access Manager/OpenSSO">
  <p>
  A really good article and description about EJBCA and OpenSSO can be found in Bruno's <a href="http://developers.sun.com/identity/reference/techart/opensso_protect.html">article</a>.
  </p>
  <p>EJBCA can issue certificates to be used when protecting sites using OpenSOO (Sun's Access Manager). 
  EJBCA will then be configured to publish issued certificates to the AM LDAP server.
  </p>
  <p>The configuration is really simple and after installing EJBCA consists of only these steps:
  <ul>
  <li>Create a Publisher, AMPublisher with the following properties:
    <ul>
      <li>Publisher Type: LDAP V3 Search Publisher</li>
      <li>Base DN: The Base DN in the AM LDAP, for example dc=company,dc=com</li>
      <li>Login parameters to the AM LDAP server</li>
      <li>Create Nonexisting Users: false</li>
      <li>Modify Existing Users: true</li>
      <li>Add multiple certificates per user: false</li>
      <li>Remove certificates when revoked: true</li>
      <li>Remove ldap user when certificate revoked: false</li>
      <li>LDAP location fields from cert DN: CN, Common Name (not really used)</li>
      <li>Suffix base DN of the LDAP Search: same as Base DN, for example dc=company,dc=com</li>
      <li>LDAP filter of the search: uid=$USERNAME</li>
    </ul>
  </li>
  <li>Create a Certificate Profile, AMUser:
    <ul>
      <li>Use ENDUSER as template when creating the profile</li>
      <li>Extended Key Usage: Client Authentication</li>
      <li>Publishers: AMPublisher</li>
    </ul>
  </li>
  <li>Create an End Entity Profile, AMUser:
    <ul>
      <li>Subject DN Fields: UID, CN, O, C is sufficient</li>
      <li>Default Certificate Profile: AMUser</li>
      <li>Available Certificate Profiles: AMUser</li>
    </ul>
  </li>
  </ul>
  The procedure when adding a new user is now simple:
  <ul>
    <li>Create a new user in AM</li>
    <li>Create a new user in EJBCA with the same username and UID as the username in AM</li>
    <li>Get the certificate for the user, for example with the user's browser on the public web pages of EJBCA</li>
  </ul>
  When the users certificate is created, the certificate is published to the AM LDAP server and certificate authentication can be configured and used in AM.
  </p>
  </section>
  
  <section name="Setting up an Apache Web Server as a proxy in front of EJBCA">
  <p>
  This section will show you how to use an Apache Web Server Proxy in front of EJBCA.
  The resulting server will
  </p>
  <ul>
  <li>Display EJBCA public web at https://ca-server.company.local/</li>
  <li>Redirect all HTTP-requests to HTTPS, except for OCSP and CRL.</li>
  <li>Require a client SSL certificate when accessing https://ca-server.company.local/adminweb/</li>
  <li>Be able to loadbalance requests</li>
  <li>Still answer to requests on https://ca-server.company.local/ejbca/*</li>
  </ul>
  <p>
  This example was created on Ubuntu 64-bit Server 7.10 using the Apache Web Server 2.2 package,
  but should be easy to adapt to any system able to run Apache.
  </p>
  <p>
  Start by installing EJBCA as normal. If you intend to have the CA on the same machine as
  the proxy you should modify $EJBCA_HOME/conf/web.properties to only listen to localhost
  </p>
<source>
  httpsserver.bindaddress.pubhttp=127.0.0.1
  httpsserver.bindaddress.pubhttps=127.0.0.1
  httpsserver.bindaddress.privhttps=127.0.0.1
</source>
  <p>
  Install the Apache web server and enable required modules:
  </p>
<source>
  $sudo su
  #apt-get install apache2
  #cd /etc/apache2/mods-enabled/
  #ln -s ../mods-available/proxy.load proxy.load
  #ln -s ../mods-available/proxy_http.load proxy_http.load
  #ln -s ../mods-available/proxy_ajp.load proxy_ajp.load
  #ln -s ../mods-available/proxy_balancer.load proxy_balancer.load
  #ln -s ../mods-available/rewrite.load rewrite.load
  #ln -s ../mods-available/ssl.load ssl.load
</source>
  <p>
  Generate the SSL-certificate for Apache. This should be issued by the same CA that issued the Tomcat SSL
  certificate (AdminCA1 in the default configuration). This can be done with the EJBCA CLI:
  </p>
<source>
  $ cd $EJBCA_HOME
  $ bin/ejbca.sh ra adduser apache-ssl foo123 "CN=ca-server.company.local,O=EJBCA Sample,C=SE" "" AdminCA1 "" 1 PEM SERVER
  $ bin/ejbca.sh ra setclearpwd apache-ssl foo123
  $ bin/ejbca.sh batch
  $ ls p12/pem/ca-server.company.local*
  p12/pem/ca-server.company.local-CA.pem  p12/pem/ca-server.company.local-Key.pem  p12/pem/ca-server.company.local.pem
</source>
  <p>
  Configure the default virtual host-file /etc/apache2/sites-enabled/000-default
  </p>
  <note>
  Note that this configuration with SSLVerifyClient inside a Location directtive is not safe with the newly (2009-11-15) discovered
  vulnerability in SSL/TLS. You should only use SSLVerifyClient and SSLCipherSuite on whole virtualhosts. You can create the same effect
  as below by using a separate subdomain for EJBCA administration (i.e. admin.ca.youdomain.com).
  <br/>See for example the <a href="http://www.debian.org/security/2009/dsa-1934">Debian advisory</a>. 
  </note>
<source>
NameVirtualHost *:80
&lt;VirtualHost *:80&gt;
        DocumentRoot /var/www/

        # Proxy requests to EJBCA instances (only one on local machine configured)
        &lt;Proxy balancer://mycluster-kerb&gt;
                BalancerMember ajp://localhost:8009/ejbca/
        &lt;/Proxy&gt;
        ProxyPass / balancer://mycluster-kerb/

        RewriteEngine   On
        # Redirect all but the CRL Distribution Point, OCSP and Helthcheck to HTTPS
        RewriteCond     %{THE_REQUEST} !(/publicweb/webdist/certdist.*cmd=crl|/publicweb/status/)
        RewriteRule     ^(.*)$ https://%{SERVER_NAME}$1 [L,R]
        # Treat reqeusts to / and /ejbca/ as the same. Required by EJBCA's Admin Web.
        RewriteCond     %{THE_REQUEST}  /ejbca/
        RewriteRule     ^/ejbca/(.*)$ /$1 [PT]

        # Configure log
        LogLevel warn
        ErrorLog /var/log/apache2/error.log
        CustomLog /var/log/apache2/access.log combined
&lt;/VirtualHost&gt;

NameVirtualHost *:443
&lt;VirtualHost *:443&gt;
        DocumentRoot /var/www/

        RewriteEngine   On
        # Treat reqeusts to / and /ejbca/ as the same. Required by EJBCA's Admin Web.
        RewriteCond     %{THE_REQUEST}  /ejbca/
        RewriteRule     ^/ejbca/(.*)$ /$1 [PT]

        # Configure secure SSL for this server using SSL certificate generated by EJBCA
        SSLEngine on
        SSLCipherSuite HIGH
        SSLProtocol all -SSLv2
        SSLCertificateFile /home/jboss/ejbca/p12/pem/ca-server.company.local.pem
        SSLCertificateKeyFile /home/jboss/ejbca/p12/pem/ca-server.company.local-Key.pem

        # Require Client SSL certificate  for the Admin GUI
        &lt;Location /adminweb&gt;
                SSLVerifyClient require
                SSLVerifyDepth 1
                SSLCACertificateFile /home/jboss/ejbca/p12/pem/ca-server.company.local-CA.pem
        &lt;/Location&gt;

        # Proxy requests to EJBCA instances (only one on local machine configured)
        &lt;Proxy balancer://mycluster-kerb&gt;
                BalancerMember ajp://localhost:8009/ejbca/
        &lt;/Proxy&gt;
        ProxyPass / balancer://mycluster-kerb/

        # Configure log
        LogLevel warn
        ErrorLog /var/log/apache2/error.log
        CustomLog /var/log/apache2/access.log combined
&lt;/VirtualHost&gt;
</source>
  <p>
  Reload the apache configuration and verify that only port 80, 443 and other desired services
  (e.g. a ssh-daemon) are listening on all or external interfaces
  </p>
<source>
  $sudo /etc/init.d/apache2 reload
  $sudo netstat -nap | grep LISTEN | grep -v 127.0.0.1
    tcp        0      0 0.0.0.0:80              0.0.0.0:*               LISTEN     7612/apache2        
    tcp        0      0 0.0.0.0:443             0.0.0.0:*               LISTEN     7612/apache2        
    tcp6       0      0 :::22                   :::*                    LISTEN     3746/sshd
</source>
  <p>
  Even though this looks secure, it is still a good idea to use a firewall as an extra layer of security (e.g. drop malformed packages and
  prevent future services from being exploited).
  </p>
  
  <subsubsection name="Nice URLs">
  <p>
  A sample configuration how to fix up nice URLs for OCSP so that you can point your OCSP service locator to http://ocsp.company.com/ instead of http://ocsp.company.com:8080/ejbca/publicweb/status/ocsp
  (some info left out for brevity).
  </p>
  <source>
&lt;VirtualHost ocsp.company.com:80>
    &lt;Proxy *>
        Order deny,allow
        Allow from all
    &lt;/Proxy>
    ProxyPass / http://127.0.0.1:8080/ejbca/publicweb/status/ocsp
    ProxyPassReverse / http://127.0.0.1:8080/ejbca/publicweb/status/ocsp
&lt;/VirtualHost>
  </source>
  <p>You can easily do the same for CRL distribution points.
  </p>
  </subsubsection>
  
  </section>

  <section name="Setting up an Apache Web Server with mod_jk in front of EJBCA">
  <p>
  Instead of using a proxy you can use mod_jk which uses a JK connector between apache and tomcat. I think this have some benefits. 
  You can easily combine it with mod_rewrite to have any type of external URLs, for OCSP, CRLs etc, and mapping them to other URLs in EJBCA.
  </p>
  <p>
  This section will show you how to use an Apache with mod_jk in front of EJBCA.
  The resulting server will
  </p>
  <ul>
  <li>Display EJBCA public web at http://demo.primekey.se/</li>
  <li>Require a client SSL certificate when accessing https://demo.primekey.se/, which works for the admin-GUI.</li>
  </ul>
  mod_jk have many features and by using it you can virtually do anything you want with hosts, ports and URLs.
  <p>
  This example was created on Ubuntu 64-bit Server 8.10 using the Apache Web Server 2.2 package,
  but should be easy to adapt to any system able to run Apache.
  </p>
<source>
# sudo apt-get install apache2 libapache2-mod-jk
# vim /etc/libapache2-mod-jk/workers.properties
-----
worker.list=jboss

# Define a worker using ajp13
worker.jboss.port=8009
worker.jboss.host=127.0.0.1
worker.jboss.type=ajp13
-----
</source>
<source>
# vim /etc/apache2/sites-available/demo.primekey.se
-----
&lt;VirtualHost demo.primekey.se:80&gt;
  # We must disable default charset or everything will be ISO-8859-1,
  AddDefaultCharset off
  ServerAdmin webmaster@primekey.se
  ServerName demo.primekey.se
  ServerAlias demo.primekey.se

  JkLogFile /var/log/apache2/mod_jk.log
  JkLogLevel debug

  JkMount /* jboss
  JkMount / jboss
&lt;/VirtualHost&gt;

&lt;VirtualHost demo.primekey.se:443>&gt;
  # We must disable default charset or everything will be ISO-8859-1,
  AddDefaultCharset off
  ServerAdmin webmaster@primekey.se
  ServerName demo.primekey.se
  ServerAlias demo.primekey.se

  SSLEngine on
  
  JkLogFile /var/log/apache2/mod_jk.log
  JkLogLevel debug

  JkMount /* jboss
  JkMount / jboss

  # JkExtractSSL is On by default
  # JkExtractSSL On
&lt;/VirtualHost&gt;
-----
</source>
Enable demo.primekey.se in /etc/apache2/sites-enabled

<source>
# vim /etc/apache2/mods-available/ssl.conf
-----
SSLVerifyClient require
SSLVerifyDepth 3

SSLCACertificateFile /etc/apache2/ssl/apache-CA.pem
SSLCertificateFile /etc/apache2/ssl/apache.pem

SSLOptions +StdEnvVars +ExportCertData
-----
</source>

<source>
# vim /etc/apache2/mods-available/jk.load
-----
LoadModule jk_module /usr/lib/apache2/modules/mod_jk.so
JkWorkersFile /etc/libapache2-mod-jk/workers.properties
-----
</source>

  <p>
   Now enable ssl.load and ssl.conf in /etc/apache2/mods-enabled.
  </p>
  <p>Finally restart apache and go to http://demo.primekey.se/ (or https). Same security considerations as for using proxy applies.</p>
  <p>
  If you are using the <a href="manual-ocsp.html">external OCSP responder</a> then you also got to ensure you got this line in the file apache2.conf:
  </p><source>KeepAlive Off</source><p>
  If not apache will hang.
  </p>
  <p>
  Also an <a href="manual-ocsp.html">external OCSP responder</a> it could be good to add these lines to the 'Virtual Host' configuration:
  </p><source>
  RewriteEngine on
  RewriteRule .* /ejbca/publicweb/status/ocsp [PT]

  JkMount /ejbca/publicweb/status/ocsp/* ocsp_worker
  JkMount /ejbca/publicweb/status/ocsp ocsp_worker
  </source><p>
  By doing this you don't have to bother about typing the last part of the URL. Just right server name will do.
  </p>
  </section>

  <section name="Setting up Autoenrollment for Windows clients with EJBCA">
  <p>
  This section will show you how to set up automatic certificate enroll of
  machines and users in an Windows environment with EJBCA.
  </p><p>
  General idea
  </p>
  <ul>
	<li>Use mod_auth_kerb on a Apache2 web server proxy to validate the requesters identity using Kerberos.</li>
	<li>A login VBS-Script creates a certificate request that is sent to the proxy using IE-components.</li>
	<li>A Servlet protected by the proxy receives the requests and creates a new cert.</li>
	<li>The new certificate will use information from the request (UPN and CertificateTemplate) and read.</li>
	<li>information from active directory (CN,DC etc).</li>
	<li>Autoenrollment should be configurable in the Admin GUI.</li>
  </ul>
  <subsection name="Current status and known issues">
  <p>
  Current status
  </p>
  <ul>
  	<li>Machine enroll on Domain Controller: WORKING </li>
	<li>DomainController enroll on Domain Controller: WORKING </li>
	<li>User enroll (Administrator) on Domain Controller: <b>NOT WORKING</b> (Does not trusts ca-server as Intranet, despite GP) </li>
	<li>Machine enroll on other WS2K3 client: WORKING (not checked in a while) </li>
	<li>User enroll (Administrator) on other WS2K3 client: <b>NOT WORKING</b> (Does not trusts ca-server as Intranet, despite GP, also complains about untrusted VBS if ran manually) </li>
	<li>Machine enroll on WinXP client: WORKING </li>
	<li>User enroll (Administrator) on WinXP client: WORKING </li>
  </ul>
  <p>
  Known issues
  </p>
  <ul>
	<li><b>SECURITY:</b> The Servlet should verify that e.g. only Users can request User certificates, DCs only DC certs etc.. and other permissions if possible.</li>
	<li>The enroll scripts always fetches new certificates. They should use the command=status first to see if a new cert is needed.</li>
	<li>AdminWeb cannot verify admin certificates if non-"/ejbca/" path is used in URL.</li>
	<li>Autoenroll Servlet doesn't get X-Remote-User if "/ejbca/" path is used in URL.</li>
	<li>Order of Subject DNs is wrong compared with MS certs..</li>
	<li>SSL connection to AD has not been tested.</li>
	<li>Certificates don't have the CertificateTemplate attrib yet.. looks nicer in Certificate MMC snapin..</li>
	<li>JavaScript "onchange" behaves strangely in IE6. Only activated when the table is clicked, not the checkbox..</li>
	<li>Creation of EEPs is inefficient due to attempted removal of EEP before each new request.. (Debug-code)</li>
  </ul>
  <p>
  ...
  </p>
  </subsection>
  <subsection name="Machines and software">
  <p>
	Domain Controller: dc1.company.local
  </p>
  <ul>
	<li>Windows Server 2003 EE patched to SP2</li>
	<li>Active Directory</li>
	<li>DNS Server</li>
  </ul>
  <p>
	CA Server:	ca-server.company.local
  </p>
  <ul>
	<li>Ubuntu 64 Server 7.10</li>
	<li>Apache2 with modules</li>
	<li>Kerberos 5</li>
	<li>Java 1.6u4</li>
	<li>JBoss 4.2.2.GA</li>
	<li>EJBCA 3.6 Alpha</li>
	<li>Apache Ant 1.7.0</li>
  </ul>
  <p>
	Desktop client: client-01.company.local
  </p>
  <ul>
	<li>Windows XP Pro SP1 patched to SP2</li>
  </ul>
  </subsection>
  <subsection name="Install EJBCA">
  <p>
	Configure EJBCA not to respond to external web-requests by editing $EJBCA_HOME/conf/web.properties
  </p>
<source>
...
httpsserver.bindaddress.pubhttp=127.0.0.1
httpsserver.bindaddress.pubhttps=127.0.0.1
httpsserver.bindaddress.privhttps=127.0.0.1
...
</source>
  <p>
	After installation, go to EJBCA Admin GUI → System Configuration and
	configure the autoenrollment settings.
  </p>
  </subsection>
  <subsection name="Setting up Kerberos authentication and Apache">
  <p>
	This could probably be done on a Windows server as well, since Apache
	and Kerberos is supposed to work on that platform too..
  </p>
<source>
$sudo su
#apt-get update
#apt-get install krb5-user apache2 libapache2-mod-auth-kerb
 ** Skip kerberos config.. we will configure this later **
#cd /etc/apache2/mods-enabled/
#ln -s ../mods-available/proxy.load proxy.load
#ln -s ../mods-available/proxy_ajp.load proxy_ajp.load
#ln -s ../mods-available/proxy_balancer.load proxy_balancer.load
#ln -s ../mods-available/rewrite.load rewrite.load
#ln -s ../mods-available/ssl.load ssl.load
#ln -s ../mods-available/headers.load headers.load
</source>
  <p>
  	Edit /etc/krb5.conf where dc1.company.local is the DNS-name of the Domain Controller and COMPANY.LOCAL is our domain.
  </p>
<source>
[libdefaults]
default_realm = COMPANY.LOCAL

[realms]
COMPANY.LOCAL = {
    kdc = dc1.company.local:88
    admin_server = dc1.company.local:88
}

[domain_realm]
    .company.local = COMPANY.LOCAL
    company.local = COMPANY.LOCAL

[logging]
default = FILE:/var/log/apache2/krb5.log
</source>
  <p>
  	Edit /etc/network/interfaces and set a static IP address
  </p>
<source>
...
#iface eth0 inet dhcp
iface eth0 inet static
    address 192.168.0.102	# Address of this machine
    netmask 255.255.255.0
    gateway 192.168.0.101	# In our local network this is the Domain Controller
</source>
  <p>
	Use the DC as DNS server in /etc/resolv.conf
  </p>
<source>
search localdomain
nameserver 192.168.0.101
</source>
  <p>
  	and restart networking (sudo /etc/init.d/networking restart).
  </p>
  <p>
  	Add "ntdpdate dc1.company.local" to /etc/rc.local or a cron job to make sure the
  	ca-server is syncronized with the Domain Controller.
  </p>
  <p>
  	Create the SSL certificates for the Apache proxy using the same CA as our EJBCA installation and the same subject DN.
  </p>
<source>
$cd $EJBCA_HOME
$bin/ejbca.sh ra adduser apache-ssl foo123 "CN=ca-server.company.local,O=EJBCA Sample,C=SE" "" AdminCA1 "" 1 PEM SERVER
$bin/ejbca.sh ra setclearpwd apache-ssl foo123
$bin/ejbca.sh batch
$ls p12/pem/ca-server.company.local*
p12/pem/ca-server.company.local-CA.pem  p12/pem/ca-server.company.local-Key.pem  p12/pem/ca-server.company.local.pem
</source>
  <p>
  	Edit /etc/apache2/sites-enabled/000-default to display an apache proxy front for EJBCA
  </p>
<source>
NameVirtualHost *:80
&lt;VirtualHost *:80&gt;
        DocumentRoot /var/www/

        # Proxy requests to EJBCA instances (only one on local machine configured)
        &lt;Proxy balancer://mycluster-kerb&gt;
                BalancerMember ajp://localhost:8009/ejbca/
        &lt;/Proxy&gt;
        ProxyPass / balancer://mycluster-kerb/

        RewriteEngine   On
        # Redirect all but the CRL Distribution Point, OCSP and Helthcheck to HTTPS
        RewriteCond     %{THE_REQUEST} !(/publicweb/webdist/certdist.*cmd=crl|/publicweb/status/)
        RewriteRule     ^(.*)$ https://%{SERVER_NAME}$1 [L,R]
        # Treat reqeusts to / and /ejbca/ as the same. Required by EJBCA's Admin Web.
        RewriteCond     %{THE_REQUEST}  /ejbca/
        RewriteRule     ^/ejbca/(.*)$ /$1 [PT]

        # Configure log
        LogLevel warn
        ErrorLog /var/log/apache2/error.log
        CustomLog /var/log/apache2/access.log combined
&lt;/VirtualHost&gt;

NameVirtualHost *:443
&lt;VirtualHost *:443&gt;
        DocumentRoot /var/www/

        RewriteEngine   On
        # Treat reqeusts to / and /ejbca/ as the same. Required by EJBCA's Admin Web.
        RewriteCond     %{THE_REQUEST}  /ejbca/
        RewriteRule     ^/ejbca/(.*)$ /$1 [PT]

        # Configure secure SSL for this server using SSL certificate generated by EJBCA
        SSLEngine on
        SSLCipherSuite HIGH
        SSLProtocol all -SSLv2
        SSLCertificateFile /home/jboss/ejbca/p12/pem/ca-server.company.local.pem
        SSLCertificateKeyFile /home/jboss/ejbca/p12/pem/ca-server.company.local-Key.pem

        # Require Client SSL certificate for the Admin GUI
        &lt;Location /adminweb&gt;
                SSLVerifyClient require
                SSLVerifyDepth 1
                SSLCACertificateFile /home/jboss/ejbca/p12/pem/ca-server.company.local-CA.pem
        &lt;/Location&gt;

        # Require Kerberos authentication for the Autoenroll Servlet
        &lt;Location /autoenroll&gt;
                AuthType Kerberos
                Krb5Keytab /etc/apache2/http.keytab
                KrbAuthRealms COMPANY.LOCAL
                KrbServiceName HTTP
                KrbMethodNegotiate on
                KrbMethodK5Passwd off
                Require valid-user
        &lt;/Location&gt;

        # Forward the UPN as variable X-Remote-User
        RewriteCond %{IS_SUBREQ} ^false$
        RewriteCond %{LA-U:REMOTE_USER} (.+)
        RewriteRule .* - [E=RU:%1]
        RequestHeader set X-Remote-User %{RU}e

        # Proxy requests to EJBCA instances (only one on local machine configured)
        &lt;Proxy balancer://mycluster-kerb&gt;
                BalancerMember ajp://localhost:8009/ejbca/
        &lt;/Proxy&gt;
        ProxyPass / balancer://mycluster-kerb/

        # Configure log
        LogLevel warn
        ErrorLog /var/log/apache2/error.log
        CustomLog /var/log/apache2/access.log combined
&lt;/VirtualHost&gt;
</source>
  <p>
  	Restart apache with "sudo /etc/init.d/apache2 restart"
  </p>
  <p>
	Install Windows support tools on the Domain Controller (found in %WIN2k3CD%\SUPPORT\TOOLS\SUPTOOLS.msi) to get ktpass.exe.
	Create a new user "ca-server@company.local" and a strong password e.g not FooBar123 used here.
	Create a keytab-file "http.keytab" on the Domain Controller:
  </p>
<source>
ktpass.exe -princ HTTP/ca-server.company.local@COMPANY.LOCAL -mapuser ca-server -crypto DES-CBC-MD5 -ptype KRB5_NT_PRINCIPAL -mapop set +desonly -pass FooBar123 -out http.keytab
 ...
 keysize 55 HTTP/ca-server.company.local@COMPANY.LOCAL ptype 1 (KRB5_NT_PRINCIPAL) vno 3 etype
 0x3 (DES-CBC-MD5) keylength 8 (0x64614c9d256bcd6d)
 ...
</source>
  <p>
	And move the file to ca-server.company.local:/etc/apache2/http.keytab change permissions to be
	readable only by the apache-process.
  </p>
<source>
$chown root:root /etc/apace2/http.keytab
</source>
  <p>
  Verify that the keytab is correct: 
  </p>
<source>
$kinit Administrator
$kvno HTTP/ca-server.company.local
$klist -e
** Output here should match the one from ktpass.exe **
</source>
  <p>
	Verify that the keytab can be used:
  </p>
<source>
$kdestroy
$sudo kinit -k -t /etc/apache2/http.keytab HTTP/ca-server.company.local
$sudo klist
(You should have received a ticket here if everything is working.)
$sudo kdestroy
</source>
  <p>
	Add ca-server.company.local (192.168.1.2) to your Domain Controllers DNS server as a "Host (A)" record.
  </p>
  </subsection>
  <subsection name="Set up enrollment scripts to run automatically">
  <p>
	Create a Shared directory on the Domain Controller, C:\Shared with read and exec rights by Everyone
  </p>
<source>
copy %SYSTEMROOT%\system32\certreq.exe C:\Shared\Autoenroll\
copy %SYSTEMROOT%\system32\certcli.dll C:\Shared\Autoenroll\
copy %SYSTEMROOT%\system32\certadm.dll C:\Shared\Autoenroll\
(copy %SYSTEMROOT%\system32\certutil.exe C:\Shared\Autoenroll\ This is used by EnrollDomainController and is already available at all DCs.)
</source>
  <p>
	Edit or create C:\Shared\Autoenroll\autoenroll.conf
  </p>
<source>
# This is a primitive config file that does not allow spaces

# The request URL is built from the following properties
# https://[requestpath]?request=...
# 

# Standard SSL-port and using URL rewrite from /ejbca/* to /*
requestpath=ca-server.company.local/autoenroll

# Non-standard SSL-port and not using URL rewrite
#requestpath=ca-server.company.local:4443/ejbca/autoenroll

# Debug setting, use only for manual testing
#debug=true
debug=false
</source>
  <p>
	Edit or create C:\Shared\Autoenroll\RequestAndInstall.vbs
  </p>
<source>
	Set oArgs = WScript.Arguments 
	if oArgs.Count &lt; 1 then 
		WScript.Echo "Usage: thisscript.vbs fullpathnameofrequest.inf"
		WScript.Quit 1
	else 
		sRequestInfo = Trim(oArgs(0))
	end if 
	
	Set WS = CreateObject("WScript.Shell")
	
	sRequest = WS.ExpandEnvironmentStrings("%TEMP%") &amp; "\autoenrolled.req"
	sResult = WS.ExpandEnvironmentStrings("%TEMP%") &amp; "\autoenrolled.p7b"
	
	Set oFilesystem = CreateObject("Scripting.FileSystemObject")
	On Error Resume Next	' Ignore if we try to delete a file that does not exist
	oFilesystem.DeleteFile(sRequest)
	Err.Clear
	On Error GoTo 0
	sSharedDir = oFilesystem.GetParentFolderName(WScript.ScriptFullName) &amp; "\"
	
	Set iFile = oFilesystem.OpenTextFile(sSharedDir &amp; "autoenroll.conf") 
	Do While iFile.AtEndOfStream &lt;&gt; True 
	    sLine = iFile.Readline
	    If InStr(Left(sLine,1), "#") = 0 then
	        If InStr(sLine, "requestpath=") &lt;&gt; 0 then
		    	sRequestPath = Trim(Right(sLine, Len(sLine)-Len("requestpath=")))
	        end if 
	        If InStr(sLine, "debug=") &lt;&gt; 0 then
		    	sDebug = Trim(Right(sLine, Len(sLine)-Len("debug=")))
	        end if 
	    End if
	Loop 
	iFile.Close
	
	WS.Run sSharedDir &amp; "certreq.exe -f -new " &amp; sRequestInfo &amp; " " &amp; sRequest, 0, True
	
	sRequestData = ""
	Set objFile = oFilesystem.OpenTextFile(sRequest, 1)
	Do Until objFile.AtEndOfStream
		sRequestData = sRequestData &amp; objFile.ReadLine
	Loop
	objFile.Close
	
	set oIE = CreateObject("InternetExplorer.Application")
	
	oIE.navigate2("https://" &amp; sRequestPath &amp; "?debug=" &amp; sDebug &amp; "&amp;request=" &amp; sRequestData)
	
	If sDebug = "true" Then
		oIE.visible = true
	End If
	
	'Wait max 30 seconds
	wscript.sleep 1000
	counter = 0
	While oIE.Busy = true And counter &lt; 30
		counter = counter + 1
		wscript.sleep 1000
	Wend
	
	sResultData = oIE.Document.Body.innerHTML
	sResultData = Mid(sResultData, 6, Len(sResultData)-11)
	
	Set oFile = oFilesystem.CreateTextFile(sResult, True)
	oFile.WriteLine sResultData
	oFile.Close
	
	on error resume next ' in case the Task Manager is used to close IE.
	If sDebug &lt;&gt; "true" Then
		oIE.quit ' Close the window
		WS.Run sSharedDir &amp; "certreq.exe -accept " &amp; Chr(34) &amp; sResult &amp; Chr(34), 0, True
	End If
</source>
  <p>
	Edit or create C:\Shared\Autoenroll\EnrollDomainController.vbs
  </p>
<source>
	' This Script is based on the script found at http://www.microsoft.com/technet/prodtechnol/windowsserver2003/technologies/security/advcert.mspx#EURAE
	
	iRole = GetLastDomainRole()
	If iRole &lt;&gt; 4 And iRole &lt;&gt; 5 Then
		WScript.Echo "This script should only run on a Domain Controller."
		WScript.Quit 1
	End If
	
	Set WS = CreateObject("WScript.Shell")
	
	Set objDC = GetObject("LDAP://" &amp; CreateObject("ADSystemInfo").ComputerName) 
	sGUID = objDC.GUID 
	sDNShostname = objDC.DNShostname 
	
	Set oFilesystem = CreateObject("Scripting.FileSystemObject") 
	sTempfilePrefix = WS.ExpandEnvironmentStrings("%TEMP%") &amp; "\autoenrolled"
	sRequestInfo = sTempFilePrefix &amp; ".inf"
	sSharedDir = oFilesystem.GetParentFolderName(WScript.ScriptFullName) &amp; "\"
	
	'Create b64 encoded extension
	Dim aASNsubstring(2, 5) 
	Const HEX_DATA_LENGTH = 1 
	Const ASCIIDATA = 2 
	Const HEXDATA = 3 
	Const HEX_BLOB_LENGTH = 4 
	Const HEX_TYPE = 5
	' Encode DNS
	aASNsubstring(0, ASCIIDATA) = sDNShostname 
	aASNsubstring(0, HEX_TYPE) = "82" 
	For i = 1 to Len(aASNsubstring(0, ASCIIDATA)) 
	    aASNsubstring(0, HEXDATA) = aASNsubstring(0, HEXDATA) &amp; Hex(Asc(Mid(aASNsubstring(0, ASCIIDATA), i, 1))) 
	Next 
	aASNsubstring(0, HEX_DATA_LENGTH) = ComputeASN1 (Len(aASNsubstring(0, HEXDATA)) / 2) 
	sASN = aASNsubstring(0, HEX_TYPE) &amp; aASNsubstring(0, HEX_DATA_LENGTH) &amp; aASNsubstring(0, HEXDATA) 
	' Encode GUID
	aASNsubstring(1, HEXDATA) = sGUID 
	aASNsubstring(1, HEX_TYPE) = "A0" 
	aASNsubstring(1, HEX_DATA_LENGTH) = ComputeASN1 (Len(aASNsubstring(1, HEXDATA)) / 2) 
	sASN = sASN &amp; "A01F06092B0601040182371901" &amp; aASNsubstring(1, HEX_TYPE) &amp; "120410" &amp; aASNsubstring(1, HEXDATA) 
	
	Set oFile = oFilesystem.CreateTextFile(sTempfilePrefix &amp; ".asn") 
	oFile.WriteLine "30" &amp; ComputeASN1 (Len(sASN) / 2) &amp; sASN 
	oFile.Close 
	WS.Run "certutil -f -decodehex " &amp; sTempfilePrefix &amp; ".asn " &amp; sTempfilePrefix &amp; ".bin", 0, True 
	WS.Run "certutil -f -encode " &amp; sTempfilePrefix &amp; ".bin " &amp; sTempfilePrefix &amp; ".b64", 0, True 
	
	Set iFile = oFilesystem.OpenTextFile(sTempfilePrefix &amp; ".b64") 
	Set oFile = oFilesystem.CreateTextFile(sRequestInfo, True)
	oFile.WriteLine "[Version]" 
	oFile.WriteLine "Signature= " &amp; Chr(34) &amp; "$Windows NT$" &amp; Chr(34) 
	oFile.WriteLine "" 
	oFile.WriteLine "[NewRequest]"
	oFile.WriteLine "Subject = " &amp; Chr(34) &amp; "CN=IgnoredValue" &amp; Chr(34)
	oFile.WriteLine "KeySpec = 1" 
	oFile.WriteLine "KeyLength = 2048" 
	oFile.WriteLine "Exportable = TRUE" 
	oFile.WriteLine "MachineKeySet = TRUE" 
	oFile.WriteLine "SMIME = FALSE" 
	oFile.WriteLine "PrivateKeyArchive = FALSE" 
	oFile.WriteLine "UserProtected = FALSE" 
	oFile.WriteLine "UseExistingKeySet = FALSE"
	oFile.WriteLine "ProviderName = " &amp; Chr(34) &amp; "Microsoft RSA SChannel Cryptographic Provider" &amp; Chr(34) 
	oFile.WriteLine "ProviderType = 12" 
	oFile.WriteLine "RequestType = PKCS10" 
	oFile.WriteLine "KeyUsage = 0xa0"
	oFile.WriteLine "" 
	oFile.WriteLine "[EnhancedKeyUsageExtension]" 
	oFile.WriteLine "OID=1.3.6.1.5.5.7.3.1" 
	oFile.WriteLine "OID=1.3.6.1.5.5.7.3.2" 
	oFile.WriteLine "" 
	oFile.WriteLine "[Extensions]" 
	iLine = 0 
	Do While iFile.AtEndOfStream &lt;&gt; True 
	    sLine = iFile.Readline 
	    If sLine = "-----END CERTIFICATE-----" then 
	        Exit Do 
	    end if 
	    if sLine &lt;&gt; "-----BEGIN CERTIFICATE-----" then 
	        if iLine = 0 then 
	            oFile.WriteLine "2.5.29.17=" &amp; sLine 
	        else 
	            oFile.WriteLine "_continue_=" &amp; sLine 
	        end if 
	        iLine = iLine + 1 
	    end if 
	Loop 
	oFile.WriteLine "Critical=2.5.29.17" 
	oFile.WriteLine "" 
	oFile.WriteLine "[RequestAttributes]" 
	oFile.WriteLine "CertificateTemplate = DomainController"
	oFile.Close
	iFile.Close
	
	WS.Run sSharedDir &amp; "RequestAndInstall.vbs " &amp; sRequestInfo, 0, True
	
	' Sub
	Function ComputeASN1 (iStrLen) 
	    If Len(Hex(iStrLen)) Mod 2 = 0 then 
	        sLength = Hex(iStrLen) 
	    else 
	        sLength = "0" &amp; Hex(iStrLen) 
	    end if 
	    if iStrLen &gt; 127 then 
	        ComputeASN1 = Hex (128 + (Len(sLength) / 2)) &amp; sLength 
	    else 
	        ComputeASN1 = sLength 
	    End If 
	End Function
	
	'Return the domain role number where:
	'-1 Error
	'0 Standalone Workstation
	'1 Member Workstation
	'2 Standalone Server
	'3 Member Server
	'4 Backup Domain Controller
	'5 Primary Domain Controller 
	Function GetLastDomainRole () 
	    On Error Resume Next
	    strComputer = "."
	    Set objWMIService = GetObject("winmgmts:\\" &amp; strComputer &amp; "\root\cimv2")
	    Set colItems = objWMIService.ExecQuery("Select DomainRole from Win32_ComputerSystem",,48)
	    For Each objItem in colItems
	        iReturn = objItem.DomainRole
	    Next
	    On Error Goto 0
	    GetLastDomainRole = iReturn
	End Function
</source>
  <p>
	Edit or create C:\Shared\Autoenroll\EnrollMachine.vbs
  </p>
<source>
	Set WS = CreateObject("WScript.Shell")
	Set oFilesystem = CreateObject("Scripting.FileSystemObject")
	sRequestInfo = WS.ExpandEnvironmentStrings("%TEMP%") &amp; "\autoenrolled.inf"
	Set oFile = oFilesystem.CreateTextFile(sRequestInfo, True)
	oFile.WriteLine "[Version]" 
	oFile.WriteLine "Signature= " &amp; Chr(34) &amp; "$Windows NT$" &amp; Chr(34) 
	oFile.WriteLine "" 
	oFile.WriteLine "[NewRequest]"
	oFile.WriteLine "Subject = " &amp; Chr(34) &amp; "CN=IgnoredValue" &amp; Chr(34)
	oFile.WriteLine "KeyLength = 2048" 
	oFile.WriteLine "MachineKeySet = TRUE" 
	oFile.WriteLine "RequestType = PKCS10" 
	oFile.WriteLine "" 
	oFile.WriteLine "[RequestAttributes]" 
	oFile.WriteLine "CertificateTemplate = Machine"
	oFile.Close
	
	sSharedDir = oFilesystem.GetParentFolderName(WScript.ScriptFullName) &amp; "\"
	WS.Run sSharedDir &amp; "RequestAndInstall.vbs " &amp; sRequestInfo, 0, True
</source>
  <p>
	Edit or create C:\Shared\Autoenroll\EnrollUser.vbs
  </p>
<source>
	Set WS = CreateObject("WScript.Shell")
	Set oFilesystem = CreateObject("Scripting.FileSystemObject")
	sRequestInfo = WS.ExpandEnvironmentStrings("%TEMP%") &amp; "\autoenrolled.inf"
	Set oFile = oFilesystem.CreateTextFile(sRequestInfo, True)
	oFile.WriteLine "[Version]" 
	oFile.WriteLine "Signature= " &amp; Chr(34) &amp; "$Windows NT$" &amp; Chr(34) 
	oFile.WriteLine "" 
	oFile.WriteLine "[NewRequest]"
	oFile.WriteLine "Subject = " &amp; Chr(34) &amp; "CN=IgnoredValue" &amp; Chr(34)
	oFile.WriteLine "KeyLength = 2048" 
	oFile.WriteLine "RequestType = PKCS10" 
	oFile.WriteLine "" 
	oFile.WriteLine "[RequestAttributes]" 
	oFile.WriteLine "CertificateTemplate = User"
	oFile.Close
	
	sSharedDir = oFilesystem.GetParentFolderName(WScript.ScriptFullName) &amp; "\"
	WS.Run sSharedDir &amp; "RequestAndInstall.vbs " &amp; sRequestInfo, 0, True
</source>
  <p>
	Verify that all the file in Shared\Autoenroll directory has read end exec right for Everyone.
  </p><p>
	Install Certificate Templates by adding the corresponding Snap-in i the MMC console.
  </p><p>
	Install the root CA-certificate(s) in the NTAuthStore, so windows can verify all cerificates produced by EJBCA.
	Start Menu → Administration → Users and Computer → Right click the domain name → Properties → Group Policy →
	Edit Default Domain Policy → Computer Configuration → Windows Settings → Security Settings → Public Key Policies →
	Trusted Root Certificate Authorities → Import → import the root ca certificate and run "gpupdate /force" on
	machines that are used for testing. 
	(You can fetch the CA certificate using the EJCBA CLI with "$EJBCA_HOME/bin/ejbca.sh ca getrootcert AdminCA1 ~/AdminCA1.crt -der".)
  </p><p>
  	Add Startup Scripts in 
	Start Menu → Administration → Users and Computer → Right click the domain name → Properties → Group Policy →
	Edit Default Domain Policy → Computer Configuration → Windows Settings → Scripts → Startup →
	Add the machine-related scripts from the shared directory.
  </p><p>
  	Add Login Scripts in 
	Start Menu → Administration → Users and Computer → Right click the domain name → Properties → Group Policy →
	Edit Default Domain Policy → User Configuration → Windows Settings → Scripts → Logon →
	Add the user-related scripts from the shared directory.
  </p><p>
  	Add the ca-server and shared directory to the Intranet
	Start Menu → Administration → Users and Computer → Right click the domain name → Properties → Group Policy →
	Edit Default Domain Policy → Computer Configuration | User Configuration (do both!!) → Administrative Templates →
	Windows Components → Internet Explorer → Internet Control Page → Security Page →
	Site to Zone assignement list → Enabled and added "https://ca-server.company.local" to zone "1", "\\Dc1\Shared" to zone "1"
  </p><p>
  	Configure clients to synchronize time using NTP:
	Start Menu → Administration → Users and Computer → Right click the domain name → Properties → Group Policy →
	Edit Default Domain Policy → Computer Configuration → Administrative Templates →
	System → Windows Time Service → Time Providers → Configure Windows NTP Client (Add "dc1.company.local" as an NTP server.)
	and Enable Windows NTP Client.
  </p><p>
  	Use "gpupdate /force" on clients before running tests or wait 8h.. =)
  </p>
  </subsection>
  <subsection name="Debugging">
  <p>
  	Well, good luck with Windows error messages.. but you can enable debug
  	("debug=true" in autoenroll.conf) to see the response from the Servlet.
  </p><p>
	Test the machine-cert-retreival script by starting a Console as "LocalSystem". C:\Shared\Autoenroll\ConsoleAsLocalSystem.vbs:
  </p>
<source>
	Set WS = CreateObject("WScript.Shell")
	WS.Run "sc.exe delete lsc", 0, True
	WS.Run "sc.exe create lsc binpath= " &amp; Chr(34) &amp; "cmd /K start" &amp; Chr(34) &amp; " type= own type= interact", 0, True
	WS.Run "sc.exe start lsc", 0, True
</source>
  <p>
	Test the machine-cert-retreival script by starting a Console as "LocalSystem". C:\Shared\ConsoleAsLocalSystem.vbs:
  </p>
<source>
	Set WS = CreateObject("WScript.Shell")
	WS.Run "sc.exe delete lsc", 0, True
	WS.Run "sc.exe create lsc binpath= " &amp; Chr(34) &amp; "cmd /K start" &amp; Chr(34) &amp; " type= own type= interact", 0, True
	WS.Run "sc.exe start lsc", 0, True
</source>
  <p>
	Adding a custom Administrative template can be done as in this example if needed:
	Start Menu → Administration → Users and Computer → Right click the domain name → Properties → Group Policy →
	Edit Default Domain Policy → Computer Configuration → Administrative Templates → Add/Remove Templates → Add Autoenroll.adm
  </p>
  <p>
	This is just a sample, but shows how a custom GP can be configured.. (<b>Use the intructions above instead of this template.</b>
	The example Administrative Template "Autoenroll Related" can be used to force ca-server.company.local
	into the Intranet zone or add a NTP syncronizing policy. C:\Shared\Autoenroll\Autoenroll.adm:
  </p>
<source>
CLASS MACHINE

CATEGORY "Autoenroll Related"
    CATEGORY "NTP Synch for clients with AD"
     POLICY "Enable NTP synch"
      SUPPORTED "This is a hack to get WinXP clients working"
      EXPLAIN ".."
      KEYNAME "Software\Policies\Microsoft\W32Time\TimeProviders"
      VALUENAME "NtpServer"
      VALUEON NUMERIC 1
      VALUEOFF NUMERIC 0

       ACTIONLISTON
        KEYNAME "Software\Policies\Microsoft\W32Time\Parameters"
        VALUENAME "Type"
        VALUE "NTP"
       
        KEYNAME "Software\Policies\Microsoft\W32Time\Config"
        VALUENAME "AnnounceFlags"
        VALUE NUMERIC 5
        
        KEYNAME "Software\Policies\Microsoft\W32Time\Config"
        VALUENAME "MaxPosPhaseCorrection"
        VALUE NUMERIC 1099511627775
        
        KEYNAME "Software\Policies\Microsoft\W32Time\Config"
        VALUENAME "MaxNegPhaseCorrection"
        VALUE NUMERIC 1099511627775
       END ACTIONLISTON

      PART "NTP Servers in the form ntp.server1.com,0x1 ntp.server2.com,0x1 ntp.server3.com,0x1" EDITTEXT
       KEYNAME "Software\Policies\Microsoft\W32Time\Parameters"
       VALUENAME "NtpServer"
       MAXLEN 4096
      END PART

      PART "Poll interval in seconds" NUMERIC
        KEYNAME "Software\Policies\Microsoft\W32Time\TimeProviders\NtpClient"
        VALUENAME "SpecialPollInterval"
        DEFAULT 900
      END PART
     END POLICY
    END CATEGORY

    CATEGORY "Required trust"
     POLICY "Trust ca-server.company.local"
      SUPPORTED "Might need IE6 for this to work.."
      EXPLAIN "This adds the ca-server.company.local to the list of intranet-sites.."
      KEYNAME "Software\Policies\Microsoft\Windows\CurrentVersion\Internet Settings\ZoneMap\Domains\company.local\ca-server"
      VALUENAME "https"
      VALUEON NUMERIC 1
      VALUEOFF NUMERIC 0     
     END POLICY
    END CATEGORY
END CATEGORY 

CLASS USER

CATEGORY "Autoenroll Related"
    CATEGORY "Required trust"
     POLICY "Trust ca-server.company.local"
      SUPPORTED "Might need IE6 for this to work.."
      EXPLAIN "This adds the ca-server.company.local to the list of intranet-sites.."
      KEYNAME "Software\Policies\Microsoft\Windows\CurrentVersion\Internet Settings\ZoneMap\Domains\company.local\ca-server"
      VALUENAME "https"
      VALUEON NUMERIC 1
      VALUEOFF NUMERIC 0     
     END POLICY
    END CATEGORY
END CATEGORY
</source>
  <p>
	Useful reg-for VMwares with runaway clocks if GP mod didn't work or you just want to modify a single client.
  </p>
<source>
Windows Registry Editor Version 5.00

[HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\W32Time\Config]
"AnnounceFlags"=dword:00000005
"MaxPosPhaseCorrection"=dword:ffffffff
"MaxNegPhaseCorrection"=dword:ffffffff

[HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\W32Time\Parameters]
"Type"="NTP"
"NtpServer"="dc1.company.local,0x1"

[HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\W32Time\Parameters\NtpServer]
"NtpServer"="dc1.company.local,0x1"

[HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\W32Time\TimeProviders\NtpClient]
"SpecialPollInterval"=dword:00000030

[HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\W32Time\TimeProviders\NtpServer]
"Enabled"=dword:00000001
</source>
  </subsection>
  <subsection name="References">
  <ul>
  	<li>Kerberos authentication on Apache2, <a href="http://www.grolmsnet.de/kerbtut/">http://www.grolmsnet.de/kerbtut/</a></li>
  	<li>MS Certificate requests, <a href="http://technet2.microsoft.com/WindowsServer/en/library/008acdeb-0650-4063-a9a2-1258b3229d4f1033.mspx">http://technet2.microsoft.com/WindowsServer/en/library/008acdeb-0650-4063-a9a2-1258b3229d4f1033.mspx</a></li>
  	<li>Requirements for Domain Controller Certificates from a Third-Party CA, <a href="http://support.microsoft.com/kb/291010">http://support.microsoft.com/kb/291010</a></li>
  </ul>
  <p>Other auto enroll references</p>
  <ul>
  <li>ICertPassage remote protocol, <a href="http://msdn.microsoft.com/en-us/library/cc233162.aspx">http://msdn.microsoft.com/en-us/library/cc233162.aspx</a></li>
  <li>Windows Client Certificate Enrollment Protocol, <a href="http://msdn.microsoft.com/en-us/library/cc249820.aspx">http://msdn.microsoft.com/en-us/library/cc249820.aspx</a></li>
  <li>RedHat auto enroll proxy, <a href="http://directory.fedoraproject.org/wiki/Auto_Enroll_Documentation">http://directory.fedoraproject.org/wiki/Auto_Enroll_Documentation</a></li>
  </ul>
  </subsection>
  </section>  

  <section name="EJBCA with GemSAFE Toolbox">
    <p>
    This is a very thorough guide with screen-shots of how to setup EJBCA 3.6.0
    with GemSAFE Toolbox in a windows environment for smartcard logon, email signing,
    email encryption and SSL services.
    </p>
    <p>
    The guide is divided into three PDF-files:
    <ul>
    <li><a href="gemsafe/EJBCA_with_GemSAFE_Toolbox_Part1_workstation_logon.pdf">Smartcard Logon</a></li>
    <li><a href="gemsafe/EJBCA_with_GemSAFE_Toolbox_Part2_sign_and_encrypt_email.pdf">Sign and enrypt email</a></li>
    <li><a href="gemsafe/EJBCA_with_GemSAFE_Toolbox_Part3_SSL.pdf">SSL services</a></li>
	</ul>
	</p>
  </section>
  
</body>
</document>

