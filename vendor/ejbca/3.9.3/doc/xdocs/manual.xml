<?xml version="1.0"?>
<document>
  <properties>
    <title>User Guide</title>
  </properties>
<body>

<section name="About and Installation">
<p>
Information how to install EJBCA can be found in the Installation guide.</p>
<p>
Please read the <a href="installation.html">Installation</a> guide before setting up EJBCA.
</p></section>

<section name="Misc information">
<subsection name="Administrative tutorials">
<p>
There are additional documentation and administrative tutorial movies at <a href="http://wiki.ejbca.org/">http://wiki.ejbca.org/</a>.
</p>
</subsection>
<subsection name="Administrating EJBCA">
<p>
You can administer EJBCA using a web browser and the admin-GUI, this is the easiest way. 
The admin-GUI requires SSL with authentication using client certificate, i.e. strong authentication.
</p><p>
You can also use the command line interface (cli) which is called by 'bin/ejbca.sh'. 
If you call ejbca.sh you get a list of available commands, and you can get help for all commands by calling
them without arguments, i.e:
</p>
<source>
bin/ejbca.sh ca
bin/ejbca.sh ra adduser
etc etc
</source>
</subsection>
<subsection name="EJBCA client toolbox">
<p>
There are also a set of different tools that could be used without an EJBCA.
</p><p>
Build these tools with:
</p><source>
ant clientToolBox
</source><p>
The directory './clientToolBox-dist' is then created. You may then move this directory to any location.
</p><p>
To use any of the tools just call 'ejbcaClientToolBox.sh' in this directory. You may call the script from any location.
</p><p>
If you put the directory in your PATH then you just have to write 'ejbcaClientToolBox.sh' to call it.
</p><p>
If you call the script without any arguments you get a list of all valid first arguments which specifies the tool to use. Example:
</p><source>
ejbcaClientToolBox.sh
</source><p>
Then just one argument gives help about the specified tool. Example:
</p><source>
ejbcaClientToolBox.sh ocsp
</source>
</subsection>
<subsection name="Backup and restore of EJBCA">
<p>
To backup an EJBCA installation you need to:
<ul>
<li>Backup the database</li>
<li>Backup all $EJBCA_HOME/conf/**</li>
<li>Backup all $EJBCA_HOME/p12/**</li>
</ul>

To restore:
<ul>
<li>Restore database</li>
<lI>Unzip new EJBCA</lI>
<li>Restore conf and p12</li>
<li>Run "ant deploy" to configure JBoss and deploy EJBCA. If you are using another application server, consult the Installation doc for deployment.</li>
</ul>
</p>
<p>
If you are using soft keystores for the CAs this is all that is needed. If you are using an HSM you need to backup your keys in the 
HSM as well. How this backup and restore is done depends on the HSM you are using. Consult the documentation for your HSM.
</p>
</subsection>
<subsection name="SSL certificate expire">
<p>
The SSL certificate used for SSL in JBoss (SSL is used for the admin-GUI) is stored in APPSRV_HOME/server/default/conf/keystore.jks.
The default validity time for the SSL certificate is two years. When this expire, you must generate a new one. 
</p><p>
You can do this through the admin-GUI by:
<ol>
<li>Go to 'List/Edit End Entities' and search for user 'tomcat'.</li>
<li>'Edit_End_Entity' and set the 'Password' to the same as httpsserver.password in your conf/ejbca.properties and 'Status' to 'New'.</li>
<li>Open up a command line in EJBCA_HOME and run 'bin/ejbca.sh batch'.</li>
<li>Copy EJBCA_HOME/p12/tomcat.jks to APPSRV_HOME/server/default/conf/keystore.jks, or run 'ant deploy'. Ant deploy will do some other things as well, so if you are not sure, just copy the file.</li>
<li>Restart JBoss.</li>
</ol>
</p>
<p>
You can also do everything using the CLI:
<ol>
<li>bin/ejbca.sh ra setuserstatus tomcat 10</li>
<li>bin/ejbca.sh ra setclearpwd tomcat &lt;password from httpsserver.password&gt;</li>
<li>bin/ejbca.sh batch</li>
<li>cp p12/tomcat.jks $APPSRV_HOME/server/default/conf/keystore.jks</li>
<li>Restart JBoss.</li>
</ol>
</p>
</subsection>
<subsection name="Creating more CAs">
<p>
After installation, that creates a default admin CA
you can create more CAs using the admin GUI.
</p><p>
Your CAs can be either root CAs, subordinate CAs to another CA in EJBCA 
or subordinate CAs to an external CA. The initial admin CA is a RootCA.
</p><p>
You can also use the command line interface (cli) 
'bin/ejbca.sh ca init' to create new CAs, although a better idea is to do it from the Admin GUI.
Ex: 'bin/ejbca.sh ca init TestRoot "C=SE,O=PrimeKey,CN=EJBCA" 2048 365 2.5.29.32.0' 
will create a root CA with the DN 'C=SE,O=PrimeKey,CN=EJBCA'. The
keylength is
 2048 bit (RSA) and the validity of the root certificate is 365
 days. Quote the DN  so it is treated as one argument.
</p><p>
PKIX requires that a CRL always is available even if it is
empty. When creating a new CA the CA certificate is stored
and published (if any Publishers are configured), and the initial CRL is created 
and stored/published.
</p><p>
Subordinate CAs are created using the admin GUI, you can not use the 
cli for that.
</p>
</subsection> 
<subsection name="Creating a SubCA signed by an external CA">
<p>
Some CA hierarchies have the requirement of being signed by an external Certificate Authorities and sometimes other external CA:s need to be signed by your CA.
</p>
<p>
When creating a CA that is signed by an external CA, you actually create a PKCS10 certificate request
that is sent to the external CA. When the external CA returns your CAs certificate, this is processed and
the CA becomes activated.
</p>
<p>
In order to have your CA signed by an external CA you have to go through the following steps.
<ol>
<li>Go the the 'Edit Certificate Authorities' page in the Administration GUI.</li>
<li>Create a new CA in the same way as internal CA:s. But when selecting signing CA, select 'External CA' instead. Now will the 'Certificate Profile', 'Validity', 'Subject Alternative Name' and 'Policy Id' 
fields become gray and not editable. Fill in the Description and CRL Specific data and click on the 'Make Certificate Request' 
button in the bottom of the page.</li>
<li>At the next page called 'Make Certificate Request' you can upload the external CA certificate chain that you want to sign your CA certificate with, or you can wait until later by checking 'No CA chain file available'.  
This file should be in PEM encoding. If there is more than one top CA certificate then should all their certificates be appended into one single file. 
It should be in plain PEM format without blank lines before or after. An example is below.</li>
<li>Next, after clicking 'Make Certificate Request' and if everything went successful, should the generated PKCS10 certificate request be displayed that you can copy and paste to the signing CA. There is also the option to download the PEM file if that approach is preferred.</li>
<li>Now should the signing external CA sign the certificate request and return a certificate. Meanwhile will the newly created CA have a status of 'Waiting for Certificate Response' and will not appear anywhere in the system except in the 'Edit CA' page until it's activated.</li>
<li>When the Certificate Response has arrived, it is time to activate the new CA. You mark the waiting CA and click on 'Edit' button in the 'Edit CA' page. Go to the bottom of the page and click on 'Receive Certificate Response'. Then upload the received certificate and click again on 'Receive Certificate Response'.</li>
<li>Now if the received certificate creates a valid certificate chain with the previously uploaded top CA certificates will the status of the CA be set to 'Active'.</li>
<li>If you did no upload a certificate chain when the request was created, you can do so now by uploading the complete PEM formatted chain now. The CAs own certificate should be first in the file, followed by the issuing CAs certificate(s). 
When uploading a chain, the certificates must be converted to PEM format if it isn't already so. This can be accomplished with OpenSSL among other tools with the following command if you have received a file in DER encoding (.cer ending):<br/>
&gt;openssl x509 -inform DER -in filename.cer -outform PEM -out filename.pem</li> 
<li>Observe if you want to activate OCSP functionality for this new CA you have to edit it once again and mark the OCSP functionality as active.</li>
<li>The new externally signed CA is ready to use.</li>
</ol>
</p>
<p>Example of a plain PEM file for uploading as a certificate chain:
</p>
<source>
-----BEGIN CERTIFICATE-----
MIIDSjCCAjKgAwIBAgIIEvabM2CgLZcwDQYJKoZIhvcNAQEFBQAwMzETMBEGA1UE
AxMKV2FsdGVyIENBMTEPMA0GA1UEChMGV2FsdGVyMQswCQYDVQQGEwJTRTAeFw0w
MzA5MjkwOTI2MzRaFw0wNDA5MjgwOTM2MzRaMDMxEzARBgNVBAMTCldhbHRlciBD
QTExDzANBgNVBAoTBldhbHRlcjELMAkGA1UEBhMCU0UwggEgMA0GCSqGSIb3DQEB
AQUAA4IBDQAwggEIAoIBAQC3hXksEud68WwPWWHLJQQkTCuX/K32KHPPn/uPUzab
Cpc/FnaTmF9yEHmpFdAUr0v5ZPnxVQpcuwrDZc4YfaTLfyUHicQbkftsPAj/2hE4
UukS2j+nQQcJEnIY0vSZOAOLU3j4bf/RlS6Jl7TPFFfWTxuQF8AruQ+YhaE52JFi
SapGGXKQJxhsvKT91rLaWSFWNMTTLSDPaBXYEYFuFhLNclDJWf4whfxHSHHkARB/
3Z0XlT4sFj0fmqEQ6yQb6/WqMFK+1XAIBXZO2MXe26IigWkXw1GfkIx1+fbUPrzu
8EI2jb0TWl21j1+Mvh3APZtVj5FJNuZN9bgdbrq88hLXAgERo2QwYjAPBgNVHRMB
Af8EBTADAQH/MA8GA1UdDwEB/wQFAwMHBgAwHQYDVR0OBBYEFNhHOtAwo8MOE/nI
zzg9KFxCYs8YMB8GA1UdIwQYMBaAFNhHOtAwo8MOE/nIzzg9KFxCYs8YMA0GCSqG
Sib3DQEBBQUAA4IBAQBHpvicbuJTACtpdwe6cF1nQ57FHnnYr+aAe+ZpH43R6R9d
eMps02nFAMSs5o8sbPokrpwAtk2yYwCohEFDkZ5JPzIBkgNlNnVHNNRHQTRJ6v6Q
F2MWUEPc1u5kxSjXEVMmZerG9oknMwpYFmkOnKF46vP3Njt/ExOeRAvCEQq2b8pz
2QGg8/IK6Omfi7IwxtVYUpgvhdcWekbFIlxkXZiEdlHNBIV1GzzPK1VEzg5kugD/
h6jeykrsKASx+55AkkBPt2kI+ZikVtp3SVhfZQMGY86c5QMQGlPWYNsr4ociyhfX
I52Qby+/HNG1ijpx66Z30lUMmXTtWtL4Cu8s7UvC
-----END CERTIFICATE-----
-----BEGIN CERTIFICATE-----
MIICxzCCAa+gAwIBAgIIBfqGjbQu14swDQYJKoZIhvcNAQEFBQAwMzETMBEGA1UE
AxMKV2FsdGVyIENBMTEPMA0GA1UEChMGV2FsdGVyMQswCQYDVQQGEwJTRTAeFw0w
MzA5MjkwOTMzMDFaFw0wNDAxMDcwOTQzMDFaMDQxETAPBgNVBAMTCER1ZGUgQ0Ex
MRIwEAYDVQQKEwlEdWRlIEluYy4xCzAJBgNVBAYTAlNFMIGdMA0GCSqGSIb3DQEB
AQUAA4GLADCBhwKBgQCM1hR/DYPXfKDa3oVJbppV4OcYtn2XP9W5Kc1d0+U4qLOm
JsqIFHDWR07o1QFiPhc9z0UGtwYeE3CpQ8fG8zeur5e286PYptZIST77B9vOdQdl
PA+dFKFIaEwdzcS7H3Lf38WTE4D1OnyRX5jsiUe+YIQRtjv/Bmem+kSR84G9TwIB
EaNkMGIwDwYDVR0TAQH/BAUwAwEB/zAPBgNVHQ8BAf8EBQMDBwYAMB0GA1UdDgQW
BBTDrXZGYXS9GyIUBOZrglhwNjjcnTAfBgNVHSMEGDAWgBTYRzrQMKPDDhP5yM84
PshcQmLPGDANBgkqhkiG9w0BAQUFAAOCAQEAdmTP1qVUcAKOf+/zvb2lcLKvFwKT
6KqDlO5NofjqCIfNgCjO2mO176cslnFIbEZQqgGIUnJ3AwfHKHj+U3kM3n5T29kF
xiLKxIDfjsY6qC03KHeGAgxI92XZyPsO1is6Y6qUnAmiwhIp5HS6E0+xIP1shmtJ
ZvqU8bueKUWSjx3JDzq+UNLX5pFkK0P0R90TCUEkBx1FNWqoWwb8zfAuO5zcNTEj
5E9esLjwxJQnIVPiA2l3FfZN9yomK+q7kTZJkX2kMx7G850lPR8CneXZT6bIOfck
Dw3PqQiroMNx2+gzC/f/wTXsF92aujyG+IZx1FIcNg/MoHXBWG7T8YrjnQ==
-----END CERTIFICATE-----
</source>
<p>
You can treat an internal CA, i.e. a CA residing on the same EJBCA instance as another CA, as an external CA. 
From the SubCA this works just like the normal case, but on the RootCA you must choose the exact same CA Name as
the already existing internal CA when you choose to "Process Certificate Request".  
<br/>
This can be useful if you have an HSM setup where only one set of keys can be active at one time, for example using nCipher with
two different, non-persistence, operator cards sets for the RootCA and the SubCA. Using the SubCA as an external CA you can still create
the PKI but with only one CA active at a time.
</p>
</subsection> 
<subsection name="Signing an External CA">
<p>
In some cases you might want to have one of your CA:s signing another external CA. This is done in the following way:
<ol>
<li>In the 'Edit CA' page, choose a CA name of the external CA you are about to sign and click on 'Process Certificate Request'.</li>
<li>Then you are requested to upload the certificate request sent from the external CA. This should be a file in PEM-encoding.</li>
<li>The next step is to fill in the data about the CA certificate you are about to create. This is very similar to when you are creating an internal CA but with a fewer fields. The Subject DN is taken from the request. But the signing CA, certificate profile, validity, subject alt name and policy id have to filled in manually.</li>
<li>After clicking 'Process Certificate Request' the certificate is created and displayed in PEM format. You can also download it as a regular PEM file or as a PKCS7 PEM file.</li>
<li>Send the processed certificate back to the external CA for activation.</li>
<li>In the 'Edit CA' page will the newly processed CA be displayed with the status 'External'. This processed CA will only be shown in the 'Edit CA' pages and nowhere else since the system cannot use it. If you want to view the processed certificate, go to the edit page and click on the 'View CA Certificate' link in the bottom of the page.</li>
</ol>
</p>
</subsection>
<subsection name="Requesting a cross or bridge certificate">
<p>
If you have set up your own CA you can request another CA to cross certify your CA, or you can get certified by Bridge CA such as the Federal Bridge. This is done in the following way:
<ol>
<li>In the 'Edit CA' page, choose a CA name of the external CA you are about to sign and click on 'Edit'.</li>
<li>In the lower part of the screen, click on 'Make Certificate Request'.</li>
<li>Now check 'No CA chain file available' and click 'Make Certificate Request'.</li>
<li>Save the created PKCS#10 certificate request to disc and send to the other CA.</li>
</ol>
</p>
<p>Now you have a certificate request to send to the other CA or bridge CA. When the other CA have issued a certificate for you, everything is completed.
You don't need to (and you can't) import the cross-certificate or bridge-certificate in EJBCA. What you need to do is make sure the clients using the certificates issued by your CA
have access to the correct certificate chain. If you are cross-certified with several other CA, multiple possible certificate chains exist.
<br/>Handling the certificate chains on clients is out of the scope for EJBCA.
</p> 
</subsection>
<subsection name="Converting an OpenSSL CA">
<p>
You can convert a PEM-style Root CA key to a PKCS12 file that can be imported in EJBCA.
</p>
<source>
openssl pkcs12 -export -out server1.p12 -inkey cakey.pem -in ca.pem -name privateKey
</source>
<p>
You can import the CA with the Admin GUI or the cli. See the section 'Export and import CAs'.
<br/>
After importing CAs you can also import users and certificates. See the section 'Import users'. 
</p></subsection>
</section>

<section name="Using EJBCA">

<subsection name="Creating Users">
<p>
Users are added in the admin-GUI, 'Add End Entity' or with the cli
'bin/ejbca.sh ra adduser'.
The users DN is normally entered in the cli as "C=SE,O=MyOrg,OU=MyOrgUnit,CN=MyName".
If a ',' is needed in the DN the comma must be escaped using '\,'.
</p></subsection>

<subsection name="Create User certificates">
<p>
To enroll for a certificate using a browser, go to http://your_server_name:servlet_container_port/ejbca/
(e.g. http://127.0.0.1:8080/ejbca/) and select &quot;Create Browser Certificate&quot;.
Enter username and password, click the &quot;OK&quot;-button and follow the instructions.
</p><p>
To enroll for certificates manually (e.g. for server certificates), go to
http://your_server_name:servlet_container_port/ejbca/, select
&quot;Create Server Certificate&quot; and fill out the form.
</p><p>
Note that application for certificates only work when the status of a user is
NEW, FAILED or INPROCESS (one time password thing). The
status is set to
GENERATED after a certificate has been issued. To issue a new
certificate, the
status must be reset to NEW, which can be done through
the admin-GUI or the cli.
</p><p>
During batch generation of certificates, users with status NEW
or FAILED are
generated. This is due to the possibility that a batch generation for some
reason failed. If it fails status is set to FAILED and you can try again after fixing the
error.
</p></subsection>

<subsection name="Create server certificates">
<p>
The best way to create server certificates is to generate a
PKCS12, JKS or PEM file for the server, depending on what server it is.
To do this:
<ol>
<li>
Create desired profiles (the default entity and certificate profiles work fine, but are perhaps too generic).
You certificate profile should have:<br/> 
- KeyUsage: <i>Digital signature, Key encipherment</i><br/>
- Extended key usage: <i>Server Authentication</i><br/>
</li>
<li>Create a user with the admin-GUI or 'bin/ejbca.sh ra'. 
<br/>The Distinguished name (DN) of the server should have the
the servers full hostname (host.domain.com) in the CommonName (CN) field.
<br/>Example DN for webserver: "C=SE,O=AnaTom,CN=
www.anatom.se", or
for mailserver "C=SE,O=AnaTom,OU=Engineering,CN=mail.anatom.se". 
<br/>You can also put the same name (or several names) as a DNSName in SubjectAlternativeNames. 
<br/>For so-called wildcard certificates, use *.anatom.se.
<br/>Set the token type to match the kind of token that should be generated for your server.
</li>
<li>To be able to batch-generate certificates, the batch
generation program must have access to the users (servers) password in order to request
a certificate on behalf of the user. Normally the password is stored in hashed
form, so the password must be stored in clear text form by running
'bin/ejbca.sh ra setclearpwd <i>username password</i>'
</li>
<li>Generate private keys and certificates by running 'bin/ejbca.sh batch'
</li>
</ol>
</p><p>
Many servers (ex Apache, Tomcat) wants keys and certificates
in PEM-format (Apache) or SUN JKS (Tomcat).
To generate PEM-files use token type PEM. The PEM-files will be stored in a
separate subdirectory, 'pem'. The generated PEM-files can be used with
Apache etc, and are NOT protected by any password.
To generate JKS-files use token type JKS. The JKS-files will be stored in the
subdirectory, 'p12' instead of PKCS12-files. The generated JKS-
files can be used with Tomcat etc, and are protected (both private key password
and keystore password) by the users password.
</p>
<p>
If the server generates the keys and a certificate request (CSR) for you, select token type "User generated".
You can use the public enrollment web pages (http://127.0.0.1:8080/ejbca/) to paste the request and receive the certificate.
This function is under "Certificate Enrollment->manually for a server".
</p>
<p>
It is also possible to use openssl to transform a PKCS12 file to PEM-
format.
</p>
<source>
openssl pkcs12 -in pkcs12-file -nodes
</source>
<p>
copy and paste the private key to key file, the first certificate to
server cert file and last certificate to CA cert file (If your CA is a
subordinate CA to another Root CA, the CA cert file may need to contain the whole cert
chain). Exactly how your server wants the files is server dependent.
</p>
<p>
For your convenience, here is the standard text (RFC2818) how browsers validate the name(s) in the certificate.
</p>
<source>
If a subjectAltName extension of type dNSName is present, that MUST
be used as the identity. Otherwise, the (most specific) Common Name
field in the Subject field of the certificate MUST be used. Although
the use of the Common Name is existing practice, it is deprecated and
Certification Authorities are encouraged to use the dNSName instead.

Matching is performed using the matching rules specified by
[RFC2459].  If more than one identity of a given type is present in
the certificate (e.g., more than one dNSName name, a match in any one
of the set is considered acceptable.) Names may contain the wildcard
character * which is considered to match any single domain name
component or component fragment. E.g., *.a.com matches foo.a.com but
not bar.foo.a.com. f*.com matches foo.com but not bar.com.

In some cases, the URI is specified as an IP address rather than a
hostname. In this case, the iPAddress subjectAltName must be present
in the certificate and must exactly match the IP in the URI.
</source>
</subsection>
<subsection name="Request Browser Certificate Renewal">
<p>
	If renewal is enabled there is an extra link under "Enroll" on 
	the public web page called "Request Browser Certificate Renewal". The
	page requires authentication with a client certificate and makes it 
	possible for the user to request the certificate to be renewed. 
</p>
<p>
	The renewal functionality is provided in a separate web module called 
	renew.war which is not deployed and linked to by default. It can be 
	enabled in conf/web.properties by setting web.renewalenabled=true and 
	then (re-)deploy EJBCA. 
</p>
</subsection>
<subsection name="Administrators">
<p>
An EJBCA Administrator is identified by information in the client SSL
certificate. The information is validated in the following steps:
<ol>
<li>During the SSL handshake with the application server, the issuer of the
client certificate is verified with a list of trusted CA certificates known as
the 'truststore'.</li>
<li>EJBCA verfies that the client certificate exists in the database and that
it's not revoked. (Configurable in web.properties.)</li>
<li>EJBCA tries to match the information in the certificate with any of the
matching criterias found in the different administrator groups. Matching rules
are evaluated separately so matching with both CN and OU would match all CN
matched certificates and also all OU matched certificates.</li>
<li>If a match is found, the access rules for this group is given to the
administrator.</li>
</ol>
</p><p>
Administrator privileges is configured through "Edit Administrator
Privileges" in the Admin GUI or by using the CLI. If you have locked yourself
out of the GUI, the CLI can add another admin certificate to allow continued
operations.
</p><p>
To use a certificate issued by an external CA as Administrator:
<ol>
<li>Add the CA-certificate to p12/truststore.jks with "keytool -import
-trustcacerts -file externalca.pem -keystore p12/truststore.jks -storepass
changeit -alias externalca"</li>
<li>Redeploy EJBCA (ant deploy) and restart the application server to make sure the new
truststore is in use</li>
<li>Import the CA-certificate under "Admin GUI - Edit Certificate Authorities
 - Import CA Certificate.." or use the CLI</li>
<li>Add the Administrator to the desired Administrator group under "Admin GUI
 - Edit Administrator Privileges"</li>
</ol>
</p>
</subsection>
</section>

<section name="Admin GUI overview page">
<p>
The first page of the admin GUI can display status information for the publish 
queue and the CA. Which of those that should be displayed can be configured in 
My Preferences.
</p>
<subsection name="Publish queue status">
<p>
The publish queue status shows the current number of publish events that is stored in the publisher queue.
Events can be stored in the publisher queue either because publishing failed, or because publishing goes to 
the queue directly. 
<br/>See also <a href="#Publisher Queue and failures">Publisher Queue and failures</a>.
</p>
</subsection>
<subsection name="CA Status">
<p>The CA status overview shows ok or error if CAs are off line and if CRLs are not valid.
<br/>
CA Status shows a red error if the CA is not on-line or the CA token is not in line. External CAs are always show as ok.
<br/>
CRL status show a red error is a CRL or delta CRL has expired without a new one being created. Delta CRLs are only monitored if used.
</p>
</subsection>
</section>

<section name="Certificate- and EndEntity Profiles">
<p>
CertificateProfiles define different types of certificates, with 
regards to DN-contents, extensions etc. We also have 
EndEntityProfiles, where users are grouped, and you can determine 
which parts of their DN that is already pre-set, and which can be 
altered etc. 
</p><p>
An EndEntityProfile can be connected to specific CertificateProfiles 
so users belonging to a specific EndEntityProfile can only get 
certificates from the specified CertificateProfile.
</p>
</section>

<section name="Certificate profiles">
<subsection name="Validity">
<p>
The validity determines the validity in days of certificates from the time the certificate is issued.
The field 'notAfter' in the issued certificate will have the value 'now + validity days'.
It can also, if noted in the field, be entered in terms of years, months and days. For instance '10y 9mo 8d' is translated to 
10 years, 9 months and 8 days from now.
Instead of the validity period an absolute end date could specify the end of the validity period. This date should be given in
the default locale for the jvm.
</p><p>
<strong>Allow validity override</strong><br/>
The check box 'Allow Validity Override' will make it possible to request a specific notAfter date. This is currently possible when using CMP (the CRMF request format), or when using the API to issue certificates.
</p><p>
The validity of a certificate is determined as follows:
<ul>
<li>The Validity field in the profile specifies the maximum allowed validity, which will be the validity if nothing else is specified.</li>
<li>If 'Allow validity override' is enabled in the profile the profile value can be overridden with:
<ul><li>Start and end time specified when adding the end entity, of allowed in the End Entity Profile.</li>
<li>Requested validity from the certificate request (CMP for example).</li>
</ul>
</li>
</ul>
<p>There are some constraints for the validity of a certificate issued by the CA:
<ul>
<li>The notAfter time of issued certificates can never be longer than the validity time specified in the certificate profile used.</li>
<li>The notAfter time of issued certificate can never be longer than the CAs own validity.</li>
<li>notAfter can never be before nofBefore and vice versa.</li>
<li>notBefore is normally 10 minutes before the current time, to avoid problems with clocks that are a few minutes out of sync.</li>
<li>notBefore can be set to any desired value if allow validity override is enabled, except for the limitation with regard to notAfter.</li>
<li>notAfter can be set to any desired value if allow validity override is enabled, except for the limitation of max and min value specified above.</li>
</ul>
</p>
</p>
<p>If the validity is for a CA the certificate profile specifies the maximum validity, but it can be shorter if specified when adding the CA.
The validity of the CA can never be longer than the value specified in the profile.
</p>
<p>
The last option you have is to set a global maximum validity date for certificates issued from the EJBCA instance. You can do this by setting the option 'ca.toolateexpiredate'
in ejbca.properties. See the documentation in conf/ejbca.properties.sample for more details. If a validity period would exceed this value, if it is configured, an error occurs and no certificate is issued. 
</p>
</subsection>
<subsection name="Allow extension override">
<p>
If extension override is allowed, the X509 certificate extension created in a certificate can come from the request 
sent by the user. If the request contains an extension than that will be used instead of the one defined in the profile.
If the request does not contain an extension, the one defined in the profile will be used.
</p>
<p>
This option should only be used when you know that the request comes from a very trusted source. Such a trusted source is  
normally an RA through CMP or webservice.
</p>
<p>
Currently (EJBCA 3.9) this only works for extensions in CRMF (CMP) requests.
</p>
</subsection>
<subsection name="Allow subject DN override">
<p>
If subject DN override is allowed, the X509 subject DN extension created in a certificate can come directly from the 
request sent by the user. This is instead of the normal way where the user's registered DN is used.
<br/>
Using this option certificates with very strange DNs, or with DNs in very specific orders can be created.
</p>
<p>
This option should only be used when you know that the request comes from a very trusted source. Such a trusted source is  
normally an RA through CMP or webservice.
</p>
</subsection>
<subsection name="Path Length Constraints">
<p>
Note: this extension is only applicable for immediate CA certificates
and it sets how deep the succeeding certificate hierarchy may be.
If it is set to 0 this CA certificate is the last CA in a chain and only end entity certificates may follow.
<br/>From RFC5280 (4.2.1.9):</p>
<source>
The pathLenConstraint field is meaningful only if the cA boolean is asserted and the key usage extension, if present, asserts the
keyCertSign bit (Section 4.2.1.3). In this case, it gives the maximum number of non-self-issued intermediate certificates that may
follow this certificate in a valid certification path. (Note: The last certificate in the certification path is not an intermediate
certificate, and is not included in this limit. Usually, the last certificate is an end entity certificate, but it can be a CA
certificate.) A pathLenConstraint of zero indicates that no non self-issued intermediate CA certificates may follow in a valid
certification path. Where it appears, the pathLenConstraint field MUST be greater than or equal to zero. Where pathLenConstraint does
not appear, no limit is imposed.   
</source>
</subsection>
<subsection name="Use LDAP DN order">
<p>
In a certificate the order of the CN components can be put in different order depending on wich standard you abide to.
<br/>
<ul>
<li>Ldap DN order: CN=Common Name, O=Organization, C=Country</li>
<li>X.500 DN order: C=Country, O=Organization, CN=Common name</li>
</ul>
In theory the order of the DN should not matter, because comparisons between DNs should be done on the RDN level. 
In practice DN comparisons is often done using string comparisons, where the string value is depending on the order.
</p>
<p> 
For historical reasons EJBCA uses Ldap DN order. Some applications do require X.500 DN order however and therefore EJBCA gives you the choice.
There are two places in EJBCA where this can be configured:
<ul>
<li>In the Certificate profile (Edit certificate profiles)</li>
<li>In the CA configuration (Edit Certificate Authorities)</li>
</ul>
The relationship between the settings is that they are both evaluated in an OR expression. 
This means that if both are true the DN will have Ldap DN order, but if any one of them is false the DN will have X.500 order.
</p>
</subsection>
<subsection name="Extended Key Usage">
<p>
The meaning of Extended key usage is defined in RFC5280. Normally the values specified in the fixed certificate profiles
are good for the usage the fixed profile is for. 
</p>
<p>
You can define your own extended key usages very simple. Edit the file EJBCA_HOME/conf/extendedkeyusage.properties and add your custom 
extended key usages in the end. Be sure to follow the numbering. 
After editing the file, simply build and re-deploy EJBCA (ant clean; ant bootstrap).
</p>
</subsection>
<subsection name="Cardnumber">
<p>
Select this if you want to use the SEIS Cardnumber Extension. The card number is a unique identifier stored in the certificate and should also be printed on top of the card on which the certificate is stored.
When used, the card number needs to be set for the end entity before creating a certificate.
The extension is specified in the the Seis document  SS 614331 chapter 4.3 and has OID 1.2.752.34.2.1.
</p>
</subsection>
</section>

<section name="End Entity profiles">
<subsection name="Subject Alternative Names">
<p>Subject alternative names (altNames) are extra naming items that are not fit to have in the Distinguished Name, such as email, dns, ip address etc.
There are a number of standard ones, and the possibility to define special ones, which many companies have done for altNames
such as MS UPN, GUID, Krb5PrincipalName.
</p>
<p>
Subject alternative names can be: rfc822Name=&lt;email>, dNSName=&lt;host name>, uri=&lt;http://host.com/>, ipaddress=&lt;address>, upn=&lt;MS UPN>, guid=&lt;MS globally unique id>, directoryName=&lt;LDAP escaped DN>, krb5principal=&lt;Krb5 principal name>
</p>
<subsubsection name="IP address">
<p>An IP address can be either an IPv4 address or an IPv6 address.
<br/>Example IPv4:
</p>
<source>
192.168.2.54
</source>
<p>Example IPv6:
</p>
<source>
2001:DB8:85A3:0:0:8A2E:370:7334
</source>
</subsubsection>
<subsubsection name="Krb5 Principal Name">
<p>The Krb5 principal name is of the form "principal1/principal2@realm", and should be entered as such in the field.
Example:
</p>
<source>user@PRIMEKEY.SE
</source>
<p>for a normal user in the realm PRIMEKEY.SE.
<br/>Or:
</p>
<source>
krbtgt/PRIMEKEY.SE@PRIMEKEY.SE
</source>
<p>for a kdc.
</p>
</subsubsection>
</subsection>
<subsection name="Certificate Validity">
<p>
By setting the Certificate Validity Start Time and End Time you can precisely specify, for a specific end entity, 
when the certificate will start being valid and when the certificate will cease being valid.
<br/>
When selecting to use Certificate Validity Start or End time you will get the possibility to enter these fields when a new end entity is 
added. You can also specify a default value for the end entity profile. Different formats of specifying the validity time is provided as examples 
in the end entity profile page.   
</p>
</subsection>
<subsection name="Revocation reason to set after certificate issuance">
<p>Using this option you can define that when adding a new user, the revocation state of an issued certificate can be set immediately to something else than 'Active'.
<br/>
Useful if you want to issue certificate that are 'On hold' for users. After the user receives the certificate they might be required to perform some action in order to have their certificate
activated.
<br/>
Most useful when used in combination with OCSP since it will require, in practice, instant revocation checking.
</p>
<p>
When enabling this option in the profile, a corresponding selection will be available when adding new users. The user data corresponding to this option is an ExtendedInformation attribute, ExtendedInformation.CUSTOM_REVOCATIONREASON.
</p>
</subsection>
<subsection name="Reverse Subject DN Alt Name Checks">
<p>
This checkbox is not recommended to be used in normal operations. When using the External RA and more than one DN field type is set in the profile,
for example one optional OU and one required OU, it might be needed to check this checkbox for the profile validation to work.
<br/>
Only use it in such a special case, if nothing else work. This option may be removed in the future.
</p>
</subsection>
<subsection name="Maximum number of failed login attempts">
<p>
By choosing a maximum number of failed login attempts the status of a user will change to GENERATED in case a wrong password is entered more than 
the  specified number of times. The checkbox "Use" must be checked for the end entities to use this feature. If the checkbox "Modifiable" is checked 
the specified number can be changed for a particular end entity at the creation time of the end entity or later by editing it.
</p>
</subsection>
</section>

<section name="Export and import profiles">
<p>
Certificate and End Entity profiles can be exported as XML files and imported in another instance of EJBCA,
or in the same instance after removal of the old ones. 
</p><p>
When exporting profiles (bin/ejbca.sh ca exportprofiles), all profiles will be exported to the specified directory. The 
exported files will be given unique names containing profile name and profile id.
When importing profiles the profile name and id will be read from the filename. All profiles present in the specified
directory will be imported.
</p><p>
Fixed profiles will not be exported or imported. If a profiles with the same name as the one being imported already
exist, the profiles will not be imported. References to publishers with unknown id will be dropped.
</p><p>
Import of profiles try to keep the same profile id. If it already exist a profile with the same id in the database, 
it will try to choose another and change any (end entity profile to certificate profile) reference during later imports.
The reason the id is kept is that there are references to the profile id from users belonging to the profile.
</p><p>
During import on a new EJBCA instance where CAs that are referenced from the profiles don't exist, a default CA has to be
specified on command line. Two CAs are concidered identical in this context if they have the same subject DN.
</p></section>

<section name="Managing CAs">

<subsection name="Creating CAs">
<p>
Creating CAs can be made using the Admin-GUI or the command line interface. The recommended way is using the Admin-GUI, since it gives more control of all
parameters.
</p>
<strong>Using CLI</strong>
<p>You can create CAs using the cli command:
</p>
<source>
ejbca.sh ca init
</source>
<p>
Issuing the command will give usage instructions.
</p>
<strong>Using Admin-GUI</strong>
<p>Creating CAs in the Admin-GUI is done by selecting 'Edit Certificate Authorities' in the menu, entering a new CA name in the text field and clicking 'Create'.
</p>
<subsubsection name="Type of CA">
<p>
Type of CA can be either X509 or <a href="cvccas.html">CVC</a>. <br/>
An X509 CA is a <i>normal</i> CA for secure email, login, web authentication, VPN etc etc.<br/>
A CVC CA is a CA issuing CV certificates, which are special certificates for EU EAC ePassports. CVC CAs are described in depth in the document about <a href="cvccas.html">CVC</a> CAs.
</p>
</subsubsection>
<subsubsection name="Key sequence">
<p>
Key sequence is mostly important for <a href="cvccas.html">CVC</a> CAs. <br/>
The key sequence is an enumeration of the key pair for CVC CAs, it should be a number or a combination of letters and number in the end. For example 00001, 98653 or SE002. 
For CVC CAs the sequence is always 5 letters. 
When renewing keys for HSMs using the Admin-GUI, the new signing key label will be the old label with the new key sequence in the end.
When renewing keys for HSMs using the Admin-GUI the key sequence is automatically increased.<br/>
For X.509 CAs the key sequence should not be important, except for key labels when renewing keys.
<br/>
If you are unsure of the key sequence you can safely leave it to be handled automatically.
</p>
</subsubsection>

</subsection>
<subsection name="Export and import CAs">
<p>
Under certain circumstances, it can be wise to backup the CA's signature and encryption keys. Remember to protect the backup in the same way
as the CA itself.
</p>
<p>
Soft token CAs can be exported and backed up. CAs with the keys on a HSM can naturally not be exported through EJBCA. Use the HSMs methods to back up such keys.
</p><p>
Soft token CAs can be imported using both the CLI and admin-GUI, while HSM CAs can only be imported using the CLI.  
</p>
<subsubsection name="Using command line interface">
<p>
To export a CA named "TestCA" to the PKCS#12-file "/path/TestCA.p12" with password "foo123" enter the following
from the $EJBCA_HOME directory:
</p>
<source>
[user@host ejbca]$ bin/ejbca.sh ca exportca TestCA ./TestCA.p12
Using JBoss JNDI provider...
Enter keystore password: foo123
[user@host ejbca]$ 
</source>
<p>
To import the backup keys for "TestCA" later, enter the following from the $EJBCA_HOME directory:
</p>
<source>
[user@host ejbca]$ bin/ejbca.sh ca importca TestCA /path/TestCA.p12 SignatureKeyAlias EncryptionKeyAlias
Using JBoss JNDI provider...
Enter keystore password: foo123
[user@host ejbca]$ 
</source>
<p>
Enter the command:
</p>
<source>
[user@host ejbca]$ bin/ejbca.sh ca importca
</source>
<p>
to get usage instructions how to import HSM CAs.
</p>
</subsubsection>
<subsubsection name="Using admin-GUI">
<p>To be able to export and import the CA's keys using the admin-GUI, you have to have superadministrator access.
Make sure that .p12 files are not automatically saved to an unsuitable place by your browser.
before you do an export.
</p>
<p>To export a the CA's keys, do the following:
<ul>
<li>Select "Edit Certificate Authorities" from the administrator menu.</li>
<li>Select the CA you want to export and press the "Edit"-button.</li>
<li>Go to the line where the help-text say "CA export requires the keystore password".</li>
<li>Enter the keystore password in the box to the right of the help-text.</li>
<li>Press the "Export CA keystore.."-button.</li>
<li>The PKCS#12-file will be downloaded by your browser to the location you select.</li>
</ul>
</p>
<p>To import a CA's keys, do the following:
<ul>
<li>Select "Edit Certificate Authorities" from the administrator menu.</li>
<li>Press the "Import CA keystore.."-button.</li>
<li>Fill out the form with the CA's name, full pathname to the PKCS#12-file and keystore password.</li>
<li>Keep the two "Alias.."-fields to the default value, if you used EJBCA to export the CA's keys.</li>
<li>Press the "Import CA keystore"-button.</li>
</ul>
</p>
</subsubsection>
</subsection>
<subsection name="Remove and restore CA soft keystore">
<p>Soft token CAs can have their keystore removed from the database. When the keystore is removed the 
CA can not issue certificates and its CA token status is set to 'offline'.
</p>
<p>
Warning: Before removing the keystore make sure you have exported it if you would like to be able to 
restore it later. See the section 'Export and import CAs'
</p>
<p>
To remove the catoken keys for "TestCA", enter the following from the $EJBCA_HOME directory: 
</p>
<source>
[user@host ejbca]$ bin/ejbca.sh ca removekeystore TestCA
Using JBoss JNDI provider...
[user@host ejbca]$ 
</source>
<p>
To restore the catoken keys again for "TestCA" with the keystore exported as "TestCA-exported.p12", enter
the following from the $EJBCA_HOME directory:
</p>
<source>
[user@host ejbca]$ bin/ejbca.sh ca restorekeystore TestCA /path/TestCA-exported.p12 SignatureKeyAlias EncryptionKeyAlias
Using JBoss JNDI provider...
Enter keystore password: foo123
[user@host ejbca]$ 
</source>
</subsection>

<subsection name="Renew CAs">
<p>
You can renew CAs in different ways:
</p>
<ul>
<li>Renew only CA certificate, using the same keys.</li>
<li>Renew CA keys and certificate.</li>
</ul>
<p>
To renew only the CA certificate using the same keys you simply press the button "Renew CA". Your CA have to be on-line for this to work, so it can sign the new certificate if it's a self signed CA or the certificate request if it is a sub CA.
Also if it is a subCA with the rootCA in the same EJBCA instance the root CA must also be on-line. 
</p>
<p>
To renew the CA keys you check the box "Renew keys" and give the CA token authentication code. After this you simply press "Renew CA". 
<br/>Renewing the keys will not always work if you are using an HSM. It may work with some HSMs and not work with others. 
<br/>You can report success and failures to us.
</p>
<p>When using an HSM you can also make the renewal of keys manually. Simply generate new keys on the HSM with whatever tools you used the first time (preferably the EJBCA cli tools), and then edit the CA token properties
to use the new key. After the new key has been configured you can simply press "Renew CA" (without the renew keys checkbox), to generate your new CA certificate.
</p>
</subsection>

</section>


<section name="Import users">
<p>
Users from another CA can be imported with the CLI command:
</p>
<source>
bin/ejbca.sh ca importcert
</source>
<p>
You have to give several parameters to the command. Running the command without parameters will print instructions.
</p>
</section>

<section name="CRL generation">
<p>
A new CA should always issue an (empty) CRL. This is done when the ca is created
and can also be done by running 'ca.sh/cmd createcrl <i>caname</i>'.
</p>
<p>
There are three settings in CA configuration dictating the times when CRL generation is done:
<ul>
<li>CRL Expire Period (Hours): Mandatory. The validity period for generated CRLs. If set to for example 24, the nextUpdate for a generated CRL will be the issue time + 24 hours.</li>
<li>CRL Issue Interval (Hours): Optional. A fixed interval when CRLs will be issued. If set to for example 1 hour a new CRL will be issued every hour, even though the old one is still valid for another 23 hours. The default value here is 0, which means that a new CRL will be issued when the old one is about to expire (see also overlap time). Keeping the default value 0 has the same as effect as setting this value to the same value as CRL Expire Period.</li>
<li>CRL Overlap Time (Minutes): Optional. When checking if a CRL should be generated (if the old one is about to expire), the new CRL is generated this amount of minutes before the old CRL expires. The default value is 10 minutes, meaning that if CRL Expire period is 24 hours, a new CRL will be issued after 23h50m. This ensures that there is no time period (even a few seconds) when there is no valid CRL issued. It also gives clients a time-slot to download a new CRL before the old one expires.</li> 
</ul>
</p>
<p>
There are at least two ways to have EJBCA to periodically create updated CRLs.
</p>

<subsection name="CRL Distribution Points">
<p>
The CRL Distribution Point (CDP) extension is provided as info for clients verifying a certificate. The value is a URI 
that points to a CRL that can be used to check if the certificate is revoked. The CRL is issued by the CA. 
There are different kinds of CRL Distribution Points and currently EJBCA supports a URI.
</p>
<p>
Note that you are responsible for the order and encoding of your CRLIssuer, if this is important check it!
</p><p>
A CRLDistributionPoint for a CA in EJBCA could look like:
</p>
<source>
http://host:port/ejbca/publicweb/webdist/certdist?cmd=crl&amp;issuer=url-encoded-issuerDN
</source>
<p>
(such as the link from the web distribution pages)
</p>
<p>
<ul>
<li>host is the DNS name by which the CA is accessible. Port 8080 is the default port that JBoss listens to, but if you changed the JBoss port, this value should also change.</li>
<li>url-encoded-issuerDN is the CAs common name as configured when the CA was created. This is the same DN as occurs as Issuer in certificates issued by this CA.</li>
</ul>
</p>
<p>
When configuring this extension you should take the URI entered and test it in a normal browser, from another machine than the CA, to see that it works before issuing any certificates.
</p>
<p>
It should also be possible to use an LDAP distribution point, if you have configued a publisher to publish CRLs to LDAP.
</p>
<source>
ldap://yourLdapServer:port_number/cn=CA-test,ou=CRLPUB,dc=mycompany,dc=com?certificateRevocationList
</source>
<p>
When defining CRL distribution point and CRL issuer in a certificate profile, you can choose to set the values in either 
the certificate profile, or in the CA configuration (edit CAs). By having the setting in the CA configuration it is possible to use the same 
certificate profile for several CAs, otherwise you would have to create a new certificate profile for all CRL distribution points.
<br/>
By checking 'Use CA defined CRL Distribution Point' you can configure the CRL distribution point in the edit CA page instead, and use this value 
in every certificate profile that uses that CA. It is a convenience function, so you don't have to enter the same CDP in all certificate profiles.
</p>
<p>
It is possible to configure
multiple URLs for CDPs if they are separated by ';'. 
For example: 
<br/>http://cdpurl-1/mycrl.der;http://cdpurl-2/crl.crl
</p><p>
The same applies to CRLIssuer, for example: 
<br/>CN=Foo,C=SE;CN=Bar,C=US
</p>
<p>
Please note that if an URI contains a ';' it has to be double-quoted.
For example if you have two URLs:
<ul>
<li>http://cdpurl-1/mycrl.der</li>
<li>http://cdpurl-2/getcrl;binary</li>
</ul>
You could then put them together as:
<br/>http://cdpurl-1/mycrl.der;"http://cdpurl-2/getcrl;binary"
</p>
</subsection>

<subsection name="CRL Issuer">
<p>
According to RFC3280 a CRL issuer is:
</p>
<source>
An optional system to which a CA delegates the publication of certificate revocation lists;
</source>
<p>
The contents of the field in the profile is a DN, like "CN=CRLIssuerForAdminCA1,O=foo,C=SE".
You have to build the actual CRL Issuer software yourself.
</p>
</subsection>

<subsection name="CRL Update service worker">
<p>
From EJBCA 3.4 there is a timed service framework in EJBCA. In the Admin-GUI you can go to 
'Edit Services' and add a new service. Edit the service and select the 'CRL Updater' worker and the interval you want to use.
Don't forget to set the service to 'Active'.
<br/>
Now this service will run with the interval you have configured and generate CRLs according to the settings for each CA.
</p>
</subsection>
<subsection name="JBoss service">
<p><strong>DEPRECATED! The JBoss Mbean CRL Service generator has been deprecated.</strong></p>
<p>This service has been removed as of EJBCA 3.6. If you are still using this service, you must create a CRL Update service
as described above. It is very simple.
</p> 
</subsection>
<subsection name="Cron job">
<p>
Yet another way to generate CRLs way is to have a cron job or equivalent call 'bin/ejbca.sh ca createcrl'.
The 'createcrl' command will then check all active CAs if it is a need to update their CRLs, 
otherwise nothing is done. 
</p><p>
If you want to force CRL generation for a CA, use 'bin/ejbca.sh ca createcrl <i>caname</i>'
</p><p>
Example crontab entry:
</p>
<source>
PATH=$PATH:/usr/java/jdk1.6.0_01/bin
@daily cd /home/ejbca;/home/ejbca/bin/ejbca.sh ca createcrl;
</source>
<p>
where '/usr/java/jdk1.4.2_01/bin' is the path to where 'java' can be found.
'/home/ejbca' is where ejbca is installed and 'ca.sh' located.
</p><p>
Sample crontab to be installed with 'crontab -e':
</p>
<source>
SHELL=/bin/sh
PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
CLASSPATH=$CLASSPATH:/root/ejbca
APPSRV_HOME=/usr/local/jboss
# m h dom mon dow command
00 0    * * *   cd /root/ejbca;./bin/ejbca.sh ca createcrl
</source>
</subsection>

<subsection name="Delta CRLs">
<p><i>a.k.a. Freshest CRL Extension</i></p>
<p>EJBCA can issue deltaCRLs as well. 
In the CA configuration, set 'Delta CRL Period' to the number of hours your delta CRLs should be valid if delta CRLs should be issued.
Command line interface and CRL Update service will generate delta CRLs if 'Delta CRL Period' is larger than 0.</p>
</subsection>

</section>

<section name="Scep">
<p>
Since SCEP uses encryption, you must install the 'Unlimited Strength Jurisdiction Policy Files' for JDK.
The policy files can be found at the same place as the JDK download. Further information on this can be found in 
the Sun documentation on the JCE.
</p><p>
There are some compatibility issues with SCEP, one being if the CA certificate should be returned in a SCEP enrollment
response or not. The CA certificate is optional but some, Cisco VPN client, seems to require it while others, Juniper, 
seems to dislike it. Therefore EJBCA has two SCEP URLs.
</p><p>
The default including the CA certificate (use if nothing else specified): 
</p>
<source>
http://localhost:8080/ejbca/publicweb/apply/scep/pkiclient.exe
</source>
<p>
Not including the CA certificate (try if the default doesn't work): 
</p>
<source>
http://localhost:8080/ejbca/publicweb/apply/scep/noca/pkiclient.exe
</source>
<subsection name="Level of SCEP support">
<p>
EJBCA implements features from (at least) draft 11 of the SCEP spec. This means that we implement the following SCEP messages:
<ul>
<li>PKCSReq</li>
<li>GetCRL</li>
<li>GetCACert</li>
<li>GetCACertChain</li>
<li>GetCACaps</li>
</ul>
Using the External RA API the following SCEP message is also supported for polling mode:
<ul>
<li>GetCertInitial</li>
</ul>
The following CA capabilities are supported:
<ul>
<li>POSTPKIOperation</li>
<li>SHA-1</li>
</ul>
</p>
<subsubsection name="CA mode">
<p>
EJBCA does successfully receive SCEP 'PKCSReq' requests and send back the certifificate/CRL immediately in a proper SCEP reply message.
EJBCA (standard) does not support the 'polling' model, EJBCA uses the direct CA method, where a request is granted or denied immediately.
The SCEP client will send messages directly to the CA, encrypted with the CAs certificate.
</p><p>
The CN part of the DN in the PKCS#10 request, which is part of the Scep request, will be used as the 'username' when 
authenticating the request in EJBCA. Create the Scep request with a CN mathing the username registered in EJBCA.
The challengePassword in the PKCS#10 request, which is part of the Scep request, will be used as the 'password' when 
authenticating the request in EJBCA. Create the Scep request with a challengePassword mathing the password registered in EJBCA.
</p><p>
The most common errors should be wrong username/password or wrong status (not NEW) on the user in EJBCA.
</p>
</subsubsection>
<subsubsection name="RA mode (ExtRA API 3.4.2)">
<p>
EJBCA supports the SCEP 'polling' RA model using the External RA API, from ExtRA version 3.4.2.
Using this a SCEP client can send a request to the External RA, and then wait, polling the RA for updates. 
When the request is processed by the CA, which fetches the pkcs10 request from the External RA, the certificate is sent back to the External RA. 
When the certificate is complete on the External RA, the RA sends back the SCEP certificate response the next time the SCEP client
polls the RA.
<br/>This feature is very useful to securely insulate the CA from the SCEP clients throughout the network.
<br/>See the documentation in the ExtRA API for more information how to set up and configure this RA.
</p>
</subsubsection>
<p>
EJBCA will not send back proper SCEP error messages in all cases of failure. The error messages are not completely implemented, although most of them are implemented.
</p>
</subsection>
<subsection name="Tested devices">
<subsubsection name="OpenScep">
<p>
OpenScep has does not work with modern OpenSSL implementation (only works with OpenSSL 0.9.6) and also has a bug
that causes it to crash when receiving SCEP responses. There are <a href="http://www.primekey.se/~tomas/download.html">patches</a> that address these issues though so it can be used.
</p><p>
To use the <a href="http://openscep.othello.ch/">OpenScep</a> client to request a certificate from this servlet, use the command:
</p>
<source>
./scep -k test.key -r test.pemreq -c ejbca-ca.pem -q foo123 -u http://localhost:8080/ejbca/publicweb/apply/scep
</source>
<p>
Where test.key is generated with:
</p>
<source>
openssl genrsa -out test.key
</source>
<p>
test.req is generated with:
</p>
<source>
openssl req -key test.key -new -days 30 -out test.req -outform DER -config ../openssl/openscep.cnf
</source>
<p>
and test.pemreq is generated with:
</p>
<source>
openssl req -key test.key -new -days 30 -out test.pemreq -outform PEM -config ../openssl/openscep.cnf
</source>
</subsubsection>
<subsubsection name="Simple Scep Client (sscep)">
<p>
<a href="http://www.klake.org/~jt/sscep/">Simple Scep Client</a>.
You should only use CN in the users DN (same as for PIX below).
</p>
</subsubsection>
<subsubsection name="Juniper Networks NetScreen-25/NetScreen-50">
<p>
Works nice using the URL not including the CA certificate.
</p>
<p>
To enroll using the Juniper box go to the Web GUI at https://&lt;juniper-ip&gt;/, then click your way to Objects->Certificates.
To create a new certificate request:
<ol>
<li>New - enter the DN that your box will receive:
  <ul>
  <li>Name=netscreen.foo.se</li>
  <li>Organization=PrimeKey</li>
  <li>Country=SE</li>
  <li>IP Address=192.168.1.1</li>
  <li>FQSN=netscreen.foo.se</li>
  </ul>
Click generate.
</li>
<li>Automatically enroll to -> New CA Server settings. The CGI URL differs if you are using the direct CA mode or the RA polling mode:
  <ul>
  <li>RA CGI: http://&lt;ra-ip&gt;:8080/scepraserver/scep/noca/pkiclient.exe or http://&lt;ca-ip&gt;:8080/ejbca/publicweb/apply/scep/noca/pkiclient.exe.</li>
  <li>CA CGI: http://&lt;ra-ip&gt;:8080/scepraserver/scep/noca/pkiclient.exe or http://&lt;ca-ip&gt;:8080/ejbca/publicweb/apply/scep/noca/pkiclient.exe.</li>
  <li>CA IDENT: The CA Name in EJBCA, for example ScepCA.</li>
  <li>Challenge: A password for a pre-registered user in CA mode, or a random password used for polling RA mode.</li>
  </ul>
Click OK.
</li>
<li>You can now see the request in Objects->Certificates. If you are using polling RA mode, you can click 'Retrieve' after the request
has been approved in the CA and the certificate has been generated.
</li> 
</ol>
</p></subsubsection>
<subsubsection name="Cryptlib">
<p>
Cryptlib is working as of EJBCA 3.1.3.
</p><p>
When using <a href="http://www.cs.auckland.ac.nz/~pgut001/cryptlib/">Cryptlib</a>, the CA certificate must have 
KeyUsage 'Key Encipherment' in addition to the usual key usage flags. This is reasonable, since SCEP requires the CA
to actually encrypt data (which generally is a bad thing, since a special encryption certificate should be used for that).
<br></br>Key usage for a ScepCA should be: Certificate Sign, CRL Sign, Digital Signature, Key Encipherment
</p>
<p>
Use the complete path as for the Cisco VPN client below as server name.
</p></subsubsection>
<subsubsection name="Cisco VPN client">
<p>
Tested with version 4.0.2 and 5.0.
</p><p>
To enroll using the Cisco VPN client use:
<ul>
<li>CA URL='http://127.0.0.1:8080/ejbca/publicweb/apply/scep/pkiclient.exe'</li>
<li>CA Domain=you CAs name in EJBCA</li>
<li>In the DN screen simply enter the username (as added in EJBCA) as 'Name [CN]'</li>
</ul>
</p>
<p>
When using an External RA to enroll with the Cisco VPN client, the RA certificate must have 
KeyUsage SigitalSignature and KeyEncipherment for the client to accept the CA certificates.
However, to locate the RA encryption certificate, only KeyEncipherment can be set, which makes things quite complicated.<br/>
<br/>The conclusion is that RA enrollment does not work with Cisco VPN client.
</p>
</subsubsection>

<subsubsection name="AutoSscep">
<p>EJBCA has been tested successfully with <a href="http://autosscep.spe.net/">AutoSscep</a> for enrollment against the CA and the 
External RA SCEP service. 
</p>
<p>Instructions:
<ol>
<li>Download and build AutoSscep (make).</li>
<li>Create a configuration file, ejbca.conf, as the example below.</li>
<li>Create a user in EJBCA with username (common name) and DN exactly as entered in the configuration file.</li>
<li>run 'autosscep ejbca.conf'.</li>
</ol>
Sample configuration file, ejbca.conf:
</p>
<source>
Verbose = "yes"
Debug = "no"

CADir="/home/autosscep/"
CertDir="/home/autosscep/"
KeyDir="/home/autosscep/"

[CA]
DN="C=SE, O=EJBCA Sample, CN=AdminCA1"
URL="http://localhost:8080/ejbca/publicweb/apply/scep/pkiclient.exe"
CertFile="AdminCA1.cacert.pem"
EncCertFile="AdminCA1.cacert.pem"
[/CA]

[Certificate]
CertFile="mycert"
KeyFile="mykey"
CADN="C=SE, O=EJBCA Sample, CN=AdminCA1"

# Create a user with username "router4711" and password "foo123" in EJBCA
# to automatically enroll
# Note you need to add a user with exactly these fields in the DN in EJBCA
Email = "mymail@mydomain"
Country="SE"
State="BS"
Location="Stockholm"
Organization="PrimeKey"
CommonName="router4711"

ChallengePassword="foo123"
[/Certificate]
</source>
<p>
AutoSscep also handles enrolling against an RA, where the RA first sends a PENDING response which the request is beeing processed.
After processing (by the CA) you simply run the AutoSscep client again to pick up the generated certificate.
<br/>
In order to enroll against the External RA SCEP Server in EJBCA i only had to change the CA part of the configuration file to 
use the SCEP RA servers certificate for signing and encrypting the messages instead of the CAs, and to use the URL to the RA. 
The SCEP RA certificate is the end entity certificate issued to the External RA SCEP server (the keystore is usually called scepraserver.p12).
</p>
<source>
[CA]
DN="C=SE, O=EJBCA Sample, CN=AdminCA1"
URL="http://localhost:8080/scepraserver/scep/pkiclient.exe"
CertFile="scepra.pem"
EncCertFile="scepra.pem"
[/CA]
</source>
</subsubsection>

<subsubsection name="Cisco PIX/3000">
<p>
Cisco PIX is working as of EJBCA 3.1.3.
<br></br>Also Cisco 3000 is reported working well. The description below is for PIX, 3000 probably have less constraints than the PIX.
<ul>
<li>You must configure JBoss to use port 80 to enroll with PIX, this is done in 
APPSRV_HOME/server/default/deploy/jbossweb-tomcat50.sar/service.xml (or similar depending on version). You must run as root to use port 80.</li>
<li>EJBCA supports the 'ca' mode of enrollment for pix, not 'ra'. For 'ra' and polling enrollment you can use the External RA module (extra).</li>
<li>The certificate profile used by the SCEP CA must include the key usages KeyEncipherment and DataEncipherment, otherwise PIX will 
not be able to verify/decrypt encrypted SCEP messages. This is not in the default certificate profile for CAs. Create a new certificate profile before 
creating the Scep CA, you can use ROOTCA as template for the new certificate profile.</li>
<li>When enrolling for certificate using SCEP with for example a Cisco PIX it is a 'ca_nickname'. This nickname 
should be the CA-name as defined when creating the CA in EJBCA. For example 'vpnca'.</li>
<li>Only use lower-case names when creating the CA in EJBCA, since PIX will change the CA name VpnCA to vpnca when enrolling.</li>
<li>The username in EJBCA must be the name the PIX identifies itself with <i>name</i>.<i>domain</i>, example pix.primekey.se.</li>
<li>The end-entity DN must include the DN components CN and unstructuredName, ex "CN=pix.primekey.se, unstructuredName=pix.primekey.se". 
You can also include O, C etc in the certificate. A normal DN for a PIX is "CN=pix.primekey.se,unstructuredName=pix.primekey.se,O=PrimeKey,C=SE".</li>
<li>Certificates used for PIX MUST include the DN component unstructuredName (fqdn) and could also include unstructuredAddress (ip) being the IP-address of the PIX.</li>
<li>The certificate used on the Cisco PIX MUST have a SubjectAltName field dNSName, matching the DN component unstructuredName. This is needed in order for Cisco VPN clients to connect to the PIX. The DNS Name field is not necessary for the PIX to enroll perfectly with EJBCA, only for the client to be able to connect.</li>
<li>Certificates used for PIX may also use the SubjectAltName iPAddress matching the DN component unstructuredAddress, but it's not necessary.</li>
<li>Cisco does not support use of the 'Domain Component', DC, attribute in DNs, don't use it.</li>
<li>KeyUsage should include <i>Digital Signature</i> and <i>Key Encipherment</i>, the EJBCA defaults work fine.</li>
<li>When the Cisco VPN-client (above) connects to the PIX, the 'ou' part of the clients DN must match a Vpngroup you have specified, 
otherwise the connection will fail.</li>
<li>Cisco PIX needs the SCEP response messages to use MD5 as hash algorithm, not SHA1, this is handled by EJBCA automatically.</li>
</ul>
</p><p>
Please notice this Cisco note:
</p><p>
Be sure that the PIX Firewall clock is set to GMT, month, day, and year before configuring CA. 
Otherwise, the CA may reject or allow certificates based on an incorrect timestamp. 
Cisco's PKI protocol uses the clock to make sure that a CRL is not expired.
Set timezone first, then set time, then check time with 'show clock'.
</p><p>
The enrollment steps should be something like:
</p>
<source>
-- Connect with pix and enter admin mode
telnet 10.1.1.1 (default pwd cisco)
enable (default blank pwd)
configure terminal
-- Enable CA logging
debug crypto ca
-- Clear current PKI config
clear ca identity
-- Enter PKI config, i.e location of CA etc. Don't require CRLs, it's easier
ca identity pixca ca-ip:/ejbca/publicweb/apply/scep/pkiclient.exe
ca configure pixca ca 1 0 crloptional
ca authenticate pixca
-- wait --
-- Look at the fetched certificate
show ca certificate
ca save all
wr mem
-- Get a CRL if you really want to (if you did not configure CRL as optional you must)
ca crl request pixca
-- wait --
show ca crl
-- Generate keys and enroll for the certificate (user in ejbca has password foo123)
ca generate rsa key 1024
ca enroll pixca foo123
-- wait, wait, this will take a long time --
-- Look at the fetched certificate, this should now show both the pix cert and the ca cert
show ca certificate

pix(config)# show ca cert
Certificate
  Status: Available
  Certificate Serial Number: 594f643a6916d78d
  Key Usage: General Purpose
  Subject Name:
    C = SE
    O = PrimeKey
    CN = pix.primekey.se
    UNSTRUCTURED NAME = pix.primekey.se
    UNSTRUCTURED IP = 10.1.1.1
  Validity Date:
    start date: 14:42:29 GMT Sep 17 2005
    end   date: 14:52:29 GMT Sep 17 2007

CA Certificate
  Status: Available
  Certificate Serial Number: 7c7cf75236955a51
  Key Usage: General Purpose
    C = SE
    O = PrimeKey
    CN = pixca
  Validity Date:
    start date: 15:59:20 GMT Sep 16 2005
    end   date: 16:09:20 GMT Sep 14 2015

</source>
</subsubsection>
</subsection>
</section>

<section name="CMP (EJBCA >=3.4)">
<p>
CMP (RFC4210) is a very complex protocol, which EJBCA does implement some parts of.
<br/> 
The following CMP messages are supported:
<ul>
<li>Initialization request (ir)</li>
<li>Certification request (cr)</li>
<li>Certification Confirm (certConf)</li>
</ul>
Certificate requests use the CRMF (RFC4211).
</p>
<p>
From EJBCA 3.5, CMP support in RA mode (see below) can support several CAs and profiles based on the keyId of the
password used to protect the CMP messages (PBE protection).
<br/>
In EJBCA 3.4 CMP support in RA mode is currently limited to one keyId, making RA requests for one CA.
</p>
<subsection name="Configuration">
<p>
Copy conf/cmp.properties.sample to conf/cmp.properties and configure. The options in the configuration file should
be documented there.
</p>
</subsection>
<subsection name="CMP over http">
<p>
By default EJBCA support CMP over the http transport protocol.
The URL for the CMP servlet is:
<br/>
http://127.0.0.1:8080/ejbca/publicweb/cmp
</p>
</subsection>
<subsection name="CMP over TCP">
<p>
You can enable a CMP TCP service by changing the option 'cmp.tcp.enabled' in conf/cmp.properties.
The service MBean is so far JBoss specific (at least the deployment of it).
<br/>
When re-deploying EJBCA this will start a TCP listener on the default port for CMP over TCP. You must run JBoss as root to use the default port, since it is a low port (&lt;1024).
See the documentation in conf/cmp.properties for information about configuration options for TCP. We recommend using a non standard port > 1024.
</p>
</subsection>
<subsection name="User authentication">
<p>
Initialization and certification requests uses the CRMF request message (RFC4211).
There messages are interesting as there are a zillion options how to authenticate them.
EJBCA currently does authentication through the means of a regToken control (id-regCtrl-regToken) in the CRMF message.
The regToken is a UTF8String which is the users password as registered in EJBCA.
</p>
<p>
Users can be looked up from the request in different ways, as configured in conf/cmp.properties.
By default the subject DN from the certTemplate in the request is used to look up the used in EJBCA. 
You can also configure EJBCA to use the CN or the UID from the subject DN as the username in EJBCA.
</p>
</subsection>
<subsection name="Proof of possession">
<p>
Proof of Possession (POP) is another part where CMP has gazillions of different options. 
<br/>
The following POPs in the CRMF are supported by EJBCA:
<ul>
<li>raVerify - if configured so in conf/ejbca.properties EJBCA will support the raVerify POP and in that case not do any verification of POP. By default this is false, because the standard does not recommend this option.</li>
<li>signature - where the PublicKey is in the CertTemplate and the signature is calculated over the CertReqMsg.certReq (the standard procedure when the CertTemplate contains the subject and publicKey values).</li>
</ul>
Currently these are the only POPs supported by EJBCA, so if you don't use raVerify or signature your request will fail because POP is not verified.
</p>
</subsection>

<subsection name="Normal or RA mode for CMP">
<p>
CMP in EJBCA can work in two modes:
</p>
<subsubsection name="Normal">
<p>
Normal mode works like any other enrollment in EJBCA. When a request comes in EJBCA verifies the request (see User authentication above)
and issues a certificate to a user that has been previously registered in EJBCA.
<br/>
This is the default mode of operation.
</p>
</subsubsection>
<subsubsection name="RA">
<p>
RA mode is used when the CMP client will act as an RA to EJBCA. When the RA sends a certificate request to EJBCA, no user is pre-registered in EJBCA. 
When EJBCA receives the request, the message will be authenticated using PasswordBasedMAc, as defined in the CMP spec, using a pre-shared password.
When the message has been authenticated, a user is created in EJBCA and a certificate is issued.
<ul>
<li>The users DN is taken from the CertTemplate in the request message send from the RA (i.e. the DN requested by the RA).</li>
<li>The username in EJBCA is generated according to the options set in conf/cmp.properties.</li>
<li>The password for the user in EJBCA is random.</li>
<li>If the Certificate Profile allows it, keyUsage and validity is also taken from the CertTemplate in the request message.</li>
</ul>
After the user has been created in EJBCA, a certificate is generated as usual and sent back to the RA, who will distribute it to the end-user.
</p>
<p>
If the same username is constructed (for example UID) as an already existing user, 
the existing user will be modified with new values for profile etc, and a new certificate will be issued for that user.
</p>
<p>
To allow requests with different KeyId to be mapped to different CAs and profiles in EJBCA, so the documentation for the options in conf/cmp.properties.sample.
</p>
</subsubsection>
<subsubsection name="Sample config">
<p>
A sample config of EJBCA to allow an RA to request certificates for users. 
The RA uses password based mac (pbe) protection of CMP messages with password 'password'.
Users will be created using UID from the request DN and with a prefix, so the resulting username will be: cmp&lt;UsersUID&gt;.
End entity profiles names CMP_ENTITY and CMP_CERT is created in EJBCA allowing the request DN.
</p>
<source>
cmp.operationmode=ra
cmp.allowraverifypopo=true
cmp.responseprotection=pbe
cmp.ra.authenticationsecret=password
cmp.ra.namegenerationscheme=DN
cmp.ra.namegenerationparameters=UID
cmp.ra.namegenerationprefix=cmp
#cmp.ra.namegenerationpostfix=
cmp.ra.endentityprofile=CMP_ENTITY
cmp.ra.certificateprofile=CMP_CERT
cmp.ra.caname=AdminCA1
</source>
</subsubsection>
</subsection>

<subsection name="Certificate validity">
<p>Normally the validity period of issued certificates are controlled by the certificate profile. 
If you enable 'Allow validity override' in the certificate profile, and the CMP initialization- or certification request contains a 
validity time in the CRMF request template, this validity period will be used.
</p>
</subsection>

<subsection name="Certificate Key Usage">
<p>Normally the key usage extension of issued certificates are controlled by the certificate profile. 
If you enable 'Allow Key Usage Override' in the certificate profile, and the CMP initialization- or certification request contains a 
key usage in the CRMF request template, this key usage will be used.
</p>
</subsection>

<subsection name="Interoperability">
<p>CMP has been tested using RSA jCert toolkit for initialization requests. To run this as an RA you should configure CMP 
with:
<ul>
<li>cmp.operationmode=ra</li>
<li>cmp.allowraverifypopo=true</li>
<li>cmp.responseprotection=pbe</li>
<li>cmp.ra.authenticationsecret=your shared password</li>
<li>and other configurations you want for your RA.</li>
</ul>
</p>
<p>CMP has been tested with BlueX from AET Europe (http://www.aeteurope.nl/). From EJBCA's point of view BlueX functions as an RA with the same configuration 
options as for jCert.
</p>
</subsection>

</section>

<section name="Ocsp">
<p>
Note! Some OCSP clients does not handle external OCSP responders very well unfortunately. You should be aware of this.
</p>
<p>
OCSP is used by PKI-clients to verify the validity of certificates in real-time. 
This is done by sending a request for the status of a specific certificate to an OCSP responder. 
The responder may or may not be the same as the CA. The OCSP responder sends a signed reply, 
containing the requested status information back to the client. 
The client uses this status information to determine whether the certificate is valid for use or revoked.
</p>
<p>
It is an OCSP servlet receiving requests on http://localhost:8080/ejbca/publicweb/status/ocsp. The 
servlet can process requests for certificates signed by a CA running in EJBCA, as long as the CAs OCSP 
service has not been deactivated. 
</p><p>
The OCSP servlet receives OCSP request by http(s) and send back a status response signed by the CA, or 
with a dedicated responder certificate.
</p><p>
For a CA to be valid as an OCSP-responder it must have the KeyUsage 'Digital Signature' in the certificate profile used to create the CA.
This KeyUsage must be included if the CA is to sign OCSP-responses.
The default certificate profiles for CAs includes the key usage 'Digital Signature'.
</p><p>
There are a two parameters affecting the OCSP service that can be configured in conf/ejbca.properties:
<ul>
<li>'useCASigningCert' - If set to true (default) the OCSP responses will be signed directly by the CAs certificate instead 
of the CAs OCSP responder. If set to false, the CAs special OCSP responder certificate is used to sign the
OCSP responses. The OCSP responder certificate is signed directly by the CA.</li>
<li>'defaultResponderID' - Specifies the subject of a CA which will 
generate responses when no real CA can be found from the request. This is used to generate 'unknown' 
responses when a request is received for a certificate that is not signed by any CA on this server.
Set this to the same DN as your initial Admin CA for example.</li>
</ul>
</p><p>
These values should be set during deployment of EJBCA. After the values have been edited, they are installed 
with the 'ant deploy' command.
</p><p>
Example to generate an OCSP request using OpenSSL (works with both internal and external OCSP responders):
</p>
<source>
openssl ocsp -issuer Test-CA.pem -CAfile Test-CA.pem -cert Test.pem -req_text -url http://localhost:8080/ejbca/publicweb/status/ocsp
</source>
<p>
If Firefox is to request and accept OCSP-responses from a CA it must be configured:
<ol>
<li>'Use OCSP to validate all certificates using this URL and signer' in 'Privacy &amp; Security->Validation'.
Choose the CA from EJBCA (which you should have made Trusted by right clicking in 
'Privacy &amp; Security->Certificates->Manage Certificates->Authorities' and checking the appropriate checkboxes).
</li>
<li>If using a Certificate Profile that includes a OCSP Service URL for client certificates, the Validation option in Firefox 
'Use OCSP to validate only certificates that specify an OCSP service URL' also works fine. When this option is checked you may need to restart Mozilla.
</li>
</ol>
</p><p>
When the validation settings are set, Firefox will query the OCSP server when for example double-clicking on a certificate in the 
certificate manager.
An appropriate URL for validation is: http://<i>hostname</i>:8080/ejbca/publicweb/status/ocsp
</p><p>
If using a dedicated OCSP responder certificate, this certificate must probably not be imported in Firefox as a Trusted CA certificate.
But if you want to, you can do this through 'View Certificates' in EJBCA 
(http://<i>hostname</i>:8080/ejbca/retrieve/ca_certs.jsp).
</p><p>
In doc/samples it is a sample how to check revocation with OCSP using the new APIs in JDK 1.5.
</p>

<subsection name="Stand-alone OCSP responder">
<p>
You can set up separated OCSP responders in EJBCA. Using this you can isolate the CA from the Internet and still be
able to answer OCSP request. You can set up firewalls so that only outgoing traffic is allowed from the CA, and
nothing to the CA.
</p><p>
Separated OCSP responders is also good when you don't require high-performance clustering for the CA, but you do need
high-performance for the OCSP responders. This should be a usual setup, if the CA only issues certificates once every year
for one million users, this does not put much pressure on the CA, but the OCSP responders can be put under high load continuously.
</p>
<p>
See the <a href="installation-ocsp.html">OCSP Installation document</a> for information how to set up stand-alone, separated OCSP responders.
</p>
</subsection>

<subsection name="Simple OCSP client">
<p>
To try out and test your OCSP installation you can use the EJBCA client toolbox, (see below). The toolbox has replaced the old ocsp client which has been removed. You can also use the API directly from your 
java program.
</p>
</subsection>

<subsection name="Adobe Acrobat Reader">
<p>
A good example of using OCSP is to check digitally signed PDF documents using Adobe Reader.
</p>
<p>
To be able to verify certificates in Adobe Reader, you must first add the CA-certificate as trusted in Adobe Reader. 
You can do that in the menu Document->Trusted Identities. Choose Certificates in the drop-down list and click 'Add contacts',
now you can browse to the CA-certificate that you have downloaded in DER format (for example by choosing download to IE on the public EJBCA pages).
The CA-certificate must have been saved with a name ending with '.cer'.
After adding the new contact, you have to click 'Edit trust' and check at least 'Signatures and as trusted root' and 'Certified documents'.
This works the same using both internal and external OCSP responders.
</p>
<p>
Certificates that have an 'OCSP service locator' will be verified against the OCSP responder. 
You can configure this in the certificate profile used to issue certificates.
</p>
</subsection>

</section>
<section name="EJBCA Web Service Interface">
<p>
New to EJBCA 3.4 is a JAX-WS 2.0 Web Service Interface used to access the basic
functions remotely over client authentication HTTPS. 
</p><p>
The JAX-WS interface depends on java 1.5 or later and will otherwise not be included in the EJBCA installation.
</p><p>
The functionality currently available through the Web Service Interface are:
</p>
<ul>
<li>getEjbcaVersion : Returns the version of the EJBCA server.</li>
<li>editUser    : Edits/adds  userdata</li>
<li>findUser    : Retrieves the userdata for a given user</li>
<li>findCerts   : Retrieves the certificates generated for a user</li>
<li>pkcs10Req   : Deprecated method previously used to generate a certificate using the given userdata and the public key from the PKCS10</li>
<li>pkcs10Request : Newer method that generates a certificate or PKCS7 using the given userdata and the public key from the PKCS10</li>
<li>pkcs12Req   : Generates a PKCS12 keystore (with the private key) using the given userdata</li>
<li>cvcRequest  : Generate a CV certificate for the specified user using the public key from the CVC request. See the CVC documentation for more details.</li> 
<li>revokeCert  : Revokes the given certificate</li>
<li>revokeUser  : Revokes all certificates for a given user, it's also possible to delete the user</li>
<li>revokeToken : Revokes all certificates placed on a given hard token</li>
<li>checkRevokationStatus : Checks the revokation status of a certificate</li>
<li>isAuthorized : Checks if an admin is authorized to an resource</li>
<li>fetchUserData : Method used to fetch userdata from an existing UserDataSource</li>
<li>genTokenCertificates : Method used to add information about a generated hardtoken</li>
<li>existsHardToken : Looks up if a serial number already have been generated</li>
<li>getHardTokenData : Method fetching information about a hard token given it's hard token serial number.</li>
<li>getHardTokenDatas: Method fetching all hard token informations for a given user.</li>
<li>republishCertificate : Method performing a republication of a selected certificate</li>
<li>isApproved : Looks up if a requested action have been approved by an authorized administrator or not</li>
<li>customLog  : Logs a CUSTOM_LOG event to the logging system</li>
<li>deleteUserDataFromSource : Method used to remove user data from a user data source</li>
<li>getCertificate : Returns a certificate given its issuer and serial number</li>
<li>keyRecoverNewest : Marks the users latest certificate for key recovery. Note, to key recover the user the status 
must also be set to KEYRECOVERY (70), and the user must have been generated for key recovery from the start.
If all prerequisites are fulfilled, the next pkcs12Req call (for example) will return the recovered key and certificate.</li>
<li>getAvailableCAs : Fetch a list of the ids and names of available CAs, i.e. not having status "external" or "waiting for certificate response".</li>
<li>getAuthorizedEndEntityProfiles : Fetch a list of end entity profiles that the administrator is authorized to use.</li>
<li>getAvailableCertificateProfiles : Fetch a list of available certificate profiles in an end entity profile.</li>
<li>getAvailableCAsInProfile : Fetch a list of the ids and names of available CAs in an end entity profile.</li>
<li>createCRL : Generates a CRL for the given CA.</li>
</ul>
<p>
There is also a cli tool that can be used for remote scripting. See following section for more information.
Note: All these calls are not available through the CLI.
</p>
<subsection name="Configuring Web Services CLI">
<p>
There exists one propertyfile in conf/jaxws.properties.sample that is used to
configure the behaviour of the WS service. To configure it copy it and name
it jaxws.properties.
</p>
<p>
See the sample file for details of how to configure the Web Service interface.
</p>
</subsection>

<subsection name="Configuring Web Services behavior">
<p>
    If the end entity profile informations must be used to define default values when you create a user, the flag "Allow 
    merge DN Webservices" must be checked in the end entity profile.
</p>
<p>
    If multiple instances of a component exist, the merge is done from end to begin, and the remaining values of this component type will be placed at the end. 
    For example, if you want to merge :
    <code>dn=cn=foo,..., dc=dc1, ..., dc=dc2, ...</code>
    with
    <code>dn=..., dc=mdc1, ..., dc=mdc2, ..., dc=mdc3, ...</code>
    the result will be :
    <code>dn=cn=foo, ..., dc=mdc1, ..., dc=mdc2, ..., dc=mdc3, ...</code>
</p>
</subsection>

<subsection name="Using the Web Services CLI">
<p>
When building EJBCA, a Web Service CLI tool is also generated. The tool is placed
in the directory dist/ejbcacli and consists of the all the necessary files needed to run the cli.
</p><p>
To use the client do the following, copy the directory with all included files to
the computer you want to remote administrate from. Then create a JKS file with
the appropriate access rights (See the Using API section for details) and 
finally configure the file ejbcawsracli.properties. In this file you should specify
the hostname of the CA server, the name of the JKS keystore and the password to unlock it.
</p><p>
Use 'ejbcaraws.sh/cmd' for a list of each subcommand and 'ejbcaraws.sh/cmd "subcommand"'
for detailed help how to use the cli.
</p><p>
Example usage:
ejbcawsracli.cmd pkcs12req testuser2 foo123 2048 NONE tmp
</p><p>
ejbcawsracli.cmd revokeuser testuser2 false
</p>
</subsection>
<subsection name="Using the Web Service API for Integration">
<p>
You can use the Web Service interface to integrate EJBCA from other applications.
</p><p>
If you are using another language than Java you should start by downloading the WSDL
file at http://hostname:8080/ejbca/ejbcaws/ejbcaws?wsdl
</p><p>
When using java you can find the required libs in 'dist/ejbcawscli' and it's 'lib' 
subdirectory. 
</p><p>
Some programming examples:
</p><p>
To initialize the web service:
</p>
<source>
  CertTools.installBCProvider();	
  String urlstr = "https://localhost:8443/ejbca/ejbcaws/ejbcaws?wsdl";
	
  System.setProperty("javax.net.ssl.trustStore","p12/wstest.jks");
  System.setProperty("javax.net.ssl.trustStorePassword","foo123");  
	
  System.setProperty("javax.net.ssl.keyStore","p12/wstest.jks");
  System.setProperty("javax.net.ssl.keyStorePassword","foo123");      
                             
  QName qname = new QName("http://ws.protocol.core.ejbca.org/", "EjbcaWSService");
  EjbcaWSService service = new EjbcaWSService(new URL(urlstr),qname);
  ejbcaraws = service.getEjbcaWSPort();  
</source>
<p>
Example call to find all users having 'Vendil' in their subject dn:
</p>
<source>
  UserMatch usermatch = new UserMatch();
  usermatch.setMatchwith(org.ejbca.util.query.UserMatch.MATCH_WITH_DN);
  usermatch.setMatchtype(org.ejbca.util.query.UserMatch.MATCH_TYPE_CONTAINS);
  usermatch.setMatchvalue("Vendil");
  List(UserDataVOWS) result= ejbcaraws.findUser(usermatch);
</source>
<p>
Example to generate a certificate form a PKCS10 request:
</p>
<source>
  UserDataVOWS user1 = new UserDataVOWS();
  user1.setUsername("WSTESTUSER1");
  user1.setPassword("foo123");
  user1.setClearPwd(true);
  user1.setSubjectDN("CN=WSTESTUSER1");
  user1.setCaName("AdminCA1");
  user1.setEmail(null);
  user1.setSubjectAltName(null);
  user1.setStatus(10);
  user1.setTokenType("USERGENERATED");
  user1.setEndEntityProfileName("EMPTY");
  user1.setCertificateProfileName("ENDUSER");
			
  ejbcaraws.editUser(user1);	
  KeyPair keys = KeyTools.genKeys("1024", CATokenConstants.KEYALGORITHM_RSA);
  PKCS10CertificationRequest  pkcs10 = new PKCS10CertificationRequest("SHA1WithRSA",
  CertTools.stringToBcX509Name("CN=NOUSED"), keys.getPublic(), null, keys.getPrivate());
  CertificateResponse certenv =  ejbcaraws.pkcs10Request("WSTESTUSER1","foo123",new String(Base64.encode(pkcs10.getEncoded())),null,CertificateHelper.RESPONSETYPE_CERTIFICATE);
		
  X509Certificate cert = (X509Certificate) CertificateHelper.getCertificate(certenv.getData()); 		
</source>
<p>
Example checking the revocation status of a certificate:
</p>
<source>
  RevokeStatus revokestatus = ejbcaraws.checkRevokationStatus(cert.getIssuerDN.toString,cert.getSerialNumber().toString(16));
  if(revokestatus != null){
    if(revokestatus.getReason() != RevokeCertInfo.NOT_REVOKED)){
      // Certificate is revoked
    }else{
	  // Certificate isn't revoked
    }
  }else{
	// Certificate doesn't exist
  }	  
</source>
</subsection>

<subsection name="Sample code">
<p>
See the file src/java/org/ejbca/core/protocol/ws/common/IEjbcaWS
for more detailed instructions of the API. 

Sample code can be taken from:
<ul>
<li>The JUnit tests for the WS-API: src/test/java/org/ejbca/core/protocol/ws/TestEjbcaWS</li>
<li>The WS-API CLI: src/java/org/ejbca/core/protocol/ws/client/*.java</li>
</ul>
</p>
</subsection>

<subsection name="Accessrules required when using the Web Service API">
<p>
All the calls requires HTTPS client authentication. The keystore used
must be set up as a regular administrator and access rules according to the following:
</p><p>
Common for all calls (except isAuthorized, existsHardToken, isApproved that only needs a valid trusted certificate):
</p>
<ul>
<li>/administrator</li>
<li>/ca/'related CA'</li>
</ul>
<p>
editUser:
</p>
<ul>
<li>/ra_functionality/create_end_entity and/or edit_end_entity</li>
<li>/ra_functionality/'end entity profile of user'/create_end_entity and/or edit_end_entity</li>
</ul>
<p>
findUser, findCert:
</p>
<ul>
<li>/ra_functionality/view_end_entity</li>
<li>/ra_functionality/'end entity profile of the user'/view_end_entity</li>
</ul>
<p>
pkcs10req, pkcs10Request, pkcs12req:
</p>
<ul>
<li>/ra_functionality/view_end_entity</li>
<li>/ra_functionality/'end entity profile of the user'/view_end_entity</li>
<li>/ca_functionality/create_certificate</li>
</ul>
<p>
revokeCert, revokeToken: These calls support approvals.
</p>
<ul>
<li>/ra_functionality/revoke_end_entity</li>
<li>/ra_functionality/'end entity profile of the user owning the cert'/revoke_end_entity</li>
</ul>
<p>
revokeUser: This call support approvals.
</p>
<ul>
<li>/ra_functionality/revoke_end_entity</li>
<li>/ra_functionality/'end entity profile of the user'/revoke_end_entity</li>
<li>/ra_functionality/delete_end_entity  (only if users should be deleted)</li>
<li>/ra_functionality/'end entity profile of the user'/delete_end_entity  (only if users should be deleted)</li>
</ul>
<p>
fetchUserData:
It is possible to turn of authorization of this call in the jaxws.properties
</p>
<ul>
<li>/userdatasourcesrules/'user data source'/fetch_userdata</li>
</ul>
<p>
genTokenCertificate:
Important this call also supports approvals, and the default behaviour is when
someone without the '/administrator' access is creating a call then will a GenerateTokenApprovalRequest
be created. This behaviour can be turned off in the jaxws.properties file.
</p>
<ul>
<li>/ra_functionality/create_end_entity and/or edit_end_entity</li>
<li>/endentityprofilesrules/'end entity profile of user'/create_end_entity and/or edit_end_entity</li>
<li>/ra_functionality/revoke_end_entity (if overwrite flag is set)</li>
<li>/endentityprofilesrules/'end entity profile of user'/revoke_end_entity (if overwrite flag is set)</li>
<li>/ca_functionality/create_certificate</li>
<li>/ca/'ca of all requested certificates'</li>
<li>hardtoken_functionality/issue_hardtokens</li>
</ul>
<p>
getHardTokenData:
Important this call also supports approvals, and the default behaviour is when
someone without the '/administrator' access is creating a call then will a ViewHardTokenApprovalRequest
be created. This behaviour can be turned off in the jaxws.properties file.
</p>
<ul>
<li>/ra_functionality/view_hardtoken</li>
<li>/endentityprofilesrules/'end entity profile of user'/view_hardtoken</li>
<li>/endentityprofilesrules/'end entity profile of user'/view_hardtoken/puk_data (if viewPUKData = true)</li>
</ul>
<p>
getHardTokenDatas:
</p>
<ul>
<li>/ra_functionality/view_hardtoken</li>
<li>/endentityprofilesrules/'end entity profile of user'/view_hardtoken</li>
<li>/endentityprofilesrules/'end entity profile of user'/view_hardtoken/puk_data (if viewPUKData = true)</li>
</ul>
<p>
republishCertificate:
</p>
<ul>
<li>/ra_functionality/view_end_entity</li>
<li>/endentityprofilesrules/'end entity profile of the user'/view_end_entity</li>
<li>/endentityprofilesrules/'end entity profile of user'/view_hardtoken/puk_data (if viewPUKData = true)</li>
</ul>
<p>
customLog:
No CA access rule is required.
</p>
<ul>
<li>/log_functionality/log_custom_events</li>
</ul>
<p>
deleteUserDataFromSource:
</p>
<ul>
<li>/userdatasourcesrules/'user data source'/remove_userdata (for all the given user data sources)</li>
</ul>
<p>
getCertificate:
no requirement of the '/administrator' flag
</p>
<ul>
<li>/ca_functionality/view_certificate</li>
</ul>
</subsection>
<subsection name="Error codes on web services">
    <p>
        Business error code have been added in order to discriminate exception of type <code>EjbcaException</code>.
    </p>
    <p>
        The following code sample shows how to use error codes :
    </p>
    <source>
try {
    ejbcaraws.editUser(user1);
} catch(EjbcaException_Exception e) {
    if(org.ejbca.core.ErrorCode.CERT_PROFILE_NOT_EXISTS.getInternalErrorCode().equals(e.getFaultInfo().getErrorCode().getInternalErrorCode())) {
        log.error("No such certifcate profile.");
    }
}
    </source>
    <p>All error codes are described in <code>org.ejbca.core.ErrorCode</code>.</p>
    <p> You can also take a look at <code>src/test/org/ejbca/core/protocol/ws/CommonEjbcaWSTest.java</code> to see how the error code can be used.</p>
</subsection>
<subsection name="WS transaction logging">
<p>
The logging is done the same way as the logging for the OCSP responder is done.
See <a href="installation-ocsp.html#Audit and Account Logging">OCSP Audit and Account Logging</a>.
But different tags are used:
</p>
<ul>
<li>LOG_TIME : The time the call took place</li>
<li>SESSION_ID : A random 32 Byte long String generated when the OCSP-responder is started.</li>
<li>LOG_ID : An integer identifying that starts from 1 and is increased for every received request.</li>
<li>REPLY_TIME : The time it took to return from the WS method.</li>
<li>METHOD : Name of the called WS method.</li>
<li>ERROR_MESSAGE : An error message with information of the error. If the call returned successfully then 'NO_ERROR'.</li>
<li>ADMIN_DN : Subject DN for the client certificate in the call.</li>
<li>ADMIN_ISSUER_DN : Issuer DN of the client certificate in the call</li>
</ul>
<p>
The configuration is done in ./conf/jaxws.properties.
</p><p>
In jboss-log4j.xml 'org.ejbca.core.protocol.ws.logger.TransactionLogger' should be used as category name for the appender.
</p>
</subsection>
</section>
<section name="XKMS Service">
<subsection name="Introduction">
<p>
From EJBCA 3.4 the XKMS protocol is supported as a service as a complement to the EJBCA Web Service interface.
</p><p>
It's included (but can be disabled) in the standard installation. And have the Web Service URL http://"hostname":8080/ejbca/xkms/xkms
</p>
<p>
<strong>NOTE:</strong> XKMS only works well with JDK 1.5, it does not work with JDK 6.
</p>
</subsection>
<subsection name="How to configure the XKMS Service">
<p>
The XKMS service is configured in the file conf/xkms.properties, just edit the file before building the application.
</p><p>
The following settings exists:
</p>
<ul>
<li>xkms.enabled: Enables the XKMS Service (default: true)</li>
<li>xkms.request.requiresignature: id signed XKMS request should be required  (default: false)</li>
<li>xkms.request.acceptedcas: List of CA names that are accepted for XKMS signed requests. Use ';' as a separate for multiple. (default 'AdminCA1')</li>
<li>xkms.response.acceptsignrequest: Accept signed responses on request (default: true)</li>
<li>xkms.response.alwayssign: Always sign responses (default: false)</li>
<li>xkms.response.causedforsigning: Specify which CA that should be used with the signed responses. Only one can be specified. (default 'AdminCA1')</li>
<li>xkms.keyusage.signatureisnonrep: Setting specifying the keyusage in a X509 certificate that is mapped to XKMS KeyUsage Signature, Default is non-repudiation but if set to false will XKMS KeyUsage Signature be mapped against digital signature X509 key usage.</li>
<li>xkms.serviceport=This is a development setting that is set in the WSDL to instruct the client use a non default port. This is only needed if a WS tap listener is used to review the messages. (default: 8080)</li>
<li>xkms.krss.poprequired=Defines if proof of possession of the private key is required (default: true)</li>
<li>xkms.krss.servergenkeylength=Defines the key length of server generated keys (default: 1024)</li>
<li>xkms.krss.allowrevokation=Defines it should be possible for users to revoke their certificate with a revocation code (default: true)</li>
<li>xkms.krss.allowautomaticreissue=Setting to allow the user to renew automatically as long as the current key isn't revoked  (default: false)</li>
</ul>
<p>
Important, if signing of responses is needed, must the XKMS CA service for the configured CA be activated in the
'Edit CA' page. The XKMS Signer have it's own certificate for each CA just as the OCSP service and is created during the installation or upgrade of a CA.
</p>
</subsection>
<subsection name="Implementation Specific Notes">
<subsubsection name="What is implemented">
<p>
Currently are the methods locate, validate, register, reissue, revoke and recover). The Compond request isn't implemented.
</p><p>
The XKMS Service only supports synchronized calls, not asynchronized or two-phase requests.
</p><p>
The TimeInstant attribute of QueryKeyBinding is not supported
</p>
<p>
In the NotBoundAuthentication isn't the 'Protocol' attribute used.
</p>
<p>
The register listener expects a UseKeyWith=urn:ietf:rfc:2459 (PKIX) with the subjectDN as identifier and is mapped to the user.
The password of the user Must be marked as cleartext in order for KRSS to work. In KeyInfo is one RSAKeyInfo required if
the user have the type 'USERGENERATED'. All other UseKeyWith or KeyUsage is ignored.
since it is the register userdata that is used when issuing the certificate. If the user have the type "P12" in it's userdata
then will a server generated key be inserted in a PrivateKey in the response. It is the same password to encrypt the key as 
for the enrollment. RespondWith RSAPublicKey, X509Certificate, X509CertificateChain and PrivateKey is supported.
</p>
<p>
The reissue listener expects one X509Certificate KeyInfo in the request and the subjectDN and public is extracted
and used for the new certificate. Revoked certificates cannot be renewed. The generated key will be inserted in a PrivateKey in the response. It is the same password to encrypt the key as 
for the enrollment. RespondWith RSAPublicKey, X509Certificate and X509CertificateChain.
</p>
<p>
The recover listener expects one X509Certificate KeyInfo in the request and is used to select the user in
the database. Before a key can be recovered the key have to be marked for recovery and a password set for the user in 
the usual way. RespondWith RSAPublicKey, X509Certificate, X509CertificateChain and PrivateKey is supported.
</p>
<p>
The revoke listener expects one X509Certificate KeyInfo in the request and is used to select the certificate
that should be revoked. A revokation code is required, authentication tag is not supported.
RespondWith RSAPublicKey, X509Certificate and X509CertificateChain is supported.
</p>
</subsubsection>
<subsubsection name="XKMS Mappings">
<p>
The RespondWith tag supports X509Certificate, X509CertificateChain, X509CRL, KeyName, KeyValue (and PrivateKey for register and recover).
</p><p>
<i>The QueryKeyBinding</i> 
The query of a QueryKeyBinding is performed in the following way:
If KeyInfo is included, the certificate is extracted and the is used for checking the key usage and validity of the certificate
If UseKeyWith is included (and no KeyInfo) is the user database queried using the UseKeyWith mappings (if several UseKeyWith are the queried with an 'AND' operator. Then are all certificates that fulfills all the KeyUsage mappings returned.
</p><p>
In KeyInfo is only X509Certificate and X509CertificateChain supported 
</p><p>
KeyUsage Mappings, 
The key usage constants is mapped against the following X509 key usages 
<ul>
<li>SIGNATURE : either non-repudiation or digital signature depending on configuration</li>
<li>ENCRYPTION: data encipherment</li>
<li>EXHANGE: digital signature and key encipherment</li>
</ul>
</p><p>
UseKeyWith Mappings,
All queries find their data using beginwith (except PKIX) of the identifier.
<ul>
<li>XKMS: Subject Altname, UNIFORMRESOURCEIDENTIFIER</li>
<li>XKMS/profile: Subject Altname, UNIFORMRESOURCEIDENTIFIER</li>
<li>S/MIME: Subject Altname, RFC822 addr-spec</li>
<li>PGP: Subject Altname, RFC822 addr-spec</li>
<li>TLS: Subject Altname, UNIFORMRESOURCEIDENTIFIER</li>
<li>TLS/HTTPS: SubjectDN, Common Name</li>
<li>TLS/SMTP:Subject Altname, DNS Name</li>
<li>IPSEC:Subject Altname, IP Address</li>
<li>PKIX: Entire SubjectDN</li>
</ul>
</p>
</subsubsection>
</subsection>

<subsection name="Using the XKMS client">
<p>
When building EJBCA, a XKMS CLI tool is also generated. The tool is placed
in the directory dist/xkmscli and consists of the all the necessary files needed to run the cli.
</p><p>
To use the client do the following, copy the directory with all included files to
the computer you want to remote administrate from. (Optionally create a JKS keystore from
one XKMS Service trusted CAs) and configure the file xkmscli.properties. In this file you should specify the hostname of the CA server, the name of the JKS keystore, the alias and the password to unlock it.
</p><p>
Use 'xkmscli.sh/cmd' for a list of each subcommand and 'xkms.sh/cmd "subcommand"'
for detailed help how to use the cli.
</p>
</subsection>
<subsection name="Running the XKMS test script">
<p>
To automatic test the XKMS Service do the following:
</p><p>
1. Start with a fresh installation with all the default values. Then activate the XKMS CA service in the Edit CA page for AdminCA1.
</p><p>
2. Run 'ant test:xkms' and a report will be generated in tmp/bin/junit/xkms/reports/html/index.html
</p>
</subsection>
</section>
<section name="External RA API">
<p>
In some cases, for security reasons, is it preferable to deny all inbound traffic to the CA and instead let the CA 
periodically fetch and process information from external trusted data sources. 
</p>
<p>
The ExtRA API contains the most basic functions like:
<ol>
<li>Generate Certificate from PKCS10</li>
<li>Generate PKCS12 for the end user</li>
<li>KeyRecovery of the users key (if requested using PKCS12)</li>
<li>Edit users</li>
<li>Revoke Certificates</li>
</ol>
</p>
<p>
The external API, named extra, is downloaded separately, or checked out separately from the CVS using the module name 'extra'. 
</p>
<p>
Documentation about the ExtRA API is in the doc subdirectory of the extra subproject. 
</p>
</section>
<section name="Key recovery">
<p>
Key Recovery can be used to re-use or restore a users private key. To enable key recovery use the admin-GUI:
<ol>
<li>Set 'Enable Key Recovery' in 'System Configuration'.</li>
<li>Create a new End Entity Profile and set to use 'Key Recoverable'.</li>
<li>Add users with this End Entity Profile.</li>
</ol>
</p><p>
The following is an example of a sequence of commands that can be used to generate a new certificate for a user using the
same key pair:
</p><p>
# First revoke <i>username</i>, with revocation reason <i>reason</i>,
</p>
<source>
bin/ejbca.sh ra revokeuser $username $reason
</source>
<p>
# then mark the certificate for keyrecovery,
</p>
<source>
bin/ejbca.sh ra keyrecovernewest $username
</source>
<p>
# then set clear text password for Batch session to use
</p>
<source>
bin/ejbca.sh ra setclearpwd $username $userpass
</source>
<p>
# and finally reissue the certificate.
</p>
<source>
bin/ejbca.sh batch
</source>
<p>
The same can be accomplished using a browser:
<ul>
<li>Admin GUI - List/Edit End Entities - View_Certificates for user - Revoke the certificate with revocation reason</li>
<li>Admin GUI - List/Edit End Entities - View_Certificates for user - Recover Key, Close</li>
<li>Admin GUI - List/Edit End Entities - Edit_End_Entity for user - Enter new password for user, Save</li>
<li>Public Web - Create Keystore - Enter username and password - Fetch the keystore</li>
</ul>
</p>
</section>

<section name="Email notifications">
<p>
Mail settings in JBoss is created when running the 'ant deploy' using the values
specified in conf/mail.properties (or default).
<br></br>
It is (automatically) configured in 
$APPSRV_HOME/server/default/deploy/ejbca-mail-service.xml for JBoss.
For other containers you must create a mail service with the same JNDI name as specified in 
conf/mail.properties.
</p>

<subsection name="End entity email notifications">
<p>
Email notification can be sent when status changes for an end entity, for example when a new user is added (status changes to new).
</p>
<p>
To configure email notifications in EJBCA:
<ol>
<li>
You must create a new end-entity profile to be able to issue certificates 
to end users using email notifications. Under the RA functions, choose "Edit End Entity Profiles" 
and add a new profile. Select the profile and go into 
'Edit End Entity profile'. In this page you can Enable Send Notifications 
and create the notification message. Make sure the checkbox 'Use Send Notification' is checked.
</li>
<li>
Add a new end entity. You must select the new end entity profile you
created above. Make sure the checkbox 'Send Notification' is checked.
Enter the from-address and subject. Enter a message using the variables defined
for dynamic substitution in the next section. Use ${NL} for newline in the mail message.
</li>
</ol>
</p>
<p>
The Notification Recipient can have a few different values:
<ul>
<li>USER: send notification to the email registered for the end entity.</li>
<li>foo@bar.com: send notification to the specified email address. Multiple email addresses can be entered comma separated.</li>
<li>CUSTOM: plug-in mechanism to retrieve addresses your own way. See interface org.ejbca.core.model.ra.raadmin.ICustomNotificationRecipient 
for implementation details. Enter a string like "CUSTOM:org.ejbca.MyCustomPluginClass" to use.</li>
</ul> 
</p>
<p>
You can also use substitution variable in the notification sender and recipient fields. See samples below.
</p>
<p>
The Notification Events specify which status changes for a user that will trigger a notification.
The default values are suitable to send an email to a user when he/she should go and pick up a 
certificate. You can also select for example STATUSGENERATED to send email notifications to an administrator
when the user picks up the certificate.
</p>
<p>
<strong>Tip:</strong>
If you configure autogenerated password in end entity profile you don't
need to enter one in the adduser page. A generated one will automatically be
sent with the email.
</p><p>
If you want to re-send a notification for a user, reset the status to NEW.
</p>
</subsection>

<subsection name="Dynamic Substitution Variables">
<p>
Parameters that can be used with different usages of email notification. All parameters isn't always set, it depends on the input data.
</p><p>
The following parameters can be set:
<ul>
<li>
${NL}                           = New Line in message
</li>
<li>
${DATE} or ${current.DATE}      = The current date
</li>
</ul>
</p><p>
Variables used with userdata:
<ul>
<li>
  ${USERNAME} or ${user.USERNAME} = The users username
</li>
<li>
  ${PASSWORD} or ${user.PASSWORD} = The users password
</li>
<li>
  ${CN} or ${user.CN}             = The common name of the user.
</li>
<li>
  ${SN} or ${user.SN}             = The serial number (in DN) of the user.
</li>
<li>
  ${O} or ${user.O}               = The user's organization
</li>
<li>
  ${OU} or ${user.OU}             = The user's organization unit
</li>
<li>
  ${C} or ${user.C}               = The user's country
</li>
<li>
  ${user.E}                       = The user's email address from Subject DN
</li>
<li>${user.TIMECREATED}             = The time the user was created</li>
<li>${user.TIMEMODIFIED}            = The time the user was modified</li>
<li>${approvalAdmin.XX} variables from below can be used to get the administrator who adds an end entity.</li>
</ul>
</p><p>
Variables used with approvals:
<ul>
<li>
  ${approvalRequest.DATE}            = The time the approval request was created
</li>
<li>
  ${approvalRequest.ID}              = The id of the approval request
</li>
<li>
  ${approvalRequest.ABS.ID}          = The id of the approval request with out any '-' sign, used for presentation purposes.
</li>
<li>
  ${approvalRequest.TYPE}            = The type of approval request
</li>
<li>
  ${approvalRequest.APROVEURL}       = A URL to the review approval page with the current request.
</li>
<li>
  ${approvalRequest.APPROVALSLEFT}   = The number of approvals remaining.
</li>
<li>
  ${approvalRequest.APPROVALCOMMENT} = The comment made by the approving/rejecting administrator
</li>
<li>
  ${requestAdmin.USERNAME}         = The requesting administrator's username
</li>
<li>
  ${requestAdmin.CN}               = The common name of the requesting administrator.
</li>
<li>
  ${requestAdmin.SN}               = The common name of the requesting administrator.
</li>
<li>
  ${requestAdmin.O}                = The requesting administrator's organization
</li>
<li>
  ${requestAdmin.OU}               = The requesting administrator's organization unit
</li>
<li>
  ${requestAdmin.C}                = The requesting administrator's country
</li>
<li>
  ${requestAdmin.E}                = The requesting administrator's email address from Subject DN
</li>
<li>
 ${approvalAdmin.USERNAME}        = The approving administrator's username
</li>
<li>
 ${approvalAdmin.CN}              = The common name of the approving administrator.
</li>
<li>
 ${approvalAdmin.SN}              = The common name of the approving administrator. 
</li>
<li>
 ${approvalAdmin.O}               = The approving administrator's organization
</li>
<li>
 ${approvalAdmin.OU}              = The approving administrator's organization unit
</li>
<li>
 ${approvalAdmin.C}               = The approving administrator's country
</li>
<li>
 ${approvalAdmin.E}               = The approving administrator's email address from Subject DN
</li>
</ul>
</p><p>
Variables used with  expiring certificates:
<ul>
<li>
  ${expiringCert.CERTSERIAL}      = The serial number of the certificate about to expire
</li>
<li>
  ${expiringCert.EXPIREDATE}      = The date the certificate will expire
</li>
<li>
  ${expiringCert.CERTSUBJECTDN}   = The certificate subject DN
</li>
<li>
  ${expiringCert.CERTISSUERDN}    = The certificate issuer DN
</li>
</ul>
</p>
</subsection>

<subsection name="Examples">
<p>
In certain circumstances, e.g. when you need to comply with PCI
or the lighter levels of FIPS-140/160, it may be required to
configure a 2 step issuance process.

This can by done by using the notifications.

Create 3 email notifications:
<ol>
<li>To: USER<br/>
	Email notification to -just- the user with the URL to
	pick up the cert and the username. Make clear in
	the message that he or she will be contacted by
	the approving admin with the password.
	</li>
<li>To: ${approvalAdmin.E}<br/>
	Email notification to the apporiving admin with 
	the password (but not the username) and a message
	which makes clear that this password is to be
	passed to the user - by phone or f2f (but not
	by email).
</li>
<li>To: ca-team@foo... **<br/>
	Email notification of the issuing to the auditor
	mailing lists - without above username/password.
</li>
</ol>
</p>
</subsection>

</section>

<section name="Printing of User Data">
<p>
From EJBCA 3.4 it is possible to have userdata printed on a printer
whenever an end entity is added or edited. The functionality is
practically the same as for notifications.
</p><p>
This is configured in the end entity profiles by selecting a printer,
the number of copies and uploading a SVG formatted template. There 
exists a template in 'src/cli/svgTemplate/Batch PIN envelope print.svg' 
that can be used for testing.
</p><p>
For more information how to write EJBCA SVG templates see: http://wiki.ejbca.org/ (Administration->hardtokenprofiles). 
</p><p>
One good SVG client can be downloaded from inkscape.org 
</p><p>
In order to renew the list of available printers you must restart
the http session since the list is cached for performance reasons.
</p></section>

<section name="Approving Actions">
<p>
It is possible to have other administrators (1-5) to approve an action in order to make sure the correct data is entered.
</p>
<p>
Currently are the following actions are enabled for approvals :
<ul>
<li>Add End Entity</li>
<li>Edit End Entity</li>
<li>Change User Status</li>
<li>Revoke End Entity</li>
<li>Revoke Token (approval for each certificate)</li>
<li>Revoke Certificate</li>
<li>Reactivate Certificate On Hold</li>
</ul>
</p><p>
In the main menu there is a new option 'Approve Actions' that lets the 
administrator to search for waiting requests and review its data and finally 
gives his approval or reject the action.
</p><p>
<i>Configuring Approvals</i>
</p><p>

Approvals are configured for each CA, in the 'Edit Certificate Authorities' page and for each certificate profile in 
the 'Edit Certificate Profiles' page. 
Just select the actions that needs approval and the number of approvers required and save. The actions 'Add End Entity', 
'Change End Entity' and 'Change User Status' are all covered by the setting 'Add/Edit End Entity'. 'Revoke End Entity',
'Revoke Certificate', 'Revoke Token' and 'Reactivate Certificate' are covered by setting 'Revocation'. 
Approvals will be required if the CA or the certificate profile enforces it and in case the number of approvers differs 
between the CA and the certificate profile the largest number of approvers will be used.
</p><p>
<i>Authorizing Approving Administrators</i>
</p><p>
In order to authorize an administrator to review approval requests do one of the following.
</p><p>
Using Basic Rule Sets:
</p><p>
Give an admin group the role of SuperAdmin, CAAdmin or RAAdmin with Approve End Entities selected.
</p><p>
The SuperAdmin and CAAdmin gives access to approve rules not associated with any end entity profile 
(I.e dual authenticated CA configuration (Not implemented yet)) while the RAAdmin only can approve actions 
related to authorized end entity profiles.
</p><p>
Using Advanced Rule Sets:
</p><p>
There are three new access rules: 
<ul>
<li><i>'/cafunctionality/approve_caaction'</i>, a rule that gives access to non end entity profile related actions 
like approving CA editing and creation (not implemented yet).  An administrator must have either this rule or the 
'/rafunctionalty/approve_end_entity' in order to access the 'Approve Actions' web pages.</li>
<li><i>'/rafunctionalty/approve_end_entity'</i>, a rule (along with the corresponding end entity profile rule) that 
gives access to end entity profile related access rules, like adding and editing end entities. The administrator must 
also have the 'approve_end_entity rule' for at least one of the '/endentityprofilerules/' in order to approve any 
actions.</li>
<li><i>'/endentityprofilerules/&lt;endentityprofilename&gt;/approve_end_entity'</i>see previous rule.</li>
</ul>
</p><p>
<i>Two Different Approval Requests</i>
</p><p>
In the system there are basically two different classes of requests. One is requests to do some action, like adding an 
end entity, and that is executed directly after the last required administrator has approved the action. This type is 
called 'Executable Action Request'. The other type are requests to get hold of some information, like hard token 
PUK codes or archived keys. This kind of request is approved when the last administrator gives his consent and is valid 
for a defined period of time (in conf/ejbca.properties). In this case is the requesting administrator supposed to poll the 
approval request if it has been approved or not. These requests are called 'Non-Executable Action Requests'. 
</p><p>
<i>Explanation of approval status</i>
</p><p>
Here follows an explanation of what the different approval requests statuses.
<ul>
<li><i>Waiting</i>: Means that the action request is waiting to be processed by authorized administrators, request are 
valid for the time specified by approval.defaultrequestvalidity in conf/ejbca.properties before it is set to status Expired.</li>
<li><i>Approved</i>: Means that the action request is approved and is valid for the amount of time specified by 
approval.defaultapprovalvalidity in conf/ejbca.properties. After this it is set to Expired. Used by action requests that are 
not executable.</li>
<li><i>Rejected</i>: Means that the action request is rejected and won't be allowed. The rejection lasts the amount of time 
specified by approval.defaultapprovalvalidity in conf/ejbca.properties. After this it is set to Expired and a new request can 
be done. Used by action requests that are not executable.</li>
<li><i>Expired</i>: Means that the action request isn't valid any more and cannot be processed. The requesting administrator 
has to make a new request in order to approve it.</li>
<li><i>Expired and Notified</i>: Same as 'Expired' but also indicates that the requesting administrator has been notified 
about that his request have expired.</li>
<li><i>Executed</i>: Means that the action request have been executed successfully. Used by action requests that are executable.</li>
<li><i>Execution Failed</i>: Means that the action request failed for some reason during execution, see log for more information.
 Used by action requests that are executable.</li>
<li><i>Execution Denied</i>: Means that the action request hasn't been approved and will not be executed. The difference with status 
'Rejected' is that this status is only used with executable requests and don’t have any expire time. This means that the requesting 
administrator can apply again directly after the rejection.</li>
</ul>
</p><p>
<i>Approval Notification</i>
</p><p>
EJBCA approval functionality have been enhanced to sent notifications about approval requests.
</p><p>
To enable approval notification go to the system configuration page and check the 'Use Approval Notification' checkbox.
You are also required to set the email-address to the approving administrators. This should be a mail-alias to all administrators that should be able to review approval requests and the from address that should be used when EJBCA sends emails.
</p><p>
Then whenever an approval request is created an e-mail is sent both to the requesting admin (if he has an e-mail configured in his user data) and to the approval administrators.
</p><p>
When the approving administrators have recieved the mail, there is a link directly to the approve request page where he can review the requests. When he has approved and rejected the requested all the other administrators in notified about this.
</p><p>
The text of notifications is configured in src/intresources.xx.properties. See the ' Dynamic Substitution Variables' section in this manual for a list of available variables.
</p><p>
Remember to configure mail-server settings in the ejbca.properties file.
</p>
</section>

<section name="Framework for External User Data Sources">
<p>
In EJBCA 3.3 there exists a basic framework of custom user data sources 
for importing user data from existing databases. 
</p>
<p>These instructions is intended for EJBCA developers.</p>
<p>Currently there exists a standalone framework for implementing 
custom user data sources in the same way as for custom publishers. Later 
on will ready made LDAP and AD userdatasources be implemented to be used 
out of the box. 
</p>
<p>A custom userdatasource have two extra fields of data</p>
<p>The first one is a set of CA ids that the userdatasource is applicable to. 
It can have a constant BaseUserDataSource.ANY_CA.
</p>
<p>The second is a set of fields instructing the RA interface GUI which fields that 
should be modifyable by the RA and which that should be fixed. Important, there 
is not connection between the user data source, isModifyable data and the end entity profile 
isModifyable data. The userdata source is only an instruction to the RA gui then when the 
userdata is added will it be matched against the end entity profile, and it's the data 
in the end entity profile that really counts. 
</p>
<p>Tip. The RA gui should read non-modifyable data twice since the RA could 
change the postdata even if the form have a field as disabled. 
</p>
<p>
To implement a custom user data source do the following: 
<ol>
<li>Create a class implementing the interface 
org.ejbca.core.model.ra.userdatasource.ICustomUserDataSource containing the methods: 
init(), fetch() and testConnection(), see org.ejbca.core.model.ra.userdatasource.DummyCustomUserDataSource 
for an simple example implementation. 
</li>
<li>Create a jar file containing the class and deploy it to the application server.</li>
<li>Make the user data source available to EJBCA by adding a userdata source, choose 'Custom user data source' 
as type and enter it's classpath and properties (using the same semantics as a regular java property file). 
</li>
<li>
Now it is possible to fetch userdata from the userdata source from custom implemented webpages using the 
UserDataSourceSession session bean calling the method 
java.util.Collection IUserDataSourceSessionLocal.fetch(Admin admin, Collection userdatasourceids, String searchstring) method. 
</li>
</ol>
</p>
</section>
<section name="Framework for Reports">
<p>
Jasper Reports and JFreeChart. 
The reports function can be accessed from the Admin-GUI under 'Supervisor Functions->Reports'.
<br/>
JasperReports files can be created using the free tool
iReport (http://jasperforge.org/sf/projects/ireport). The report definition file is under src/adminweb/WEB-INF/reports/reports.jrxml.
There are a few pre-defined reports, and suggestions for more real-usage reports are welcome.
</p>
<p>
To create a new report:
<ul>
<li>Create a report definition file and put in src/adminweb/WEB-INF/reports/*.jrxml</li>
<li>Add a new method generating the report in src/java/org/ejbca/ui/web/admin/reports/ReportsManagedBean.java</li>
<li>Add potential new methods to src/java/org/ejbca/ui/web/admin/reports/ReportsDataSource.java</li>
<li>Edit src/adminweb/reports/resportslist.jsp and add a call to the new method in ReportsManagedBean</li>
</ul>
</p>
</section>

<section name="Services Framework">
<p>
EJBCA has a framework for timer services, i.e. procedures 
that should be run on a timely basis. Currently there exists five types of 
services:
<ul>
<li>a 'CRL Updater' that automatically updates the CRL.</li>
<li>a 'Certificate Expiration Checker' that checks if a CA have certificates about to expire and 
sends an email notification to the end user and/or the administrator.</li>
<li>a 'User Password Expire Service' that checks if a user have not enrolled for a new certificate within a 
certain amount of time after been registered, and expires the users possibility to enroll.</li>
<li>a 'Renew CA Service' that checks if CA certificates are about to expire and renews them.</li>
<li>a 'Publisher queue process service' that retries failed publishing.</li>
</ul>
It is also possible to easily write plug-ins for customized services.
</p><p>
A service consists of the components, a worker doing the actual work, an interval 
determining the time to the next time the service should run and an action (optional) 
of what should be done if a certain condition occurs.
</p>

<subsection name="Configuration">
<subsubsection name="Workers">
<p>
The worker is the class that will be executed when the service runs. Each worker can have different worker specific configuration. 
</p>
</subsubsection>
<subsubsection name="Intervals">
<p><i>Periodical Interval</i></p>
<p>
Defines in days/hours/minutes/seconds of how often the worker will be run.
</p>
</subsubsection>
<subsubsection name="Actions">
<p><i>Mail Action</i></p>
<p>
Action that sends an email notification when the service is executed and have the following settings:
<ul>
<li>
<i>Sender Address</i> - The from-address used in the email.
</li>
<li>
<i>Receiver Address</i> - The to-address of the email of it 
isn't specified by the worker.
</li>
</ul>
</p>
</subsubsection>
</subsection>

<subsection name="Currently Available Workers">

<p><b>CRL Update Worker</b></p>
<p>
The CRL Updater have the same functionality as the current JBoss Service and will in 
the future replace the old variant. I checks if any of the CA:s need a new CRL 
and updates it if necessary. The worker have no settings and only supports the 
periodical interval and no action.
</p>
<p>
The CRL update worker should never run simultaneously on two nodes, or simultaneously on one node.
To avoid running more than one instance on a single node there is a semaphore that inhibits more than one 
instance of the worker to run in a single JVM. If a worker starts and another worker is already running
the worker is rescheduled to run on the next planned interval, and immediately terminated.
<br/>
To avoid running any two services on two nodes simultaneously, the service have a time stamp that is set when it runs, and 
schedules the next run before the actual work is started. This time stamp makes it possible for another node to determine of 
the service is already running on another node and not start running.
</p><p>
In practice what this leads to is that a service will always run on a single node, the same node every time.  
</p>
<p><b>Certificate Expiration Check Worker</b></p>
<p>
A worker that checks if a CA have certificates about to expire and sends an email 
notification the the end user and/or administrator. 
The worker have the following settings:
<ul>
<li>
<i>CAs to Check</i> - Select here which CAs that should be searched for expiring certificates.
</li>
<li>
<i>Time before notification is sent</i> - The number of Days/Hours/Minutes/Seconds that should 
remain of the certificates validity before the notification is sent.
</li>
<li>
<i>Send notification to end user</i> - Check this if a notification should be sent to 
the owner of the certificate. Observe that the end user must have an email set in 
the user database (not necessarily in the certificate) in order for the service to 
send the notification.
</li>
<li>
<i>Notification Subject to End User</i> - The e-mail subject.
</li>
<li>
<i>End User Message</i> - Message body of the notification. Here can the substitution 
variables be used defined in the 'Email Notifications' section.
</li>
<li>
<i>Send notification to Administrator</i> - Check this if a notification should be sent 
to some defined administrator-mail address. The address of the administrator is 
configured in the Mail Action component.
</li>
<li>
<i>Notification Subject to Administrator</i> - The e-mail subject.
</li>
<li>
<i>Administrator Message</i> - Message body of the notification. Here can the 
substitution variables be used defined in the 'Email Notifications' section.
</li>
</ul>
</p>
<p>Note: you may configure <i>multiple</i> certificate expiration services set with different
<i>Time before notification is sent</i> values in order to further alert the user or administrator
that a certificate is about to expire.</p>
<p><b>User Password Expire Service</b></p>
<p>
A worker that checks if a user has not enrolled for a new certificate within a specified amount of time
after the user was last edited. If the user has not enrolled within this time, the user's status is set to 
Generated and the user will not be able to enroll. 
The worker have the same basic setting as the 'Certificate Expiration Check Worker', except for 
'Time before notification is sent' which is replaced by:
<ul>
<li>
<i>Time until user password expire</i> - The number of Days/Hours/Minutes/Seconds that a user should be able to 
enroll for a certificate, i.e. the time before the user's password expire.
</li>
</ul>
</p>

<p><b>Renew CA Service</b></p>
<p>
The renew CA service can be used to automatically renew CAs that are about to expire. This might be used for SubCAs that
are valid only short periods of time. The specific settings are:
<ul>
<li><i>CAs to Check</i> - which CAs should be checked, and renewed if they are about to expire.</li>
<li><i>Time before CA expires to renew</i> - the amount of time before the CA actually expires that the service should renew the CA.</li>
</ul>
For CAs using soft keystores and not using the default password, auto-activation is required. 
</p>

<p><b>Publisher queue process service</b></p>
<p>
The publisher queue process service processes the publisher queue. In the publisher queue, entries where publishing failed is collected. 
This service will try to re-publish entries from this queue. The specific settings are:
<ul>
<li><i>Publishers to check</i> - which publishers should this service check and re-publish for. You can run one service for each publisher or one service for all publishers.</li>
</ul>
</p>
<note>
<p>
If you run one service for each publisher you should onle configure one publisher in every service. Do not let two services handle the same publisher.
</p>
</note>
<p>To read on how the algorithm to prevent excessive database load etc is done, the easiest way is to read in the java file for class PublishQueueProcessWorker.
</p>
<p>The same algorithm as for the CRL update worker is used to make sure the service only runs in one instance on one node.</p>

</subsection>

<subsection name="Writing Customized Services">
<p>
It is possible to write customized component plug-ins that can be used with 
other standard (or customized plug-ins) and this section explains the steps 
necessary.
</p><p>
Common for all the components is that it is required to create a class implementing 
the components interface. Then you have to create a jar containing the necessary 
plug-in classes and deploy it to application server so it is included in the 
class-path. The next step is to create a service using the custom component by 
specifying the class path and optionally the custom properties used by the component. 
The properties field have the same syntax as a regular Java property file.
</p>
<subsection name="CustomWorker">
<p>
A Custom worker must implement the org.ejbca.core.model.services.IWorker interface. 
But a simpler way is to inherit the BaseWorker class. Then you have to implement one 
method 'void work()'  doing the actual work every time the service framework decides 
it is time. The work method can make a call to the action (optional) component by 
'getAction().performAction(someActionInfo);' The action info can vary depending on 
the action component but it must implement the ActionInfo interface.
</p><p>
If something goes wrong during the work should a ServiceExecutionFailedException be 
thrown with a good error message.
</p><p>
See org.ejbca.core.model.services.workers.DummyWorker for an example implementation.
</p>
</subsection>
<subsection name="CustomInterval">
<p>
A Custom Interval must implement the org.ejbca.core.model.services.IInterval 
interface. But a simpler way is to inherit the BaseInterval class. You then have to 
implement one method 'public long getTimeToExecution();' which should return the 
time in seconds until the next time the service is run. Or it should return 
DONT_EXECUTE it the service should stop running.
</p><p>
See org.ejbca.core.model.services.intervals.DummyInterval for an example implementation.
</p>
</subsection>
<subsection name="CustomAction">
<p>
A Custom Interval must implement the org.ejbca.core.model.services.IAction interface. 
But a simpler way is to inherit the BaseAction class. Then should only one method be 
implemented 'performAction(ActionInfo actionInfo)' that should perform the action 
according to the defined properties and the ActionInfo (all optional). If something 
goes wrong during the processing of the action should a ActionException be thrown.
</p><p>
See org.ejbca.core.model.services.actions.DummyAction for an example implementation.
</p>
</subsection>
</subsection>
</section>
<section name="Hardware Security Modules (HSM)">
<p>
EJBCA have support for several HSMs. Each HSM has it's own interface for key generation and maintenance, specific
to the HSM and independent of EJBCA. You should make sure you are familiar with how your HSM works.
</p>
<p>
When configuring a CA to use a HSM in the administration GUI it is a property field where properties unique to this very HSM is specified. All implemented HSM modules are using the same property keywords to define the identity and the purpose of the keys to be used. These keywords are:
<ul>
<li>certSignKey      - the key to be used when signing certificates, can be RSA or ECDSA.</li>
<li>crlSignKey       - the key to be used when signing CLSs, can be RSA or ECDSA.</li>
<li>keyEncryptKey    - the key to be used for key encryption and decryption, this must be an RSA key.</li>
<li>testKey          - the key to be used by HSM status checks, can be RSA or ECDSA.</li>
<li>hardTokenEncrypt - the key to be used for hardtoken encryption and decryption. PUK will be decrypted by this key.</li>
<li>defaultKey       - the key to be used when no other key is defined for a purpose. If this is the only definition then this key will be used for all purposes.</li>
<li>pin              - optional pin code used for auto-activation of CA token, see below. Not recommended for high security set-ups, but very useful in some cases.</li>
</ul>
</p><p>
You may omit defaultKey if you want to be sure that the right key is used, but then all the other keys must be specified. It's recommended that the certificate and CRL signing keys are linked to the same key since different keys are rarely supported by verifying applications.
</p><p>
When implementing support for a new HSM the 'KeyStrings' class could be used to manage the key properties described above. When it is an JCA/JCE API for the HSM it could also be wise to extend the BaseCAToken class.
</p><p>
Same activation code must be used for all keys used by a CA. 
</p><p>
EJBCA 3.1 and later has build-in support for the nCipher nShield HSM.
</p><p>
EJBCA 3.2 and later also has an implementation for the Eracom HSM (now SafeNet ProtectServer). The configuration was changed to 3.3.
</p><p>
EJBCA 3.3 and later has an implementation for the SafeNet Luna HSM.
</p><p>
EJBCA 3.5 and later has an implementation for a generic PKCS#11 provider, tested with Utimaco and nCipher.
</p><p>
EJBCA 3.6 adds tested support for AEP KeyPer and ARX CoSign and Bull TrustWay.
</p><p>
Since EJBCA 3.6 the recommended HSM connector is to use the PKCS#11 interface. Any old jce implementations still exists but are no longer developed. 
</p>
<p>
PrimeKey Solutions is selling a module called PrimeCardHSM that implements a flexible HSM using low cost smart cards. 
</p>
<subsection name="Auto-activation of CA tokens">
<p>
The 'pin' property is used to be able to automatically activate a CA token. The activation code may be specified in the property field with the keyword 'pin'. 
If this property is not specified then the CA has to be manually activated after each restart or re-deployment of EJBCA. 
<br/>
Manual activation is done in the admin-GUI under 'Basic Functions->View Information', or using the cli 'bin/ejbca.sh ca activateca'.
</p><p>
The 'pin' property can use a clear text password or an encrypted one.
<br/>(encrypted is only available in EJBCA >= 3.5):
</p>
<source>
pin foo123
pin 6bc841b2745e2c95e042a68b4777b34c
</source>
<p>
These two properties contains the same password. The encrypted pin value can be obtained with the command 'bin/ejbca.sh encryptpwd':
</p>
<source>
$ bin/ejbca.sh encryptpwd foo123
Using JBoss JNDI provider...
Please note that this encryption does not provide absolute security, ....
Enter word to encrypt:
foo123
Encrypting pwd 'foo123'
6bc841b2745e2c95e042a68b4777b34c
</source>
<p>
NOTE: This encryption is not high security encryption, it is only meant to protect the password for accidental viewing. 
The encryption uses a build in encryption key in EJBCA.
With an encrypted pin you can for example bring up the 'Edit CAs' page in the admin-GUI without everyone around immediately seeing your password.
<br/>
If an attacker gets hold of the encrypted value it is easy to decrypt using the source code of EJBCA.
</p>
</subsection>

<subsection name="HSMs and DSA or ECDSA">
<p>
Support for DSA or ECDSA in HSMs are dependant on the support for the algorithms in the HSM manufacturers JCE provider.
You have to check if that support is available.
</p>
</subsection>

<subsection name="Generic PKCS#11 provider">
<p>
A PKCS#11 wrapper has been used to implement support for tokens with PKCS#11 libraries. The PKCS#11 provider have been 
tested with Utimaco Cryptoserver and nCipher nShield/netHSM and SafeNet ProtectServer and SafeNet Luna and AEP Keyper and ARX CoSign and Bull TrustWay.
</p>
<p>
Besides the keys previously described the property field of the administration GUI should contain the following properties:
<ul>
<li>slot                - the slot of the CA.</li>
<li>slotListIndex	- the index number in the slot list for the slot of the CA</li>
<li>sharedLibrary       - the shared PKCS#11 library to be used.</li>
<li>attributesFile - a file specifying PKCS#11 attributes (used mainly for key generation).</li>
<li>keyspec          - optional key specification used when generating new HSM keys from within the admin GUI. Keyspec that is used as first choice when generating new keys in the GUI of form "1024" for RSA keys, "DSA1024" for DSA keys and secp256r1 for EC keys.
If keyspec is not given EJBCA tries to generate a key with the same specification as the current cert signing key.</li>
</ul>
</p><p>
But only one of 'slot' or 'slotListIndex' should exist.
</p><p>
Attributes file is in the format specified in the "JavaTM PKCS#11 Reference Guide". See http://java.sun.com/javase/6/docs/technotes/guides/security/p11guide.html 
and the examples further down in this file. An attributes file for nCipher typically looks like this:
</p>
<source>
attributes(generate,CKO_PRIVATE_KEY,*) = {
  CKA_PRIVATE = true
  CKA_SIGN = true
  CKA_DECRYPT = true
  CKA_TOKEN = true
}
</source>
<note>
If you are using an attributesFile and have more than one CA using the same slot it is very important that BOTH CA token properties configurations contains the attributesFile. 
This is because the attributes are applied when the provider is installed during startup. If one configuration does not have the attributesFile it can not be applied later on by the other configuration. 
</note>
<p>
The tool "$EJBCA/clientToolBox-dist/ejbcaClientToolBox.sh PKCS11HSMKeyTool" is used administrate and generate keys. Use it without parameters to get all valid options.
Keys may be generated in two ways. Examples:
</p>
<source>
./clientToolBox-dist/ejbcaClientToolBox.sh PKCS11HSMKeyTool generate hsmp11.so 2048 defaultKey 1
</source>
<source>
./clientToolBox-dist/ejbcaClientToolBox.sh PKCS11HSMKeyTool generate hsmp11.conf 2048 defaultKey
</source>
<p>
The first example uses the default attributes of the HSM and are then using specified slot and PKCS#11 library.
The second uses a configuration file.
The contents of the file is specified in the PKCS#11 wrapper documentation from Sun.
Often it is enough to use the default but with some HSM it necessary to define some PKCS#11
attributes for the generated key.
</p>
<p>hsmp11.conf looks for example like this for a SafeNet ProtectServer Gold:</p>
<source>
name=SafeNet
library=/opt/PTK/lib/libcryptoki.so
slot=1
attributes(*,*,*) = {
  CKA_TOKEN = true
}
attributes(*,CKO_PRIVATE_KEY,*) = {
  CKA_PRIVATE = true
  CKA_SIGN = true
  CKA_DECRYPT = true
  CKA_EXTRACTABLE = true
  CKA_SENSITIVE = true
}
</source>
<p>
All keys to be used has to be generated before the application server is started.
</p>

<subsubsection name="Generated HSM objects">
<p>
EJBCA (the java PKCS#11 provider) needs three object on the HSM, which are all generated by the generate commands above:
<ul>
<li>A private key</li>
<li>A public key</li>
<li>A certificate - this is simply a holder of the public key used by java, and not the real certificate of a CA</li>
</ul>
</p>
<note>
Normally when generating keys on the PKCS#11 HSM there will be a label on the certificate but not on the private and public key.
You can add a CKA_LABEL attribute to the attributes file to get a label on the private and public keys as well.
The value of the attribute is a hexadecimal string starting with "0h". These labels are normally seen only when you use the native HSM tools to list and manipulate objects.
</note>
<p>
The above example would then include:
</p>
<source>
attributes(*,*,*) = {
  CKA_TOKEN = true
  CKA_LABEL = 0h6b657931
}
</source>
<p>The example above gives the label 'key1' to the private key. You can give any label by simply looking up the hex codes of characters in the ascii table.
</p>
</subsubsection>

<subsubsection name="SUN or IAIK PKCS#11 Provider">
<p>
The IAIK PKCS#11 provider have support for more algorithms than the SUN provider, and therefore you can choose which provider to use.
EJBCA first tries to load the IAIK provider, and if that is not available it uses the SUN provider. The SUN provider is always available in 
JDK 5 and later. To enable the IAIK provider you must do the following:
<ul>
<li>Purchase server licenses for the IAIK PKCS#11 provider and obtain the files. Visit their website for more information.</li>
<li>Copy three jar files to the application servers class path, for JBoss this is usually APPSRV_HOME/server/default/lib. The jar files needed are:
iaikPkcs11Provider.jar, iaikPkcs11Wrapper.jar and iaik_jce.jar.</li>
<li>Copy the PKCS#11 provider shared library to the library search path for your platform. On linux this might be done by copying libpkcs11wrapper.so to /usr/lib.</li>
<li>Start JBoss, EJBCA should now use the IAIK PKCS#11 provider instead of the SUN provider.</li>
</ul>
</p>
</subsubsection>
</subsection>

<subsection name="Utimaco PKCS#11">
<p>
The Utimaco PKCS11 module have a configurable timeout (AppTimeout) that clears all session information if you do not use the keys for some time.
The default time-out is 30 minutes, which may be way too short if your CA is not very very active.
We recommend that you set this timeout to a longer value, several days.
<br/>Put a configuration file in /etc/utimaco/cs2_pkcs11.ini:
</p>
<source>
[Global]
Timeout = 5000
Logging = 0
Logpath = /tmp

[CryptoServer]
Device     = TCP:3001@172.16.175.128
Timeout    = 600000
AppTimeout = 172800
SlotCount  = 100
</source>
<p>
The timeout in this example of 172800 seconds will allow your CA to idle for a long time.
</p>
<p>
When using a PKCS#11 token you should first create keys with the command: $EJBCA_HOME/clientToolBox-dist/ejbcaClientToolBox.sh PKCS11HSMKeyTool generate
</p><p>
Each CA should have its own slot.
</p><p>
Each slot must have been initialized before keys could be generated on the them. This includes setting a user PIN for it. The slot must also require login. Tools for doing this is not provided from EJBCA. The HSM vendor should provide this tool.
</p><p>
Here follows an example on how to initialize a slot and generate keys to be used by EJBCA. The password is user1:
</p>
<source>
./p11tool Slot=1 InitToken=officer1
./p11tool Slot=1 Label=CVCA LoginSO=officer1 InitPin=user1
$EJBCA/clientToolBox-dist/ejbcaClientToolBox.sh PKCS11HSMKeyTool generate ./libcs2_pkcs11.so 4096 signKey 1
PKCS11 Token [SunPKCS11-libcs2_pkcs11.so-slot1] Password:
Creating certificate with entry signKey.
$EJBCA/clientToolBox-dist/ejbcaClientToolBox.sh PKCS11HSMKeyTool generate ./libcs2_pkcs11.so 2048 defaultKey 1
PKCS11 Token [SunPKCS11-libcs2_pkcs11.so-slot1] Password:
Creating certificate with entry defaultKey.
$EJBCA/clientToolBox-dist/ejbcaClientToolBox.sh PKCS11HSMKeyTool generate ./libcs2_pkcs11.so 512 testKey 1
PKCS11 Token [SunPKCS11-libcs2_pkcs11.so-slot1] Password:
Creating certificate with entry testKey.
</source>
<p>You can view the pkcs11 objects created with the command:
</p>
<source>
./p11tool Slot=1 Login=user1 ListObjects
</source>
<p>
This is a example of a property field when creating the CA:
</p>
<source>
slot 1
defaultKey defaultKey
certSignKey signKey
crlSignKey signKey
testKey testKey
pin user1
sharedLibrary /opt/utimaco/p11/libcs2_pkcs11.so
</source>
<p>
Utimaco have an emulator for their CryptoServer LAN HSM that can be used for test and development. 
If you have the emulation kit there is a howto in doc/howto/cryptoserver-lan-emulator.txt with steps to follow 
in order to use it with EJBCA.
</p>
<p>
You can check the status of a CryptoServer LAN device, for example the emulator with:
</p>
<source>
./csadm Device=TCP:3001@172.16.175.128 GetState
</source>
</subsection>

<subsection name="nCipher nShield/netHSM">
<p>
This subsection describes how the nShield card from nCipher is used.
</p><p>
First the card has to be installed and admin and operator card sets has to be created. This is described in step 1.
</p><p>
Step 2 describes environments variables that must be set before generating keys and installing a new CA.
</p><p>
Step 3-5 describes PKCS#11 keys are generated and how different CAs within an installation is configured to use these keys.
In earlier versions of this manual it was also described how the nCipher JCA provider could be used by EJBCA. This has been removed since PKCS#11 keys are better in every respect.
</p>
<strong>1. Install the nShield card</strong>
<p>
Make sure you have all necessary software and drivers installed and created the user and group nfast. In Linux should the software be installed to /opt/nfast or the location environment variable NFAST_HOME is pointing to.
</p>
<p>
login as the nfast user: 'sudo su nfast'
</p>
<p>
Set the nCipher box to initialization mode by setting the switch to mode 'I'.
</p>
<p>
Clear the nCipher box by pressing the reset button on the device
</p>
<p>
Check that the mode is in 'pre-initialization mode' and not in 'operational':
</p>
<source>
nfast@donny:/home/lars/work$ /opt/nfast/bin/enquiry
Server:
 enquiry reply flags  none
 enquiry reply level  Six
 serial number        41C5-BA04-6D2C
 mode                 operational
 version              2.23.6
 speed index          147
 rec. queue           442..642
 level one flags      Hardware HasTokens
 version string       2.23.6cam5, 2.22.6cam7 built on Apr 25 2005 18:15:46
 checked in           00000000431dca98 Tue Sep  6 18:58:00 2005
 level two flags      none
 max. write size      8192
 level three flags    KeyStorage
 level four flags     OrderlyClearUnit HasRTC HasNVRAM HasNSOPermsCmd ServerHasPollCmds FastPollSlotList HasSEE HasKLF HasShareACL HasFeatureEnable HasFileOp HasLongJobs ServerHasLongJobs AESModuleKeys NTokenCmds LongJobsPreferred
 module type code     0
 product name         nFast server
 device name
 EnquirySix version   4
 impath kx groups
 feature ctrl flags   none
 features enabled     none
 version serial       0
 remote server port   9004

Module #1:
 enquiry reply flags  none
 enquiry reply level  Six
 serial number        41C5-BA04-6D2C
 mode                 pre-initialisation
 version              2.22.6
 speed index          147
 rec. queue           9..152
 level one flags      Hardware HasTokens InitialisationMode PreMaintInitMode
 version string       2.22.6cam7 built on Apr 25 2005 18:15:46
 checked in           00000000426636cd Wed Apr 20 13:02:37 2005
 level two flags      none
 max. write size      8192
 level three flags    KeyStorage
 level four flags     OrderlyClearUnit HasRTC HasNVRAM HasNSOPermsCmd ServerHasPollCmds FastPollSlotList HasSEE HasKLF HasShareACL HasFeatureEnable HasFileOp HasLongJobs ServerHasLongJobs AESModuleKeys NTokenCmds LongJobsPreferred
 module type code     6
 product name         nC1002P/nC3022P
 device name          #1 nFast PCI device, bus 0, slot 13.
 EnquirySix version   5
 impath kx groups     DHPrime1024
 feature ctrl flags   LongTerm
 features enabled     StandardKM
 version serial       24
 rec. LongJobs queue  8
 SEE machine type     gen1AIF
nfast@donny:/home/lars/work$
</source>
<p>
Create the security world with the command :
</p>
<source>
nfast@donny:/home/lars/work$ /opt/nfast/bin/new-world -i -Q 1/1
15:04:50 WARNING: Module #1: preemptively erasing module to see its slots!

Create Security World:
 Module 1: 0 cards of 1 written
 Module 1 slot 0: empty
 Module 1 slot 0: unknown card
 Module 1 slot 0:- passphrase specified - overwriting card
Card writing complete.

security world generated on module #0; hknso = 6807e0b031c4f797b739ec33ca7dba05279cf54f
nfast@donny:/home/lars/work$
</source>
<p>
The '-Q K/N' option tells how many administration cards that are created N. K of these cards will be needed to restore a module with a backup of the security world.
'1/1' is a bad choice in production but will do in this example. Choose K>=3 and N>K in production.
</p>
<p>
Change mode on the switch on the device to mode 'O'.
</p>
<p>
Press the 'Clear' button again.
</p>
<p>
Check with 'enquiry' that the mode have changed to 'Operational'
</p>
<p>
Example on creation of operator cards:
</p>
<source>
nfast@donny:/home/lars/work$ /opt/nfast/bin/createocs -m 1 -Q 2/3 -N ejbca -M -p -T 0

Creating Cardset:
 Module 1: 0 cards of 3 written
 Module 1 slot 0: Admin Card #1
 Module 1 slot 0: empty
 Module 1 slot 0: blank card
 Module 1 slot 0:- passphrase specified - writing card (naming `EJBCA card 1')
 Module 1: 1 card of 3 written
 Module 1 slot 0: remove already-written card #1
 Module 1 slot 0: empty
 Module 1 slot 0: blank card
 Module 1 slot 0:- passphrase specified - writing card (naming `EJBCA card 2')
 Module 1: 2 cards of 3 written
 Module 1 slot 0: remove already-written card #2
 Module 1 slot 0: empty
 Module 1 slot 0: blank card
New passphrases do not match; please try again.
 Module 1 slot 0:- passphrase specified - writing card (naming `EJBCA card 3')
Card writing complete.

cardset created; hkltu = 8d30f2ab5bdccacd8a4333aefed2c0ea1ff0e6db
nfast@donny:/home/lars/work$
</source>
<p>
This will generate 3 cards of the card set named 'ejbca'. Any 2 of these cards will be needed when generating keys and starting ejbca. Different card sets could be used for different CAs.
</p>
<note>
The preload command (see below) must always be called as the same user unless the directory /opt/nfast/kmdata/preload is removed.
<br/>If you get a "HostDataAccessDenied" error when running preload or starting JBoss, it is because the
file permissions on the directory /opt/nfast/kmdata/preload is wrong. It's probably because you (sometime) ran 
preload as another user, such as root or nfast.
</note>
<p>
Load the card set so that keys protected by the card set could be generated:
</p>
<source>
jboss@donny:~$ /opt/nfast/bin/preload -c ejbca pause
Loading cardsets:
ejbca on modules 1

Loading `ejbca':
 Module 1 slot 0: `ejbca' #3 (`EJBCA card 3')
 Module 1 slot 0:- passphrase supplied - reading card
 Module 1 slot 0: `ejbca' #3 (`EJBCA card 3'): already read
 Module 1 slot 0: empty
 Module 1 slot 0: `ejbca' #2 (`EJBCA card 2')
 Module 1 slot 0:- passphrase supplied - reading card
Card reading complete.

Loading complete; now pausing
</source>
<strong>Step 2. Setup the environment.</strong>
<p>
Login as the user that is running the application server. This user must be a member of the nfast group. 
<br/>
The following environment variables should be set for this user:
<ul>
<li>JAVA_HOME (/usr/local/jdk1.5.0_11 or similar)</li>
<li>APPSRV_HOME (/home/jboss/jboss-4.2.0.GA or similar)</li>
<li>EJBCA_HOME (/home/jboss/ejbca or similar)</li>
<li>NFAST_HOME (/opt/nfast)</li>
</ul>
</p>

<strong>Step 3. Create PKCS#11 keys that should be used on the nShield card</strong>
<p>
Start a new window and login as the same user (jboss user).
Create a file (ocs-sunpkcs11.cfg) with the following contents:
</p>
<source>
name=NFastJava
library=/opt/nfast/toolkits/pkcs11/libcknfast.so
slotListIndex=1
attributes(generate,CKO_PRIVATE_KEY,*) = {
  CKA_PRIVATE = true
  CKA_SIGN = true
  CKA_DECRYPT = true
  CKA_TOKEN = true
}
</source>
<note>
An ECC key could not be used with preload (at least not the curve secp160r1). Such a key is generated OK and could be used as long as the current preload is running. But if all preload processes are stopped and then if then preload is restarted the key could not be used. This means that ECC could only be used with a 1/n OCS.
</note>
<p>
Now 3 keys protected by the key set 'ejbca' are created like this:
</p>
<source>
jboss@donny:~/work/test/keygen$ ~nfast/bin/preload -c ejbca $EJBCA_HOME/clientToolBox-dist/ejbcaClientToolBox.sh PKCS11HSMKeyTool generate ./ocs-sunpkcs11.cfg 4096 defaultRoot
Executing /home/lars/work/java/ejbca/clientToolBox-dist/ejbcaClientToolBox.sh PKCS11HSMKeyTool generate ./ocs-sunpkcs11.cfg 4096 defaultRoot
PKCS11 Token [SunPKCS11-NFastJava] Password: 
Creating certificate with entry default.
jboss@donny:~/work/test/keygen$ ~nfast/bin/preload -c ejbca $EJBCA_HOME/clientToolBox-dist/ejbcaClientToolBox.sh PKCS11HSMKeyTool generate ./ocs-sunpkcs11.cfg 2048 cryptRoot
Loaded pkcs11 uc17cfc7c330e613af5709789ff823a476177e233c-d165e440baa8dc9963780c682836ba17513e8cbf key (RSAPrivate) on modules 1
Executing /home/lars/work/java/ejbca/clientToolBox-dist/ejbcaClientToolBox.sh PKCS11HSMKeyTool generate ./ocs-sunpkcs11.cfg 2048 cryptRoot
PKCS11 Token [SunPKCS11-NFastJava] Password: 
Creating certificate with entry crypt.
jboss@donny:~/work/test/keygen$ ~nfast/bin/preload -c ejbca $EJBCA_HOME/clientToolBox-dist/ejbcaClientToolBox.sh PKCS11HSMKeyTool generate ./ocs-sunpkcs11.cfg 1024 test
Loaded pkcs11 uc17cfc7c330e613af5709789ff823a476177e233c-27cfdae84bf4298f2dde83cd00980a81bcf095bf key (RSAPrivate) on modules 1
Executing /home/lars/work/java/ejbca/clientToolBox-dist/ejbcaClientToolBox.sh PKCS11HSMKeyTool generate ./ocs-sunpkcs11.cfg 1024 test
PKCS11 Token [SunPKCS11-NFastJava] Password: 
Creating certificate with entry test.
jboss@donny:~/work/test/keygen$ 
</source>
<strong>Step 4. Start EJBCA with nShield HSM</strong>
<p>
To start EJBCA, preload must be running with the required key stores loaded. In this example this was done in step 2. Preload is now used to start jboss:
</p>
<source>
jboss@donny:~/work/test/ca$ ~nfast/bin/preload -c ejbca $JBOSS_HOME/bin/run.sh
</source>
<strong>Step 5. Create a new CA in the web GUI of EJBCA</strong>
<p>
Choose PKCS#11 as "CA Token Type".
</p><p>
Properties are defined according to the "Generic PKCS#11 provider" section above.
</p><p>
All preloaded operator card sets (OCSs) has it's own slot. It is not possible to predict the slot ID. But the index of the slot in the slot list is predictable. "slotListIndex" must therefore be used. If only one OCS is preloaded this index is always 1.
</p><p>
If several CAs is sharing same OCS (and hence slot) each key (identified by a key label) may only be used for one CA but the test key. Same test key could be used for all CAs.
</p><p>
Example with previous generated keys where signRoot is used for CAs signing, and defaultRoot is used for everything else (encryption):
</p><p>
When preload is used no authentication code is needed to activate a CA. You could give any value for the authentication code when activating.
The 'pin' property could be used in the configuration to automatically activate a CA. The value of this property could be anything.
</p>
<source>
defaultKey defaultRoot
testKey test
keyEncryptKey cryptRoot
hardTokenEncrypt cryptRoot
pin dummy
slotListIndex 1
sharedLibrary /opt/nfast/toolkits/pkcs11/libcknfast.so
</source>
<strong>Using module protected keys</strong>
<p>
Module protected keys do not need an operator card set. Hence no PIN code is needed to active such a key. A CA could be configured to use a keystore with module protected keys.
</p><p>
When using PKCS#11 slot 0 is used to indicate module protection. The only other thing except using slot 0 you have to do is to use a slightly different configuration file when creating the key. The file could look like this:
</p>
<source>
name=NFastJava
library=/opt/nfast/toolkits/pkcs11/libcknfast.so
slotListIndex=0
attributes(generate,CKO_PRIVATE_KEY,*) = {
  CKA_SIGN = true
  CKA_DECRYPT = true
  CKA_TOKEN = true
}
</source>
<strong>Not using preload.</strong>
<p>
If a 1/N card set is used then preload don't have to be used (but it can be used). If preload is not used then jboss could be made to start automatically
at boot time.
</p><p>
For PKCS#11 simple do not use the preload command. The authentication code is now needed when activating the CA.
</p>
<strong>Using more than one OCS.</strong>
<p>
It is also possible to use more than one OCS. This is needed when you want different CAs protected by different OCSs.
</p>
<p>
The key to get this working is to set the environment variable <strong>CKNFAST_LOADSHARING=1</strong>. This environment variable is also implicitly set when running with preload.
</p>
<p>
To get a list of all available slots do:
</p>
<source>
lars@milton:~/work/test/nCipher$ CKNFAST_LOADSHARING=1 ~nfast/bin/ckinfo
PKCS#11 library CK_INFO
       interface version 2.01
                   flags 0
          manufacturerID "nCipher Corp. Ltd               "
      libraryDescription "nCipher PKCS#11 1.58.48         "
  implementation version 1.58

slots[0] CK_SLOT_INFO
         slotDescription "                                                                "
          manufacturerID "nCipher Corp. Ltd               "
                   flags 5
                   flags &amp; CKF_TOKEN_PRESENT
                   flags &amp; CKF_HW_SLOT
        hardware version 0.00
        firmware version 0.00


slots[0] CK_TOKEN_INFO
                   label "loadshared accelerator          "
          manufacturerID "nCipher Corp. Ltd               "
                   model "                "
            serialNumber "                "
                   flags 201
                   flags &amp; CKF_RNG
                   flags &amp; CKF_DUAL_CRYPTO_OPERATIONS
       ulMaxSessionCount 1024
     ulMaxRwSessionCount 1024
             ulMaxPinLen 18446744073709551615
             ulMinPinLen 0
     ulTotalPublicMemory CK_UNAVAILABLE_INFORMATION
      ulFreePublicMemory CK_UNAVAILABLE_INFORMATION
    ulTotalPrivateMemory CK_UNAVAILABLE_INFORMATION
     ulFreePrivateMemory CK_UNAVAILABLE_INFORMATION
        hardware version 0.00
        firmware version 0.00
                 utcTime "                "

slots[1] CK_SLOT_INFO
         slotDescription "1of2_0                                                          "
          manufacturerID "nCipher Corp. Ltd               "
                   flags 6
                   flags &amp; CKF_REMOVABLE_DEVICE
                   flags &amp; CKF_HW_SLOT
        hardware version 0.00
        firmware version 0.00


slots[1] Token not present
slots[2] CK_SLOT_INFO
         slotDescription "2of3_0                                                          "
          manufacturerID "nCipher Corp. Ltd               "
                   flags 6
                   flags &amp; CKF_REMOVABLE_DEVICE
                   flags &amp; CKF_HW_SLOT
        hardware version 0.00
        firmware version 0.00


slots[2] Token not present
slots[3] CK_SLOT_INFO
         slotDescription "ejbca                                                           "
          manufacturerID "nCipher Corp. Ltd               "
                   flags 6
                   flags &amp; CKF_REMOVABLE_DEVICE
                   flags &amp; CKF_HW_SLOT
        hardware version 0.00
        firmware version 0.00


slots[3] Token not present
slots[4] CK_SLOT_INFO
         slotDescription "2of3_1                                                          "
          manufacturerID "nCipher Corp. Ltd               "
                   flags 6
                   flags &amp; CKF_REMOVABLE_DEVICE
                   flags &amp; CKF_HW_SLOT
        hardware version 0.00
        firmware version 0.00


slots[4] Token not present
slots[5] CK_SLOT_INFO
         slotDescription "1of2_1                                                          "
          manufacturerID "nCipher Corp. Ltd               "
                   flags 7
                   flags &amp; CKF_TOKEN_PRESENT
                   flags &amp; CKF_REMOVABLE_DEVICE
                   flags &amp; CKF_HW_SLOT
        hardware version 0.00
        firmware version 0.00


slots[5] CK_TOKEN_INFO
                   label "1of2_1                          "
          manufacturerID "nCipher Corp. Ltd               "
                   model "                "
            serialNumber "ee6071c52a77370c"
                   flags 20D
                   flags &amp; CKF_RNG
                   flags &amp; CKF_LOGIN_REQUIRED
                   flags &amp; CKF_USER_PIN_INITIALIZED
                   flags &amp; CKF_DUAL_CRYPTO_OPERATIONS
       ulMaxSessionCount 1024
     ulMaxRwSessionCount 1024
             ulMaxPinLen 18446744073709551615
             ulMinPinLen 0
     ulTotalPublicMemory CK_UNAVAILABLE_INFORMATION
      ulFreePublicMemory CK_UNAVAILABLE_INFORMATION
    ulTotalPrivateMemory CK_UNAVAILABLE_INFORMATION
     ulFreePrivateMemory CK_UNAVAILABLE_INFORMATION
        hardware version 0.00
        firmware version 0.00
                 utcTime "                "
</source><p>
You then got to identify your OCSs with the slot index. The "label" in the list gives the name you gave to your OCS when creating it. Then you get the slot list index from the x in "slot[x]. Use this for "slotListIndex" in the CA properties.
</p><p>
When using a 1/n OCS one card of the OCS must be inserted when activating a CA. If the OCS is persistent then the card could be removed and you could then activate another CA by inserting its OCS.
</p><p>
To make the OCS persistent use the "-p" argument at "createocs" time, if this is not the case as soon as the card is removed then the cardset will unload itself.
</p><p>
When using k/n OCS where k>1 you got to load all OCSs to be used with preload and then start the application server also with preload. Example:
</p><source>
lars@milton:~/work/test/nCipher$ ~nfast/bin/preload -c 2of3_0 pause
-- follow instruction to insert cards and enter pins. --
-- then press ctr-z --
lars@milton:~/work/test/nCipher$ bg 
lars@milton:~/work/test/nCipher$ ~nfast/bin/preload -c 2of3_1 exit
-- follow instruction to insert cards and enter pins. --
</source><p>
When the application server then is started with preload, CAs defined for slot list index 2 and 4 could be activated. When activating a CA when running preload no PIN has to be given. Also when the application server is started with preload then only CAs of preloaded slots could be activated (not preloaded 1/n slots could not be used).
</p>
</subsection>
<subsection name="nCipher load balancing">
<p>
If you want to use the Loadsharing with multiple modules, be it PCI 
cards of NetHSM's then you must ensure you have a 1/N OCS and the N 
quorum to be able to have enough cards to be inserted in every HSM you 
want to load balance the key at server/CA start up when logging in.
</p><p>
Same security world got to be loaded in all modules participating.
</p><p>
After setting up the first netHSM, do the following on the second:
<ul>
<li>Use the panel of the second netHSM to configure the rfs</li>
<li>Use the panel of the second netHSM to load the security world</li>
<li>Use the panel of the second netHSM to configure clients</li>
<li>on each client run: /opt/nfast/bin/nethsmenroll</li> 
</ul>
</p><p>
With load balancing you need to have CKNFAST_LOADSHARING=1. Preload implicitly sets CKNFAST_LOADSHARING.
</p><note>
If preload is used fail-over to the other HSM if one of the HSMs is broken is not working.
</note><p>
Example of starting jboss:
</p><source>
ejbca@subcallb:/usr/local/ejbca> CKNFAST_LOADSHARING=1 ../jboss/bin/run.sh
</source><p>
When activating a CA you need a smart card from the OCS of the corresponding slot inserted in both HSMs. The OCS got to be 1/n since preload can not be used.
</p><p>Sample PKCS#11 configuration file for generating the CA keys.</p>
<source>
name=NFastJava
library=/opt/nfast/toolkits/pkcs11/libcknfast.so
slotListIndex=1
attributes(generate,CKO_PRIVATE_KEY,*) = {
  CKA_PRIVATE = true
  CKA_SIGN = true
  CKA_DECRYPT = true
  CKA_TOKEN = true
}
</source> 
<p>Sample catoken.properties for generating the initial AdminCA on the netHSM, or entering in the admin-GUI when creating a new CA.</p>
<source>
defaultKey defaultKey
certSignKey defaultSign
crlSignKey defaultSign
testKey testKey
sharedLibrary /opt/nfast/toolkits/pkcs11/libcknfast.so
slotListIndex 1
</source>
</subsection>

<subsection name="AEP Keyper">
<p>
The documement xxxxxxKeyperP11.pdf (xxxxxx is six digits) describes how the HSM is installed.
As default there is only one slot - 0.
</p>
<p>
The HSM needs a configuration file when generating the keys. It could look like this:
</p>
<source>
name=Keyper
library=/Users/flourish/Keyper/PKCS11Provider/pkcs11.GCC4.0.1_i386.so.4.04
slot=0
attributes(generate,CKO_PRIVATE_KEY,*) = {
  CKA_SIGN = true
  CKA_DECRYPT = true
  CKA_TOKEN = true
}
</source>
</subsection>

<subsection name="ARX CoSign">
<p>
This HSM only works on Windows. The installation is done with an installer and the setup with a GUI.
</p><p>
All generated keys will be on slot 1. The PIN code used when activating the keys could be anything since the authentication is made when login on to the user that runs EJBCA.
The shared library is called C:\windows\system32\sadaptor.dll 
</p>
</subsection>

<subsection name="Bull Trustway">
<p>
Do the installation of the card according to Install_and_Use_cc2000.pdf. When the card is "installed" it is ready to use with EJBCA. Only one slot (slot index 0) is available. The slot is not protected by any PIN so an undefined 'pin' (empty) property may be used in the configuration.
</p><p>
The configuration file used when generating a key with 'pkcs11HSM.sh' must look like this:
</p>
<source>
name=TrustWay
library=../../bullInstall/linux/libgpkcs11cc2000.so
slotListIndex=0
attributes(generate,CKO_PRIVATE_KEY,*) = {
  CKA_TOKEN = true
}
</source>
<p>
When using PKCS11HSMKeyTool and starting EJBCA, libcc2000_tok.so and libgpkcs11cc2000.so must be in the library path. Examples:
</p>
<source>
lars@maud:~/work/test/ca$ ls -al ../../bullInstall/linux
total 412
dr-xr-xr-x 4 lars lars   4096 28 nov 14.28 .
drwxr-xr-x 4 lars lars   4096 20 apr 21.05 ..
dr-xr-xr-x 6 lars lars   4096 20 apr 21.38 CardAdmin_java
-r-xr-xr-x 1 lars lars  35804 28 nov 14.15 cc2000_lx24.tgz
-r-xr-xr-x 1 lars lars  74955 28 nov 14.15 cc2000_src.tgz
-r-xr-xr-x 1 lars lars     14 28 nov 14.15 cc2000S_release
-r-xr-xr-x 1 lars lars    633 28 nov 14.15 desinstall
-r-xr-xr-x 1 lars lars    171 28 nov 14.15 gpkcs11cc2000.rc
dr-xr-xr-x 2 lars lars   4096 28 nov 14.28 include
-r-xr-xr-x 1 lars lars   7209 28 nov 14.15 install
-r-xr-xr-x 1 lars lars 101788 28 nov 14.15 libcc2000_tok.so
-r-xr-xr-x 1 lars lars 146820 28 nov 14.15 libgpkcs11cc2000.so
-r-xr-xr-x 1 lars lars   3843 28 nov 14.15 LisezMoi.txt
-r-xr-xr-x 1 lars lars   3410 28 nov 14.15 ReadMe.txt
lars@maud:~/work/test/ca$ LD_LIBRARY_PATH=../../bullInstall/linux ../../java/jboss/bin/run.sh
</source>
<source>
lars@maud:~/work/test/keygen$ LD_LIBRARY_PATH=~/work/bullInstall/linux ../../PWE/ejbca/clientToolBox-dist/ejbcaClientToolBox.sh PKCS11HSMKeyTool generate trustWay.cfg 2048 defaultkey
</source>
</subsection>

<subsection name="SafeNet Luna">
<subsubsection name="Install HW and SW">
<p>
Please consult the SafeNet documentation regarding the installation of HW and SW.
</p>
</subsubsection>
<subsubsection name="Configuration">
<p>
Do all steps (1-7 in the section) in "A - Configuration (Setup Appliance after Installing)" of in the html document "Luna SA Online Help -- Document # 800274-xxx" that should be found on your installation CD.
Some notes about our test setup:
</p><p>
<strong>Step 3:</strong> You may do nothing here. But note that changing many of the policies will reset the HSM. This means that you can't change any of these policies later on.
</p><p>
<strong>Step 4:</strong> Note that a new partition could be added at any time. Each partition will be represented as a PKCS#11 slot. Make sure to write the Record Partition Client Password (TP) in a text file. In the example the password is btqx-EFGH-3456-7/K9 for the first created partition (slot 1). The TP will later be used as PIN for the slot. 
</p><p>
<strong>Step 5:</strong> A good idea is to allow partitions (p11 slots) to be "activated". If a partition is not activated you got to insert the black key in the PED and give PIN each time a resource in the HSM is used by the client. So in most cases you want to be able to activate a partition:
lunash:>partition changePolicy -partition partition1 -policy 22 -value 1
</p><p>
<strong>Step 6:</strong>
You don't have to be in the '/usr/LunaSA/bin' directory as the documentation says. We think it is preferable to be in a directory owned by yourself so you don't have to use sudo.
Example of running in your own directory:
</p><source>
lars@milton:~/work/test/luna$ /usr/lunasa/bin/ctp admin@lunasa.int.primekey.se:server.pem .
</source><p>
Example of occasions when sudo must be used is registration of server and adding client certificates (root owned files and directories are used and updated):
</p><source>
lars@milton:~/work/test/luna$ sudo /usr/lunasa/bin/vtl addServer -n lunasa.int.primekey.se -c server.pem
lars@milton:~/work/test/luna$ sudo /usr/lunasa/bin/vtl createCert -n milton
</source><p>
<strong>Step 7:</strong>
Each partition assigned to a client will be represented by a PKCS#11 slot for this client. It seems that each new added partition will be put last in the slot list and the number of a slot will be slot list index plus 1 (list index starting with 0 and slot number starting with 1).
To get the partition slot mapping on the client do:
</p><source>
lars@milton:~/work/test/luna$ /usr/lunasa/bin/vtl verify

The following Luna SA Slots/Partitions were found: 

Slot    Serial #        Label
====    ========        =====
 1      950784001       partition1
 2      950784002       partition2
</source><p>
Now the client may use these slot with EJBCA and it's tools
</p>
</subsubsection>
<subsubsection name="Activating slots">
<p>
Before a partition (slot) could be used by a client it must be activated. This is described in 'B - Administration &amp; Maintenance  > Activating and AutoActivating Partitions'. The partition policy required do the activation must have been set (see step5 above). Example to activate a partition:
</p><source>
lunash:>hsm login
lunash:>partition activate -partition partition1 -password btqx-EFGH-3456-7/K9
</source><p>
The password is from the configuration step 4. See above.
</p>
</subsubsection>
<subsubsection name="Generate keys on a slot">
<source>
lars@milton:~/work/test/luna$ ~/work/PWE/ejbca/clientToolBox-dist/ejbcaClientToolBox.sh PKCS11HSMKeyTool generate ./sunpkcs11.cfg 2048 rsa2048_1
0    [main] INFO  org.ejbca.util.keystore.KeyTools  - Using SUN PKCS11 provider: sun.security.pkcs11.SunPKCS11
PKCS11 Token [SunPKCS11-Luna] Password: 
Created certificate with entry rsa2048_1.
lars@milton:~/work/test/luna$ ~/work/PWE/ejbca/clientToolBox-dist/ejbcaClientToolBox.sh PKCS11HSMKeyTool generate ./sunpkcs11.cfg secp160r1 secp160r1_1
0    [main] INFO  org.ejbca.util.keystore.KeyTools  - Using SUN PKCS11 provider: sun.security.pkcs11.SunPKCS11
PKCS11 Token [SunPKCS11-Luna] Password: 
Created certificate with entry secp160r1_1.
</source><p>
The password btqx-EFGH-3456-7/K9 (see above) is used.
</p><p>
The contents of ./sunpkcs11.cfg :
</p><source>
name=Luna
library=/usr/lunasa/lib/libCryptoki2_64.so
#library=/usr/lib/pkcs11-spy.so
slot = 1

attributes(generate,*,*) = {  
  CKA_TOKEN = true
}
attributes(generate,CKO_PUBLIC_KEY,*) = {
  CKA_ENCRYPT = true
  CKA_VERIFY = true
  CKA_WRAP = true
}
attributes(generate, CKO_PRIVATE_KEY,*) = {
  CKA_EXTRACTABLE = false
  CKA_DECRYPT = true
  CKA_SIGN = true
  CKA_UNWRAP = true
}
</source>
</subsubsection>
<subsubsection name="List and test all keys that could be used by EJBCA">
<source>
lars@milton:~/work/test/luna$ ~/work/PWE/ejbca/clientToolBox-dist/ejbcaClientToolBox.sh PKCS11HSMKeyTool test /usr/lunasa/lib/libCryptoki2_64.so 1
Test of keystore with ID 1.
0    [main] INFO  org.ejbca.util.keystore.KeyTools  - Using SUN PKCS11 provider: sun.security.pkcs11.SunPKCS11
PKCS11 Token [SunPKCS11-libCryptoki2_64.so-slot2] Password: 

Testing of key: rsa2048_1
SunJCE version 1.7SunPKCS11-libCryptoki2_64.so-slot2 version 1.7; modulus length: 2048; byte length 245. The docoded byte string is equal to the original!
Signature test of key rsa2048_1: signature length 256; first byte 28; verifying true
Key statistics. 
Signings per second: 369; Decryptions per second: 135

Testing of key: secp160r1_1
Signature test of key secp160r1_1: signature length 48; first byte 30; verifying true
Key statistics. 
Signings per second: 68 No crypto available for this key.
</source>
</subsubsection>
</subsection>

<subsection name="SafeNet ProtectServer">
<subsubsection name="install SW">
<p>Normally you run the SafeNet installation program on the CD (safeNet-install.sh). The 'alien' command below can be used to 
install at least the emulator on a debian bux (ubuntu for example).
</p>
<source>
fakeroot alien -c $CDROM/Linux64/ptkc_sdk/ETcpsdk-3.32.00-1.x86_64.rpm
sudo dpkg -i ./etcpsdk_3.32.00-2_amd64.deb
</source>
</subsubsection>
<subsubsection name="Set passwords for admin SO och admin user">
<source>
LD_LIBRARY_PATH=/opt/ETcpsdk/lib/linux-x86_64 /opt/PTK/bin/ctconf
</source>
</subsubsection>
# skapa 10 slottar
<subsubsection name="create 10 slots">
<source>
LD_LIBRARY_PATH=/opt/ETcpsdk/lib/linux-x86_64 /opt/PTK/bin/ctconf -c10
</source>
</subsubsection>
<subsubsection name="Set no public crypto">
<source>
LD_LIBRARY_PATH=/opt/ETcpsdk/lib/linux-x86_64 /opt/PTK/bin/ctconf -fc
</source>
</subsubsection>
<subsubsection name="Initialize slot 5. Sets SO and user password">
<source>
LD_LIBRARY_PATH=/opt/ETcpsdk/lib/linux-x86_64 /opt/PTK/bin/ctkmu t -s5 -lroot
</source>
</subsubsection>
<subsubsection name="Generate a key on slot 5">
<source>
$EJBCA_HOME/clientToolBox-dist/ejbcaClientToolBox.sh PKCS11HSMKeyTool generate ./slot5.cfg 2048 default
</source>
</subsubsection>
<subsubsection name="Contents of ./slot5.cfg">
<source>
name=SafeNet
library=/opt/PTK/lib/libcryptoki.so
#library=/usr/lib/pkcs11-spy.so
slot=5
attributes(*,*,*) = {
  CKA_TOKEN = true
}
attributes(*,CKO_PRIVATE_KEY,*) = {
  CKA_PRIVATE = true
  CKA_SIGN = true
  CKA_DECRYPT = true
  CKA_EXTRACTABLE = true
  CKA_SENSITIVE = true
}
</source>
</subsubsection>
<subsubsection name="Contents of CA Token Properties">
<source>
sharedLibrary=/opt/PTK/lib/libcryptoki.so
defaultKey=default
slot=5
attributesFile=/opt/slot5p11.cfg
</source>
<p>where /opt/slot5p11.cfg is:</p>
<source>
attributes(*,*,*) = {
  CKA_TOKEN = true
}
attributes(*,CKO_PRIVATE_KEY,*) = {
  CKA_PRIVATE = true
  CKA_SIGN = true
  CKA_DECRYPT = true
  CKA_EXTRACTABLE = true
  CKA_SENSITIVE = true
}
</source>
<note>The slot5p11.cfg is needed because the ProtectServer has some strange default attributes. If you do not specify an attributes file the private key will
not be 'sensitive' and will be possible to export in clear text by any user of the HSM. You can see the attributes of the keys by running the test command:
</note>
<source>
./ejbcaClientToolBox.sh PKCS11HSMKeyTool test /opt/PTK/lib/libcryptoki.so 5
...
Testing of key: test
SunJCE version 1.7SunPKCS11-libcryptoki.so-slot3 version 1.7; modulus length: 2048; byte length 53. The docoded byte string is equal to the original!
SunPKCS11-libcryptoki.so-slot3 RSA private key, 512 bits (id 4, token object, sensitive, extractable)
Signature test of key test1: signature length 64; first byte 3d; verifying true
Signings per second: 257
Decryptions per second: 260
</source>
<p>the attributes are listed as "token object, sensitive, extractable", and here is important that is says 'sensitive' (extractable only means that the key can be backed up securely using SafeNet tools).
</p>
<note>
The above means that if you have more than one CA using the same slot it is very important that BOTH CA token properties configurations contains the attributesFile. 
This is because the attributes are applied when the provider is installed during startup. If one configuration does not have the attributesFile it can not be applied later on by the other configuration. 
</note>
</subsubsection>
<subsubsection name="Test and list keys on slot 5">
<source>
$EJBCA_HOME/clientToolBox-dist/ejbcaClientToolBox.sh PKCS11HSMKeyTool test /opt/PTK/lib/libcryptoki.so 5
</source>
</subsubsection>
<note>
The emulator has a bug. Each key of same length that are generated seems to be the same. This means that a slot may only have one key. If a second key is generated for a slot the certificate object for the first key is deleted before writing the certificate object for the new key. This is done since the Sun p11 wrapper provider does not allow two keys that are equal to be present in a keystore.
</note>
</subsection>

<subsection name="Writing support for new HSMs">
<p>
EJBCA have a modular API for HSMs, HardCAToken. For every CA that is created
a HardCAToken object is also created. This object contains among other
things references to keys (or the keys themselves of a soft token is used).

For each HSM hardware that should be supported you need one HardCAToken
class that implementes support for this particular HSM. A hard ca token
plug-in must:
</p>
<ol>
<li>implement ICAToken</li>
<li>it is recommended to extend BaseCAToken, since BaseCAToken implements handling of all properties, autoactivation and such</li>
<li>be loaded at the static initialization if CATokenManager where it is
registered with the CATokenManager using the method
addAvailableCAToken()</li>
<li>Provide a JCE Security Provider that is installed by the module and can be fetched by 
the EJBCA crypto module (BouncyCastle) through the name returned in ICAToken.getProvider().</li>
</ol>
<p>
See HardCATokenSample and/or DummyHardCAToken for samples.
Unlike the sample addAvailableCAToken() must be called with use=true, or
the token will not be usable in EJBCA (as the flag suggests).
</p>
</subsection>

</section>

<section name="LDAP and Publishers">
<p>
EJBCA has a modular support for something we call Publishers. A publisher
can be any external source where you want to send issued certificates and
CRLs to be stored. The most common cases of Publishers, which are
implemented by default in EJBCA are LDAP directories and Active Directory
(which is a special case of LDAP directory).
</p><p>
The Publisher architecture is modular and it's possible to implement custom
publishers that can also be easily integrated and set up in the admin-GUI.
</p><p>
First we will start with describing the built-in publishers.
</p>
<subsection name="LDAP Naming">
<p>
A good book to understand LDAP naming is "Understanding and Deploying LDAP
Directory Services". The recommended method of choosing a naming suffix is
the one described in RFC2247 that maps a DNS domain to a DN. If my DNS
domain is bigcorp.com it will map to the DN "dc=bigcorp,dc=com". The top
node in my LDAP directory will then be "dc=bigcorp,dc=com".
</p><p>
The dc component support is mandated by all of the X.509 RFCs now.
For example, if I have this directory:
</p>
<source>
dc=bigcorp,dc=com
    |
    +-dc=fi
    |
    |
    +-dc=se
        |
        +-cn=Mike Jackson
</source>
<p>
The most understandable method is taking the subject name in
forward order, like:
cn=Mike Jackson,dc=se,dc=bigcorp,dc=com
</p><p>
If the DN is ordered like this it should be published to the correct object
in the tree.
</p><p>
If the DN is ordered reverse, like:
dc=bigcorp,dc=com,dc=se,cn=Mike Jackson
EJBCA will reorder it incorrectly to forward order, so the publishing will
be wrong.
</p><p>
Therefore...
Use forward order like this:
'cn=Mike Jackson,dc=se,dc=bigcorp,dc=com' if using the dc model or
<br></br>
'cn=Mike Jackson,o=bigcorp,c=se' if using the o,c model.
</p><p>
An example image of an LDAP structure can be seen below in HOWTO-LDAP-tree.png.
<img src="screenshots/HOWTO-LDAP-tree.png" />
</p><p>
Making unique LDAP DNs is the next challenge. If you are in a small
organization having the CN will probably work fine, but in a larger
organization there are probably several people with the same name. Somehow
the names must be made unique, and one way is to introduce numbers, initials
etc in the CN. Another way that we recommend is to use uid in the LDAP DN
instead. LDAP DNs will then looks like "uid=tomas,dc=bigcorp,dc=com". Uid is
the users username, normally used for login etc, and you probably already
have some procedure to create unique usernames already.
</p>
</subsection>

<subsection name="LDAP Basics">
<p>
LDAP has an unusual structure, if you are not used to X.500 style naming.
Things are either branches, or leaf nodes. You can't just drop an object
anywhere you like; You need to create the framework to support it.
Sort of like if you wanted to put entries in /etc/hosts, if the directory
/etc did not exist.
</p><p>
First you mkdir /etc, Then you create the file. Then you start putting
things in the file. The difference with LDAP and x.500 is that instead of paths
separate by slashes, you have paths separated by commas and '=' signs.
</p><p>
For example, if you want to make an object
"cn=ldaphost,ou=hosts,dc=yourdom,dc=com",
you first have to make sure "dc=yourdom,dc=com" exists.
<br></br>
Then make sure
<br></br>
"ou=hosts,dc=yourdom,dc=com" exists.
<br></br>
THEN you can try
<br></br>
"cn=ldaphost,ou=hosts,dc=yourdom,dc=com"
</p><p>
EJBCA does not create branches in LDAP.
You have to put them there with other means, before you start publishing.
</p>

<subsubsection name="Using LDAP">
<p>
In Firefox you can for example enter a URL like:
<br></br>
ldap://ip-address-of-ldap-server:389/cn=Tomas Gustavsson,dc=se,dc=bigcorp,dc=com
<br></br>
and it will fetch an address book entry with the information about the user,
including the certificate.
</p><p>
The LDAP url format is described in <a
href="http://www.ietf.org/rfc/rfc2255.txt">RFC2255</a>.
</p><p>
Examples of using LDAP with Firefox can be found in the
howto-section of this web page.
</p><p>
To use LDAP top fetch user certificates and use them for encrypting email
there seems to be a requirement to use SSL connection to the LDAP server
(Account Options->Compositions &amp; Addressing->Edit directories->Edit->Use
Secure Connection), see also below how to configure OpenLDAP for SSL.
</p><p>
Note: When fetching certificates from LDAP with Firefox for example with
URL:
<br></br>
ldap://ldap-server-host/dc=bigcorp,dc=com??sub?(cn=MyName)?(objectclass=*)
<br></br>
To get a checkbox at the fetched certificate, the CA certificate must be
installed in the Windows truststore, not only in Firefox's.
</p><p>
To use SSL against an LDAP server with MS Outlook you must make sure the CN
in the LDAP servers certificate is the same as the hostname. 
An example of adding a user for the LDAP server with the CLI interface is:
</p>e
<source>
bin/ejbca.sh ra adduser ldap password "C=SE,O=Foo,CN=ldap.foo.se" null MyCA null 1 PEM SERVER
</source>
<p>
where ldap.foo.se is the hostname of the LDAP server that Outlook should use.
</p><p>
The CA certificate must also be imported into Windows properly.
</p>
</subsubsection>

<subsubsection name="Configure OpenLDAP">
<p>
The objectclass 'inetOrgPerson' is used by default to store certificates.
</p><p>
Example:
</p>
<source>
dn: cn=Mike Jackson,ou=people,dc=company,dc=com
objectclass: top
objectclass: person
objectclass: organizationalPerson
objectclass: inetOrgPerson
cn: Mike Jackson
sn: Jackson
userCertificate;binary::
</source>
<p>
CAs are published in the form:
</p>
<source>
dn: cn=ejbca,dc=jackson,dc=net
objectClass: top
objectClass: applicationProcess
objectClass: certificationAuthority
cn: ejbca
cACertificate;binary:
certificateRevocationList;binary:
authorityRevocationList;binary:
</source>
<p>
To configure OpenLDAP (version 2.2.5) to include the 'inetOrgPerson' you
must add the following lines to slapd.conf. This is already the default in recent releases:
</p>
<source>
include         /usr/local/etc/openldap/schema/cosine.schema
include         /usr/local/etc/openldap/schema/inetorgperson.schema
</source>
<p>
Don't forget to add the top object by creating an LDIF file (org.ldif):
</p>
<source>
dn: o=AnaTom,c=SE
objectclass: dcObject
objectclass: organization
o: AnaTom
dc: AnaTom

dn: cn=Admin,o=AnaTom,c=SE
objectclass: organizationalRole
cn: Admin
</source>
<p>
And using the command:
</p>
<source>
ldapadd -x -D "cn=Admin,o=AnaTom,c=SE" -W -f org.ldif
</source>
<p>
Check what you have in the LDAP by:
</p>
<source>
/usr/local/bin/ldapsearch -x -b 'o=AnaTom,c=SE' '(objectclass=*)'
</source>
</subsubsection>

<subsubsection name="Configure SSL">
<p>
Create a user in ejbca (this example is for adding a user with the cli
interface, adding a user with the admin-GUI works just as fine).
In the mail ejbca directory type (use simply 'ra' on windows):
</p>
<source>
bin/ejbca.sh ra adduser ldap foo123 "C=SE,O=Foo,CN=ldap" null AdminCA1 null 1 PEM SERVER
bin/ejbca.sh ra setclearpwd ldap foo123
</source>
<p>
Where foo123 is the ldap users password, C=SE... is the users DN and
AdminCA1 is the name you chose for your CA. The user type is end-user (1), keystore type is PEM, and
if using the admin-GUI check 'use batch').
Batch generate the PEM keystore:
</p>
<source>
bin/ejbca.sh batch
</source>
<p>
Copy the resulting files p12/pem/ldap.pem, p12/pem/ldap-CA.pem and
p12/pem/ldap-Key.pem to your LDAP server. In this example the slapd.conf is located in
/usr/local/etc/openldap so we copy the files to that directory. 
Protect theses files so they are only readable by the LDAP server.

Add the following to your slapd.conf:
</p>
<source>
# Use SSL
TLSCipherSuite HIGH:MEDIUM:+SSLv3
TLSCertificateFile /usr/local/etc/openldap/ldap.pem
TLSCertificateKeyFile /usr/local/etc/openldap/ldap-Key.pem
TLSCACertificateFile /usr/local/etc/openldap/ldap-CA.pem
</source>
<p>
Restart slapd:
</p>
<source>
./slapd -h "ldap:/// ldaps:///"
</source>
<p>
and check that it is running with 'ps -ef|grep slapd'.
</p><p>
On SuSE, if using the builtin OpenLDAP you have to enable ldaps in
/etc/sysconfig/openldap:
</p>
<source>
OPENLDAP_START_LDAPS="yes"
</source>
<p>
and then run
</p>
<source>
SuSEconfig
</source>
<p>
and then
</p>
<source>
rcldap start
</source>
<p>
Configure your LDAP publisher in EJBCA to use SSL by checking the checkbox
'Use SSL', the port should change to port 636.
</p><p>
Note! The CA certificate of the (root)CA used to sign the ldap server
certificate must be present in the java trust cert store 
($JAVA_HOME/jre/lib/security/cacerts). If you use
the default CA created when ejbca was installed this is already included.
Otherwise you will have to add it using something like:
First get the CA cert:
</p>
<source>
bin/ejbca.sh ca getrootcert MyCA myca.der -der
</source>
<p>
Then add it to the java trust store:
</p>
<source>
keytool -import -trustcacert -alias MyCA -keystore $JAVA_HOME/jre/lib/security/cacerts -storepass changeit -file myca.der
</source>
<p>
You have to re-start JBoss after adding anything to the java trust store.
</p>
<p>
A guide for configuring OpenLDAP on Solaris can be found at
<a href="http://www.bolthole.com/solaris/LDAP.html">bolthole.com</a>
</p>
</subsubsection>

<subsubsection name="Sample Ubuntu installation">
<source>
- sudo apt-get install slapd ldap-utils
- sudo dpkg-reconfigure slapd
  Configure slapd with your domain and admin password (primekey.se in this case).
- sudo /etc/init.d/slapd restart
- 'ps -ef|grep slap' 
  should show a slapd running
- ldapsearch -x -b 'dc=primekey,dc=se' '(objectclass=*)'
  To look at the results
- slapcat -l backup.ldif
  Make backup
- slapadd -l backup.ldif
- /etc/init.d/slapd restart
  Restore backup
</source>
<p>
Command to add new LDAP nodes:  
</p>
<source>
- ldapadd -x -D "cn=admin,dc=PrimeKey,dc=com" -W -f primekey.ldif
  where primekey.ldif is:

dn: dc=PrimeKey,dc=com
dc: PrimeKey
objectclass: dcObject
objectclass: organization
o: PrimeKey Solutions AB
description: Parent Object for PrimeKey LDAP Directory

dn: ou=Standard,dc=PrimeKey,dc=com
ou: Standard
objectClass: top
objectClass: organizationalUnit
description: Parent Object for all Standard Certificates

dn: ou=High,dc=PrimeKey,dc=com
ou: High
objectClass: top
objectClass: organizationalUnit
description: Parent Object for all High Certificates
</source>
</subsubsection>

</subsection>

<subsection name="Configure LDAP publishers">
<p>
A Publisher is a session bean that implements the IPublishSession interface
and is used to store certificates and CRLs for entities.
EJBCA have support for endless number of publishers simply by defining
publishers in the admin-GUI. The user of EJBCA can implement own publishers, but EJBCA
already comes with a publisher for LDAP.
</p><p>
EJBCA uses a notion of base DN to publish to different LDAP structures. The
DN used in the certificate can be different from the LDAP structure.
</p>

<subsubsection name="Configuring EJBCA">
<p>
To configure the publisher for LDAP:
</p>
<ol>
<li>Choose 'Edit Publishers' in the admin-GUI.</li>
<li>Add a new publisher with a name you define yourself. Edit the publisher and
fill in all the necessary fields.</li>
</ol>
<p>
Generic parameters to LDAP Publisher:
</p>
<ul>
<li>'Hostnames' is ';'-separated list of the hosts where the LDAP servers are
located. E.g. "ldap.company.com" or "ldap1.company.com;ldap2.company.com".
Only the first available of the listed hosts will be used.</li>
<li>'Port' is the port on which the LDAP server listens, default non-SSL is
389.</li>
<li>'Login DN' is the DN of a user on the LDAP server with permissions to add
and update entities.</li>
<li>'Login Password' is the password for the user above.</li>
<li>'Connection timeout' is number of milliseconds a server has to respond before it is
considered unavailable and the next server in the list of hostnames (if any)
is used instead. This timeout is used to probe LDAP servers, to create connections, to bind and to disconnect.</li>
<li>'Read timeout' is number of milliseconds a server has to complete a LDAP search or read operation before it times out and fails.</li>
<li>'Store timeout' is number of milliseconds a server has to complete a LDAP store operation before it times out and fails. This can take a little longer if you store very large CRLs in LDAP.</li>
<li>'Create Nonexisting Users' defines if an LDAP object should be created by EJBCA if it is no existing object 
when EJBCA publishes the certificate.</li>
<li>'Modify Existing Users' defines if attributes (such as email) in existing LDAP objects are replaced with new values and/or added
when an entry is updated with a new certificate. If this option is not activated, existing users will not be touched at all, even not updated with a new certificate.</li>
<li> 'Overwrite Existing Attributes' When 'Modify Existing Users' is set to true this value determines whether to change values of attributes when 
they already exist.</li>
<li> 'Add Nonexisting Attributes' When 'Modify Existing Users' is set to true this value determines whether to add attributes when 
they do not already exist.</li>
<li>'Add multiple certificates per user' defines if we should use multiple certificate entries for each user or only one.
Default only one certificate is added to a user entry in LDAP and if the user gets a new certificate the old one is deleted and replaced with the new one.
If this checkbox is checked certificates are instead appended in LDAP so each user can have multiple certificate entries in LDAP.
Make sure your applications can handle this before enabling this option. Revoking a user will remove all certificates entries for the user.</li>
<li>'Set userPassword attribute' specifies if the LDAP publisher should set the userPassword attribute in the LDAP object. If a user entry with a non-null password is published, 
and this checkbox is checked, the userPassword attribute will be populated with the user's password.</li>
<li>'User Object Class' is the objectclass for the LDAP entries for users,
where user certificates are published. The entry is hierarchical separated by ';' to
build a structure like:
<br></br>
objectclass: top
<br></br>
objectclass: person
<br></br>
objectclass: organizationalPerson
<br></br>
objectclass: inetOrgPerson
<br></br>
This objectclass must allow the attribute 'userCertificate;binary'.
<br></br>
Default 'top;person;organizationalPerson;inetOrgPerson'
</li>
<li>'CA Object Class' is the objectclass for the LDAP entries for CAs, where
CA certificates and CRLs are published. The entry is hierarchical separated by
';' to build a structure. This objectclass must allow the attributes
'cACertificate;binary', 'certificateRevocationList;binary' and
'authorityRevocationList;binary'.
<br></br>
Default 'top;applicationProcess;certificationAuthority'
</li>
<li>'User Certificate Attribute' is the attribute name, in the
userObjectClass, for the users certificate. 
<br></br>
Default 'userCertificate;binary'.
</li>
<li>'CA Certificate Attribute' is the attribute name, in the cAObjectClass,
for the CAs certificate. 
<br></br>
Default 'cACertificate;binary'.</li>
<li>'CRL Attribute' is the attribute name, in the cAObjectClass, for CRLs
(user CRLs) publisher by the CA. 
<br></br>
Default 'certificateRevocationList;binary'.
</li>
<li>'ARL Attribute' is the attribute name, in the cAObjectClass, for ARLs (CA
CRLs) publisher by the CA. 
<br></br>
Default 'authorityRevocationList;binary'
(note that pure ARLs are not implemented yet in EJBCA).
</li>
<li>'LDAP location fields from cert DN'
When configuring the LDAP publisher the BaseDN will be used as the base for
the DN published in LDAP,
and it will be appended to the LDAP location fields selected to be used.
example: If the user DN in EJBCA is "cn=tomas gustavsson, uid=tomasg,
O=PrimeKey Solutions AB, C=SE"
and the BaseDN is "dc=PrimeKey,dc=SE" and the selected LDAP location fields
are "CN".
The LDAP DN used for publishing will be "cn=tomas gustavsson, dc=PrimeKey,
dc=SE", and the "uid=tomasg"
will be added as an attribute in LDAP. The certificate stored under
"cn=tomas gustavsson, dc=PrimeKey, dc=SE"
will have the subjectDN "cn=tomas gustavsson, uid=tomasg, O=PrimeKey
Solutions AB, C=SE".
</li>
</ul>
</subsubsection>

<subsubsection name="Setting up certificate profiles">
<p>
You MUST make a custom certificate profile to publish to LDAP!
</p><p>
To publish in LDAP you must create a Certificate profile in EJBCA that
publishes to LDAP. If the above is configured, there will be a section for
'Publishers' available when creating/editing a certificate profile (with 'Edit Certificate
Profiles').
Choose this, and then when adding end-entities, make sure they use the new
certificate profile and voila, the certs will be published.
</p>
</subsubsection>

<subsubsection name="Different LDAP publishers">
<strong>LDAP Publisher</strong>
<p>
The regular LDAP Publisher works by searching the DN in LDAP.
</p><p>
When ejbca creates an object to publish a certificate to LDAP it firsts builds the DN from the
baseDN and 'LDAP location fields for cert DN'. It checks if the entry exists in the
ldap and either creates or modifies the entry.
</p>
<p>Example: The certificate DN is "CN=Tomas Gustavsson,O=Foo,C=SE", 
the BaseDN in the publisher is "DC=primekey,DC=se" and the CN is selected in "LDAP location fields from cert DN".
<br></br>The resulting DN that EJBCA will search for in the LDAP and create if it does not already exist is 
"CN=Tomas Gustavsson,DC=primekey,DC=se".
</p>
<p>
Using this publisher, if you have multiple trees in your LDAP (for example "ou=foo,dc=primekey,dc=se" and "ou=bar,dc=primekey,dc=se")
you can either:
<ol>
<li>Include both CN and OU in 'LDAP location fields from cert DN' and have your cert DNs like "CN=Tomas,OU=foo,O=MyOrg,C=SE.</li>
<li>Use different publishers for ou=foo and ou=bar and issue certificates for the different OUs with different certificate profiles.</li>
</ol>
</p>
<strong>LDAP Search Publisher (from EJBCA v3.2)</strong>
<p>
The LDAP Search Publisher works by searching the LDAP for existing entries using a user defined search filter. 
If no entries exist in the LDAP when searching for an entry, one is created just like in the regular LDAP Publisher.
</p><p>
The search filter is defined in the two fields under "LDAP search settings":
<ul>
<li>Suffix base DN of LDAP Search - the base for your search filter.</li>
<li>LDAP filter of the search - your LDAP filter.</li>
</ul>
If you build your search filter on DN components, you also have to select thos components as 'LDAP location fields'.
</p>
<p>
The best example of such a search filter is if base is "dc=primekey,dc=se" and filter is "uid=$USERNAME".
The search done by ejbca will be equal to the search:<br></br>
ldapsearch -x -b "dc=primekey,dc=se" "(uid=$USERNAME)"
</p><p>
$USERNAME is replaced by the EJBCA username of the user that has had a new certificate just generated.
Other variables apart from $USERNAME is $EMAIL, $UID, $CN, $O, $OU and $C where these values are taken from the certificate DN.
</p><p>
When a certificate is generated for say user "ldap" EJBCA will perform the search:<br></br>
ldapsearch -x -b "dc=primekey,dc=se" "(uid=ldap)"
</p><p>
The certificate generated for ldap will be published in the object returned by the search. 
This is very useful if you want to publish certificates to an LDAP directory where your users already exists, such as an email directory.
The DN in the LDAP does not have to match the DN in the certificates at all.
</p>
<p>
If more than one entry matches the search, the first returned search result will be used.
</p>
</subsubsection>

<subsubsection name="Publishing to Active Directory">
<p>
When configuring Active Directory LDAP, Bind DN for the users are usually,
cn=user,cn=Users,dc=domain-component1,dc=domain-component2.
<br></br>
For example: cn=Philip Vendil,cn=Users,dc=primekey,dc=se for the domain
primekey.se
</p><p>
If your DN is like "cn=Ejbca1,0=MyOrg,c=SE" 
<br></br>
and your base DN is like "DC=Security,DC=Software,DC=MyOrg".
<br></br>
The publisher for AD should have base DN like
<br></br>
"cn=Users,dc=Security,dc=Software,dc=MyOrg"
</p><p>
For Login DN you should use the full ldap name, for example:
<br></br>
"CN=Administrator,CN=Users,dc=primekey,dc=se"
</p><p>
In order to connect to AD though SSL you should issue a LDAP SSL P12
to the domain controller. According to 
<a href="http://support.microsoft.com/default.aspx?scid=kb;en-us;321051&amp;sd=tech">
MS Article ID 321051</a>
</p><p>
The same certificate is used for both the AD and global catalogue (GC).
Remember to add the CA certificate to the machine that stores trusted root
certificates.
</p><p>
To publish a CRL to Active Directory use a Base DN similar to
</p>
<source>
CN=somename,CN=CDP,CN=Public Key Services,CN=Services,CN=Configuration,DC=somemachine,DC=primekey,DC=se
</source>
<p>
and the "CRL Distribution Point" in the certificate should point to
</p>
<source>
ldap:///CN=Test%20MS%20SC%20Logon%20CA%20v1,CN=somename,CN=CDP,CN=Public%20Key%20Services,CN=Services,
CN=Configuration,DC=somemachine,DC=primekey,DC=se?certificateRevocationList?base?objectClass=cRLDistributionPoint
</source>
</subsubsection>

<subsubsection name="Constructing the DN for an entity to be published">
<p>
The DN to be published is constructed from the certificate DN of the entity to be published.
But if the publisher requires a DN object that is not a part of the certificate DN then the DN defined for entity might be used instead.
</p><p>
The DN of the entity (user or CA) could have more objects than the certificate if "Use a Subset of Subject DN" is defined in the used certificate profile.
</p><p>
The "LDAP Publisher" and the "LDAP Search Publisher" tries the DN of the entity when the certificate DN is missing an object needed in the publishing DN
</p>
</subsubsection>

<subsubsection name="What EJBCA stores/creates/modifies">
<p>
Apart from the DN in the entry a number of attributes are also stored, some
are required by schema, some are optional. EJBCA find attributes in the certificate, if it is an
OU (organizational unit) in the certificate EJBCA uses that to populate the OU attribute in the ldap
entry.
</p><p>
When updating an entry that already exists EJBCA uses replace on the
existing attributes, so if an email attributes already exists and EJBCA finds an email address in
the certificate, the email attribute in ldap is replaced with the email address from the certificate.
</p><p>
Note that attributes are only replaced/updated if the flag "Modify Existing Users" in the Publisher is active. 
The certificate attribute is always updated though.
<br/>
Attributes that are part of the DN, i.e. that reflects the location of the entry in LDAP is not modified, since this 
is usually not allowed.
</p><p>
The attributes that EJBCA creates or replaces are:
</p>
<ul>
<li>cn (common name)</li>
<li>l (locality)</li>
<li>ou (organizational unit)</li>
<li>sn (surname)</li>
<li>gn (givenname)</li>
<li>st (state)</li>
<li>o (organization)</li>
<li>uid (user id)</li>
<li>initials</li>
<li>title</li>
<li>serialnumber - If we have selected to use the SN (serialNUmber DN field) in 'Ldap Location fields', we will also add it as an attribute.</li>
</ul>
</subsubsection>

</subsection>

<subsection name="Extra device schema">
<p>
To store certificates for devices (e.g. routers, toasters etc) in LDAP it
is no really suitable standard object class. inetOrgPerson requires surnames
etc, and the device objectclass does not include a certificate attribute.
</p><p>
Mike Jackson has kindly contributed additional objects that extend the
standard device class with a certificate attribute. 
The ejbcaDevice uses object ids from PrimeKey Solutions AB.
</p>
</subsection>

<subsubsection name="Installation">
<p>
For the Netscape/SUN servers, on UNIX, copy the 85ejbca.ldif file into:
</p>
<source>
/usr/netscape/servers/slapd-hostname/config/schema/
</source>
<p>
and restart the LDAP server.
</p><p>
For OpenLDAP, copy the ejbca.schema file into, e.g.:
</p>
<source>
/usr/local/etc/openldap/schema/
</source>
<p>
and edit slapd.conf to add the following line:
</p>
<source>
include /usr/local/etc/openldap/schema/ejbca.schema
</source>
<p>
then restart the server.
</p>
</subsubsection>

<subsection name="Custom publishers">
<subsubsection name="Developing a custom publisher">
<p>
If your setup makes it very complex to configure multiple certificate
profiles and multiple publishers you might consider writing a custom publisher that
handles things directly according to you needs.
</p><p>
Look in the directory src/java/org/ejbca/core/model/ca/publishers for more
information about writing your own solution. There is an empty custom publisher called
DummyCustomPublisher.java that can be extended.
</p>
</subsubsection>
<subsubsection name="Publishing with an external application">
<p>
A lightweight alternative to developing a new custom publisher for exporting CRLs,
certificates and revokations is to use the General Purpose Custom Publisher (GPCP).
This makes it possible to export DER-encoded CRLs, certificates and/or revokations with
a simple script (using scp or similar). The GPCP creates a temporary file and
executes the script with the full pathname to the temporary file as an argument.
</p><p>
It's possible to let the publisher ignore an error in the execution of a script by
altering the publishers properties. By default, the publisher detects both output to
standard error and a non-zero errorlevel set by the script.
</p><p>
To start using the GPCP, select "Edit Publishers" in the Administration GUI. Add a
publisher "GPCP" and then "Edit" the same. Choose 
</p>
<ul>
<li>Publisher type: Custom Publisher</li>
<li>Class Path: org.ejbca.core.model.ca.publisher.GeneralPurposeCustomPublisher</li>
<li>Properties of Custom Publisher: 
</li>
</ul>
<source>
	crl.application /fullpathname/exportscript.sh
	crl.failOnStandardError &lt;true | false&gt;
	crl.failOnErrorCode &lt;true | false&gt;
	cert.application /fullpathname/exportscript.sh
	cert.failOnStandardError &lt;true | false&gt;
	cert.failOnErrorCode &lt;true | false&gt;
	revoke.application /fullpathname/exportscript.sh
	revoke.failOnStandardError &lt;true | false&gt;
	revoke.failOnErrorCode &lt;true | false&gt;
</source>
<p>
and click "Save and Test Connection" to save the entered information and validate
that the specified applications exist. Select "Edit Certificate Authorities" in
the Administration GUI and select "GPCP" as your new CRL publisher. Click "Save". 
</p>
<p>
<ul>
<li>Test CRL publishing by selecting "Basic Functions" in the Administration GUI and
click "Create CRL".</li>
<li>Test certificate publishing by selecting "Edit Certificate Authorities" in the
Administration GUI, select a CA, click "Edit" and then "Republish CA Certificates".</li>
</ul>
</p>
<p>
More advanced scripts or applications have the ability to use the additional argument
<ul>
<li>cert.application fulltempfilepathname x509type certificateDN issuerDN certHexSerialNumber</li>
<li>revoke.application fulltempfilepathname x509reason certificateDN issuerDN certHexSerialNumber</li>
</ul>
</p>
</subsubsection>
</subsection>

<subsection name="Publisher Queue and failures">
<p>To achieve robust publishing there is a publisher queue. When a publisher fails the published data is stored in a 
separate table in the database, the PublishQueue. This queue can then be processed by a service (see Services Framework).
</p>
<p>
Publishers can also be configured not to publish directly at all, but to store everything in the queue, which is later processed.
The benefit of this approach is that publishing is instant. When issuing certificates the CA does not have to wait for all publishers to 
finish. If there are many publishers this might delay the issuing process slightly.
</p>
<p>
Publisher Settings:
</p>
<ul>
<li>'Current length' - displays the number of new entries in the queue in the intervals &lt;1 min, 1-10 min, 10-60 min and &gt;60 min.</li>
<li>'No direct publishing, only use queue' - when enabled, the publisher does not try to publish directly but instead pushes the 
update to the queue for later processing by a Publish Queue Process Service.</li>
<li>'Keep successfully published items in database' - when enabled items stored in the publisher queue will not be removed when real 
publishing has been done, status will merely be changed from PENDING to SUCCESS.</li>
<li>'Use queue for CRLs' - determines if the publisher queue should handle CRLs or not for this publisher.</li>
<li>'Use queue for certificates' - determines if the publisher queue should handle certificates or not for this publisher.</li>
</ul>
</subsection>

</section>

<section name="ECDSA keys and signatures">
<p>
EJBCA support ECDSA signature keys in addition to RSA. You can create a CA using ECDSA keys both using the admin-GUI 
and using the cli (bin/ejbca.sh ca init).
</p>
<subsection name="Generated keys and certificate">
<p>
When generating a CA in EJBCA up to three keys and certificates are generated:
<ul>
<li>A CA signing keypair and certificate</li>
<li>An encryption keypair, used for encrypting keyrecovery information</li>
<li>An OCSP signer keypair and certificate</li>
</ul>
When using ECDSA keys, the CA signing keypair and the OCSP signer keypair will be the ECDSA keytype you select when creating the CA.
The CA signing and OCSP signing certificate will be signed using your selected signature algorithm.
<br/>
The encryption keypair will always be RSA, using 1024 or 2048 bit key length. It uses the key length set in the admin-GUI or 2048 bit by default using the cli. A dummy encryption certificate will be created using SHA1WithRSA.
</p>
</subsection>
<subsection name="Using ECDSA with an HSM">
<p>
See the section about HSM property parameters to see which keys can be of different sorts. 
Note that the keyEncryptKey can not be ECDSA, but should be an RSA key. Your HSM must support both ECDSA and RSA keys. 
You can use PKCS11HSMKeyTool from the clientToolBox to generate keys and certificate requests from an HSM.
</p>
</subsection>
<subsection name="ECC named curves vs explicit parameters">
<p>
Normally you want to generate requests and certificates using named curves encoded in certificates and requests, this is what IETF recommends. 
In some cases you need to generate the request and certificate with explicit parameters instead, this is for instance mandated by ICAO for usage in CSCA's and DS's for ePassports.
</p>
<ul>
<li>When generating requests with <i>clientToolBox PKCS11HSMKeyTool certreq</i> you can specify a flag to use explicit parameters instead of named curves. Named curves is the default.</li>
<li>When EJBCA issues certificate with public keys from certificate requests (csr's) the key in the certificate will be the same as in the csr. If the csr uses explicit parameters, so will the issued certificate.</li>
</ul>
</subsection>
<subsection name="Named curves">
<p>
EJBCA supports the curves that BouncyCastle supports, they include named curves from Nist, SEC and X9.62.
New curves may be supported without this list being updated, give it a try!
See <a href="http://www.bouncycastle.org/wiki/">Bouncycastle wiki</a> for more information about ECDSA curves.
</p>
<p>
X9.62 curves:
<ul>
<li>prime192v1</li>
<li>prime192v2</li>
<li>prime192v3</li>
<li>prime239v1</li>
<li>prime239v2</li>
<li>prime239v3</li>
<li>prime256v1</li>
</ul>
SEC curves:
<ul>
<li>sect571r1</li>
<li>sect409r1</li>
<li>sect283r1</li>
<li>sect233r1</li>
<li>sect163r2</li>
<li>secp521r1</li>
<li>secp256r1</li>
<li>secp224r1</li>
<li>secp384r1</li>
</ul>
Nist curves:
<ul>
<li>P-224</li>
<li>P-256</li>
<li>P-384</li>
<li>P-521</li>
<li>B-163</li>
<li>B-233</li>
<li>B-283</li>
<li>B-409</li>
<li>B-571</li>
</ul>
Teletrust curves:
<ul>
<li>brainpoolp160r1</li>
<li>brainpoolp160t1</li>
<li>brainpoolp192r1</li>
<li>brainpoolp192t1</li>
<li>brainpoolp224r1</li>
<li>brainpoolp224t1</li>
<li>brainpoolp256r1</li>
<li>brainpoolp256t1</li>
<li>brainpoolp320r1</li>
<li>brainpoolp320t1</li>
<li>brainpoolp384r1</li>
<li>brainpoolp384t1</li>
<li>brainpoolp512r1</li>
<li>brainpoolp512t1</li>
</ul>
</p>
</subsection>
<subsection name="ImplicitlyCA curves">
<p>
X9.62 provides 3 alternatives for the parameters that can be found in an EC public key.
One of these is named implicitlyCA and indicates that the parameters are defined else where, implicit in the name of the 
certification authority (CA) that issued the key. 
In this situation the actual parameters appear in the ASN.1 encoding of the key as a DER encoded NULL.
<br/>
As the definition says, when the key is used, the parameters will have to come from elsewhere. 
In EJBCA the parameters are configured in <i>conf/ejbca.properties</i>.
</p>
<p>
When creating a new CA using the implicitlyCA facility, you first configure your curve parameters in conf/ejbca.properties and issue commands:
<ul>
<li>ant clean</li>
<li>ant deploy</li>
</ul>
After restarting the application server you can now create a new CA using the name 'implicitlyCA' instead of a curve name as keyspec in the admin-GUI or CLI.
<br/>
The CA certificate will now be created with the NULL encoding of the public key.
</p>
<p>
When issuing client certificates where the client public key uses implicitlyCA, you must allow key length 0 in the certificate profile, because EJBCA can not read the 
key length, since the parameters are defined elsewhere.
</p>
<p>
See <a href="http://www.bouncycastle.org/wiki/">Bouncycastle wiki</a> for more information about the implicitlyCA facility.
</p>
<p>
The curve parameters in <i>conf/ejbca.parameters</i> are configured in Bouncycastle using the following code:'
</p>
<source>
ECCurve curve = new ECCurve.Fp(
    new BigInteger(ecdsa.implicitlyca.q), // q
    new BigInteger(ecdsa.implicitlyca.a, 16), // a
    new BigInteger(ecdsa.implicitlyca.b, 16)); // b
org.bouncycastle.jce.spec.ECParameterSpec implicitSpec = new org.bouncycastle.jce.spec.ECParameterSpec(
    curve,
    curve.decodePoint(Hex.decode(ecdsa.implicitlyca.g)), // G
    new BigInteger(ecdsa.implicitlyca.n)); // n
ConfigurableProvider config = (ConfigurableProvider)Security.getProvider("BC");
config.setParameter(ConfigurableProvider.EC_IMPLICITLY_CA, implicitSpec);
</source>
</subsection>
<subsection name="Creating client certificates">
<p>
You can also issue normal requests for client certificates using ECDSA keys. 
<br/>
All certificates signed by an ECDSA CA will naturally use ECDSA signatures, regardless if the client keys are RSA or ECDSA.
</p>
<p>
When batch generating client keys using the cli command 'bin/ejbca.sh batch' you configure the type of client keys that will 
be generated in the file <i>bin/batchtool.properties</i>. The possible parameters are explained there. 
If using the implicitlyCA facility the same parameters as configured for the ca in <i>conf/ejbca.properties</i> are used.
</p>
</subsection>
<subsection name="Limitations">
<p>
When using the 'implicitlyCA' mode only one set of curve parameters can be set for the whole EJBCA instance.
This means that if you have several CAs using ECDSA with 'implicitlyCA', they will all use the same curve parameters.
You can mix 'implicitlyCA' with named curves any way you like though.
</p>
</subsection>
</section>

<section name="Internationalization">
<p>
To customize EJBCA admin GUI for your languages special characters you will probably have to 
change the default page encoding in 'web.contentencoding' (in conf/web.properties file) 
to for example UTF-8 instead of the default ISO-8859-1.
</p><p>
Displaying, receiving, decoding and storing different char sets is rather complicated and the 
architecture is multilayered. There are the web browser, application server, database and 
operating system, all working together.
If you change to UFT-8 to handle your char set, you must probably also specify that the database 
connection should use UTF-8.
For MySQL this can be done in the <i>connection-url</i> in your datasource description 
(APPSRV_HOME/server/default/deploy/ejbca-ds.xml):
jdbc:mysql://yourhost/ejbca?characterEncoding=UTF-8
</p><p>
You will also want to configure the database, for example in my.cnf, to use UTF-8.
</p><p>
You also want to configure your machine to use the locale you are using, otherwise some encoding/decoding to the database
may get mixed up and throw a lot of errors (java XML decoding). 
For example in SUSE this is done with 'yast' and in Debian it is done with 'dpkg-reconfigure locales'.
</p><p>
For some languages (for example Chinese) the java scripts in the admin GUI will fail to recognize
the characters when doing checks for allowed characters in DN etc.
The easiest way to resolve this is to go into the file: 
<br></br>
src/adminweb/ejbcajslib.js
<br></br>
And change all methods 'checkfield*()' to always return true directly.
</p><p>
If you can't get you national characters to work with the admin GUI, you can try using the cli instead
(bin/ejbca.sh ra adduser ...). That usually works.
</p><p>
EJBCA have for example been tested on Windows/JBoss 4.2.0/MySQL and Linux/JBoss4.2.0/HSQL with 
the default configuration using Swedish national characters, 
and it works nicely both with the cli and admin-GUI.
</p>
<p>
To make everything work perfect you MAY have to also configure JBoss to encode URIs according to your settings,
this is done with the 'URIEncoding' directory in APPSRV_HOME/server/default/deploy/jbossweb-tomcat55.sar/server.xml:
</p>
<source>
&lt;Connector port="8443" address="${jboss.bind.address}"
         maxThreads="100" minSpareThreads="5" maxSpareThreads="15"
         scheme="https" secure="true" clientAuth="true"
         keystoreFile="${jboss.server.home.dir}/../../bin/tomcat.jks"
         keystorePass="t0mcat." sslProtocol = "TLS" URIEncoding="UTF-8"/&gt;
</source>

<subsection name="Adding a new language to the admin GUI">
<p>
Java uses unicode internally, so the things that needs to be taken care of are:
<ol>
<li>Make sure your system locale is set correctly, so Java will recognize input of your nations language. 
If Java does not automatically recognize your locale you might need to specify it as options to java during
startup (i.e. in JBoss and cmd line commands such as ca.sh and ra.sh).
java -Duser.language=2-char-language-code -Duser.region=2-char-country-code
example for Swedish: java -Duser.language=sv -Duser.region=SE
</li>
<li>Your database must also recognize the locale so it does not strip down to plain ascii. 
This is database and JDBC-driver dependent.</li>
</ol>
</p><p>
The admin GUI is meant to support multiple languages through language files
in src/adminweb/languages.
In order to add a language you should do the following:
<ol>
<li>Rename the languagefile you have created to
language.<i>languagecode</i>.properties. In case of chinese it should be 'zh', and place 
it in the src/adminweb/languages directory.
</li>
<li>Edit conf/web.properties (create with conf/web.properties.sample as template if you don't have one).
Change 'web.availablelanguages' and add your language code to the value. i.e:
&lt;env-entry-value>EN,FR,IT&lt;/env-entry-value>
</li>
<li>You may have to change the default page encoding in 'web.contentencoding' to for example ISO-8859-1
instead of the default UTF-8.
</li>
<li>Clean and re-deploy ejbca with 'ant clean' followed by 'ant deploy'. 
Restart JBoss and your browser after this.
</li>
</ol>
</p><p>
Now it should be possible to select EN, FR and IT in the system configuration as default language 
and in the administrator preferences page. 
The language will be changed next time the administrator logs in.
</p></subsection>
<subsection name="Internal Internationalization">
<p>
It's also possible to translate internal log comments, some exception messages and approval notifications.
This is done separately in it's own resource files since this is done internally in the core application
and not in the web-layer. 
</p><p>
The language used internally is configured in the conf/web.properties file by setting the properties
intresources.preferredlanguage and intresources.secondarylanguage to the language you want to use.
The letters should be the same as the xx name in the intresources.xx.properties files in the src/intresources 
directory. The secondary resource file is used if the resource isn't found in the preferred language.
This is a global setting that cannot be overridden by administrators own settings in the web-layer.
</p>
</subsection>

</section>

<section name="Custom DN and altName oids">
<p>
EJBCA supports custom (your own) oids in DN components.
</p><p>
In order to add such a DN you can simply call the DN for example: CN=MyCommonName,1.1.1.1=MyCustomOid,C=SE
<br/>
Where 1.1.1.1 is your custom oid.
</p>
<p>
Custom OIDs are always encoded as UTF8String in the DN.
</p>
<p>
To get support for custom OIDs in the Admin-GUI you must edit the file src/java/profilemappings.properties and add your new
OID in the end. Just follow the example in the file, and you will get the possibility to add you oid in the End Entity Profile, 
and following that also when adding new users.
If you edit profilemappings.properties, you should also add an entry in src/adminweb/languages/languagefile.XX.properties (where XX is you language).
Otherwise your new field will be displayed as the key that you entered (which is probably ok also) in the admin-GUI. The new field you must add in the language file is
the last field in profilemappings.properties, i.e. the LanguageConstant.
</p><p>
EJBCA will by default put unknown OIDs in the end so the DN will probably be displayed as: CN=MyCommonName,C=SE,1.1.1.1=MyCustomOid 
(if looking at the asn1 coding, different application display in a different order regardless of the asn1 coding).
<br/>
If you need a particular order of DN components, you can add a file 'dncomponents.properties' in the directory ejbca/src. 
There is a file called dncomponents.properties.sample in the distribution as a starting point (it shows the default ordering in EJBCA). 
You custom oid must be placed in the right place in that file, and all components from the sample file should be included, or you will get 
strange behaviour.
<br/>
Using the dncomponents.properties file is only needed if you need to control the asn1 ordering of DN elements.
</p>
<p>
A word of caution:
<br/>If you use custom oids, they better not become standard ones later on, because if the underlying asn.1 library in EJBCA starts to 
know the oids as standard ones, things will be renamed in the database and you will have to do a database migration.
Also you must keep track of dncomponents.properties when upgrading EJBCA.
</p><p>
Stick to the standard is my advice!
</p>
<p>
Having all these customizations off-course requires some maintenance on your part, so don't forget your customizations when upgrading EJBCA to a new version.
<br/>
Check RELEASE_NOTES for important changes!
</p>
<subsection name="altNames">
<p>
Adding custom OIDs in altNames works the same way as for DN.
When a custom oid is used the altName string in the database will be for example "rfc822Name=foo@bar.com, 1.1.1.1=foobar".
<br/>
A Custom oid is always added as OtherName using a simple UTF8String. See rfc3280 for definition of the OtherName altName.
<br/>
The OtherName consists of:
<ul>
<li>The custom oid</li>
<li>An UTF8String with the value</li>
</ul>
</p>
</subsection>
</section>
<section name="Custom Certificate Extensions">
<p>
From EJBCA 3.4 it is possible to add customized certificate extensions to certificates.
Simple extensions only containing a static value can be added by simply editing a property file, these are called
"basic certificate extension". It is also possible to generate advanced certificate extension by
implementing a simple java interface.
</p>
<subsection name="Configuring Custom Certificate Extensions">
<p>
Certificate extensions is configured in the file 'src/java/certextensions.properties'
All extensions should have a id ranging from 1 up to 255, the number order is important.
</p>
The following properties must be set for each extension (all beginning with idN.)
<ul>
<li>oid : The unique OID of the extension (Required)
</li>
<li>classpath : Classpath to the CertificateExtention implementing class. (Required)
</li>
<li>displayname : Display name of the extension in the 'Edit Certificate Profile' page (Required)
</li>
<li>used : Defines if the extensions should be used or be disabled. (Required)
</li>
<li>translatable : If the display name should be translated in the language resources. (Required)
</li>
<li>critical : Defines if the extension should be marked as critical in the certificate. (Required)
</li>
<li>property.'property' : It is possible to define properties to the actual implementation of the CertificateExtention, for example does the BasicCerticateExtension require the properties 'encoding' and 'value' to be set.
</li>
</ul>
<p>
After the file is configured rebuild and deploy EJBCA.
</p><p>
After extensions have been added it is possible to select them for a certificate profile
in the 'Edit Certificate Profile' page.
</p>
</subsection>
<subsection name="Basic Certificate Extension">
<p>
In order to create a Basic Certificate Extension you use the classpath org.ejbca.core.model.ca.certextensions.BasicCertificateExtension
and specify the properties idX.property.encoding and idX.property.value.
See the following table for the available encodings and how their value is interpreted
</p>
<ul>
<li>DERBITSTRING : A String containing the characters '0' and '1'.
</li>
<li>DERINTEGER : A String containing digits only in decimal digits.
</li>
<li>DEROCTETSTRING : A String containing hex data representation.
</li>
<li>DERBOOLEAN : The string 'true' or 'false'.
</li>
<li>DERPRINTABLESTRING : A string containing valid printable string characters (a-z, 0-9).
</li>
<li>DERUTF8STRING : A string in UTF-8 format.
</li>
<li>DERIA5STRING : An ASN.1 IA5String containing valid printable string characters (a-z, 0-9).
</li>
<li>DERNULL : Value isn't used, an empty value.
</li>
<li>DEROBJECT : The hex encoded DER value of the extensions. You can use this to create any extension with sequences etc.
</li>
</ul>
<p>Examples of certificate extensions that you can configure with the BasicCertificateExtension are given in 'src/java/certextensions.properties'.
</p>
<ul>
<li>MS application policies
</li> 
<li>NetscapeCertType
</li>
<li>NetscapeComment
</li>
<li>NetscapeCARevocationURL
</li>
<li>NetscapeRevocationURL
</li>
<li>...
</li>
</ul>
</subsection>
<subsection name="Implementing an Advanced Certificate Extension">
<p>
To create an advanced extension it is required to create a java class extending
the CertificateExtension abstract class. One method getValue is required and
the current user data, ca and certificate profile is sent to the extension in order
to generate dynamic extensions.
</p><p>
Here is an example of a simple advanced extension. To add this extension to EJBCA
add it to to the classpath in certextensions.properties, make sure the class is 
accessible in the classpath and redeploy.
</p>
<source>
public class SomeAdvancedCertificateExtension extends CertificateExtension {

    private static String PROPERTY_SOMEPROPERTY = "someproperty";

	/**
	 * The main method that should return a DEREncodable
	 * using the input data (optional) or defined properties (optional)
	 * 
	 * @see org.ejbca.core.model.ca.certextensions.CertificateExtension#getValue(org.ejbca.core.model.ra.UserDataVO, org.ejbca.core.model.ca.caadmin.CA, org.ejbca.core.model.ca.certificateprofiles.CertificateProfile)
	 */	
	public DEREncodable getValue(UserDataVO userData, CA ca,
			CertificateProfile certProfile) {
		
		String value = getProperties().getProperty(PROPERTY_SOMEPROPERTY);
		
		return new DERPrintableString(value);
	}

}
</source>
</subsection>
</section>

<section name="Logging">
<p>
The are three different logging devices available for official events
(creation of certificate etc) from EJBCA 3.6. These devices should not be
confused with the info/debug output that is sent to Log4J directly. You can
find more information on how to configure Log4J in
$EJBCA_HOME/doc/howto/log4j.txt.
</p>
<p>
What log devices to use, can be configured in $EJBCA_HOME/conf/log.properties.
</p>
<p>
It is recommended to only allow new log-posts to the database-tables. More
information on this can be found in $EJBCA_HOME/doc/howto/HOWTO-database.txt.
</p>
<subsection name="Log4JLogDevice">
<p>
Appends the information from the offical event to the console or file. This is
the same target where all the other info/debug output is sent to. There are no
protection from alteration and events sent to this device cannot be fetched
back to EJBCA for display in the Admin GUI.
</p>
</subsection>
<subsection name="OldLogDevice">
<p>
OldLogDevice stores log-events in the database. By using the addon
HMAC-protection, alterations in a log event can be detected. Viewed events can
be exported from the Admin GUI.
</p>
</subsection>
<subsection name="ProtectedLogDevice">
<p>
The ProtectedLogDevice stores log-events in the database and has the ability
to detect changed or missing log-events. In an environment where at least one
node (EJBCA-instance) is constantly running, the log cannot even be rolled back
to a an earlier state without detection.
</p>
<p>
Features:
</p>
<ul>
<li>No event can be removed or changed without detection (as long as one node
is still runnning)</li>
<li>Can perform regular signed export of log for backup (mitigates damage of
offline rollback)</li>
<li>Can send emails, run a script and/or kill the JVM if alterations are
detected</li>
<li>Can use a CA-token (hard or soft) or a soft JKS keystore (stored encrypted
with CA-key in database)</li>
<li>Can set a signature intensity to allow slower HSMs to use the feature</li>
<li>Nodes can be added or removed dynamically</li>
</ul>
<p>
Drawbacks:
</p>
<ul>
<li>Very database intensive.</li>
<li>Cannot yet export viewed part of log from Admin GUI</li>
</ul>
<p>
It is good practise to
</p>
<ul>
<li>use secure communication with the database.</li>
<li>use asymmetric log-signing key and a HSM.</li>
<li>use a database/database engine that supports transaction (e.g. InnoDB and not MyIsam for MySQL).</li>
</ul>
<p>
The log can be verified manually using "ejbca.sh/cmd log" CLI.
</p>
<p>
See conf/logdevices/propectedlog.properties.sample for more
information on how to configure and use the device.
</p>
</subsection>
</section>

<section name="Reference manual">
<p>
All configuration options, JNDI names etc is configured through the use of properties files in conf/*.properties file.
You can copy the .sample files to respective .properties files and configures. Most options are documented in the .samples files. 
</p>

<subsection name="Command line interface">
<p>
EJBCA have command line interfaces (cli) to both the CA and RA, and some other operations.
</p>
<p>
The best documentation for the cli can be found by running it.
<source>
bin/ejbca.sh
bin/ejbca.sh ca
bin/ejbca.sh ra
</source>
this will give a list of all available cli commands. To find out which options are available for a specific command, simply run 
the command with no options:
<source>
bin/ejbca.sh ra adduser
</source>
This will give documentation about available options. 
To access the usage information for some commands, that does not take parameters, the option '-?' can normally be provided.
</p>
</subsection>

<subsection name="Other Configuration">
<p>
To setup an initial hard token issuer with alias 'local' and queue a superadmin user for card issuing. Card issuing using the hard 
token issuers is normally done using PrimeCard.
</p>
<source>
bin/ejbca.sh setup initializehardtokenissuing &lt;caname&gt;
Ex: bin/ejbca.sh setup initializehardtokenissuing AdminCA1
</source>
<p>
This is a utility function to quickly and easily issue an initial administration smart card using PrimeCard.
</p><p>
If you want to change the baseurl of the admin-web after installation use the command:
</p>
<source>
bin/ejbca.sh setup setbaseurl computername applicationpath
Ex: bin/ejbca.sh setup setbaseurl localhost ejbca
</source>
<p>
You should never have to do this in version >= 3.2.
</p><p>
To change ports (default public http=8080, public https=8442, private https=8443) you must edit 
conf/ejbca.properties. Change the properties httpserver.pubhttp, httpserver.pubhttps and httpserver.privhttps.
After changing, run 'ant deploy' and re-start the application server.
</p></subsection>

<subsection name="Asn1Dump">
<p>
You can make an asn1 dump of a certificate in order to study the asn1 produced:
</p>
<source>
bin/ejbca.sh asn1dump &lt;filename-of-pem-encoded-certs or filename-of-der-encoded-asn1&gt;
Ex: bin/ejbca.sh asn1dump adminca1.pem
</source>
</subsection>

<subsection name="Batch creation of certificates">
<p>
Certificates can be created batch-wise with EJBCA. The class
org.ejbca.ui.cli.batch.BatchMakeP12 creates keystore files for
all users designated as NEW or FAILED in the local RA database. 
To be able to batch generate certificates, the users must be registered 
with clear text passwords. To set a clear text password for a user use
</p>
<source>
bin/ejbca.sh ra setclearpwd username password
bin/ejbca.sh ra setuserstatus username 10
</source>
<p>
The same is accomplished in the Admin-GUI by checking the checkbox 'Batch generation' when adding the user.
</p>
<p>
To generate keystore files for all users with status NEW or FAILED, run 
</p>
<source>
bin/ejbca.sh batch 
</source>
<p>
This will generate files for users if their clear text passwords are NOT null.
</p><p>
Without arguments 'batch' generates keystore files for all NEW or FAILED users.
To generate a keystore file for a specific user, enter command
</p>
<source>
bin/ejbca.sh batch username
</source>
<p>
Generated keystore files are stored in a subdirectory (to the
current directory) called 'p12'. If the directory does not exist, 
it will be created.
Make sure this directory is WELL protected, since the
information contained in keystore files are secret (private keys).
The format of keystores generated, PKCS12, JKS or PEM, is defined when adding the 
user in the database (using 'bin/ejbca.sh ra adduser' or the admin-GUI).
</p></subsection>

<subsection name="Fetching certificates and CRLs">
<p>
Certificates and CRLs can be fetched through the public web-interface. 
They can also be fetched directly from
 the 'CertificateStoreSession' session bean or using the command 
 'bin/ejbca.sh ca getcrl'
</p></subsection>

<subsection name="Other deployment scenarios">
<p>
EJBCA can be run with servlets and EJBs or only with EJBs. The
servlets are only a publicly available front-end to the beans. 
If the CA is deployed integrated in another J2EE application, 
this front-end may not be needed.
</p></subsection>

</section>

<section name="Customizing EJBCA">
<p>
You can change any part of EJBCA to better suit your specific needs.
</p>
<subsection name="Handling changes in a separate tree (EJBCA >= 3.5)">
<p>
You can keep your personal modifications of EJBCA in a separate tree. Set the location
of your personal modifications in conf/custom.properties or use the default location
'$EJBCA_HOME/../ejbca-custom'. Your modifications will automatically overwrite any
existing file(s) found in the EJBCA_HOME-directory or its subdirectories before
executing an 'ant'-command. A sample, conf/custom.properties.sample, is provided. 
</p>
<p>
Example usage: <br />
You have a working set of configuration files and database from the latest
stable release, and want to try the latest trunk snapshot.
<ul>
<li>Backup your database</li>
<li>Copy $EJBCA_HOME/conf/ to $EJBCA_HOME/../ejbca-custom/conf/</li>
<li>Copy $EJBCA_HOME/p12/ to $EJBCA_HOME/../ejbca-custom/p12/</li>
<li>Copy $EJBCA_HOME/src/java/*.properties to $EJBCA_HOME/../ejbca-custom/src/java/*.properties</li>
</ul>
You can now remove the entire $EJBCA_HOME-directory and replace it with the a fresh snapshot from
the trunk. Restore the database and all the config and generated keys will be restored to $EJBCA_HOME
next time you run "ant deploy".
</p>
<p>
Please note that
<ul>
<li>there is no way to recover overwritten files, so you have to manually restore
files if needed.</li>
<li>ant will not be able to detect if your changes are incompatible with newer
versions of EJBCA. Always use 'diff' on the different versions to see if any file
you override is affected.</li>
<li>committing new features or improvements, that many would benefit from, is greatly
appreciated by the community and makes your maintenance easier</li>
</ul>
</p>
</subsection>
<subsection name="Adding your own public web-pages">
<p>
The public web-pages are written in JSP and can be found under src/publicweb/publicweb.
Modify the pages (directly or by using a separate tree), rebuild and redeploy. The
changes should show on http://<i>ejbcahost</i>:8080/ejbca.
</p>
</subsection>
</section>

<section name="Using the demo servlet">
<p>
It is a demo servlet that will accept any incoming post, create a user with a unique username, and instantly
send back a certificate. The entity- and certificate profiles used are sent as parameters in the post.

To set up the demo servlet:
</p>
<ol>
<li>Find out the CA id of the CA you want to use for signing of the demo certificates. Use the admin-GUI or 'ejbca.sh ca listcas' to find the integer value that is the CA id.</li>
<li>Configure the CA id in rc/java/org/ejbca/ui/web/pub/DemoCertReqServlet.java, it's the parameter DEFAULT_DEMOCAID.</li>
<li>Edit src/publicweb/publicweb/WEB-INF/web.xml and uncomment the two sections for the demo servlet.</li>
<li>If using UTF-8 to display the web-page containing the demo form to the users, change ISO-8859-1 to UTF-8 for the env-entry 'contentEncoding'. Otherwise national characters in names will be encoded/displayed incorrectly in the certificates.</li>
<li>Deploy with 'ant deploy'.</li>
<li>Create an end entity profile and a certificate profile that should be used for the demo certificates.</li>
<li>Create a demo apply page containing something similar to the sample form below for Firefox. There are some sample scripts under src/publicweb/publicweb.</li>
</ol>
<source>
&lt;form name="demoreq" action="http://127.0.0.1:8080/ejbca/democertreq" method="post">
  Please fill out the form and click &lt;b>Enroll&lt;/b> to receive your certificate.
  Read our &lt;a href="http://www.primekey.se/primekey/en/Demo.html">privacy policy&lt;/a>.&lt;br>
  &lt;input name="certificateprofile" value="DemoCertProfile" type="hidden">
  &lt;input name="entityprofile" value="DemoEntityProfile" type="hidden">&lt;br>
  &lt;br>
  Full name:
  &lt;input name="user" value="C=SE,O=PrimeKey Solutions AB,OU=Demo,CN=" size="25" maxlength="60" class="input" type="text">
  &lt;p align="left"> E-mail:
  &lt;input name="email" size="25" maxlength="60" class="input" type="text">
  &lt;input name="includeemail" value="true" type="hidden">
  &lt;/p>
  &lt;p align="left"> Choose key length from the list below. The default is recommended in most cases. &lt;br>
  &lt;br>
  &lt;keygen type="hidden" name="keygen" value="challenge">
  &lt;/p>&lt;p align="left">
  &lt;input value="Enroll" name="submit" type="submit">
&lt;/form>
</source>
<p>
You can use some hidden fields and some java script to for example only ask for a name, and concatenate it with a hidden partial DN to produce
a full dn for the 'user' parameter. Use your imagination!
</p>
</section>

<section name="Samples">
<p>
A collection of samples are in the directory
src/java/se/anatom/ejbca/samples.
</p></section>

<section name="Troubleshooting">
<p>
Add Debug output from the console administration commands by
replacing:
</p>
<source>
    log4j.rootCategory=INFO, Console
</source>
<p>
in the file 'log4j.properties' with:
</p>
<source>
    log4j.rootCategory=DEBUG, Console
</source>
</section>

<section name="Extra info about the admin-GUI">
<p>
If you had problems using the install script this small part describes briefly 
what the setup of the adminweb does. It's explained using out-of-the-head commands so don't expect it to work
by copying and pasting these commands, it just something to look at.
</p><p>

0. Set the baseurl of the server with the command 'setup.sh/cmd setbaseurl <i>computername</i> <i>applicationpath</i>'
Set the BASEURL to reflect your
hostname, to be able to use the adminpages from external
machines, this must be
a real hostname or ip-address.
Run 'ant deploy' to install the changes.
</p><p>

1. Tomcat: Copy src/appserver/jboss/tomcat55/server.xml (or similar depending on your JBoss version) 
to <br></br>$APPSRV_HOME/server/default/deploy/jbossweb-tomcat55.sar/server.xml.
</p><p>
Edit the file so 'keyStorePass' is the
same as the password you specify below for 'tomcat'.
</p><p>
2. Edit parameters in conf/ejbca.properties.
</p><p>
3. Create a tomcat server keystore with the 'ejbca.sh batch' tool
(this can also be done with Suns 'keytool' by creating a keystore and then
generating a certificate request that is processed by EJBCA, and last import
the returned certificate and the CA-certificate into the keystore).
</p><p>
Create a user in EJBCA, DN="C=SE,O=PrimeKey,CN=<i>your-host-name</i>".
</p>
<source>
bin/ejbca.sh ra adduser tomcat foo123 "C=SE,O=PrimeKey,CN=your-host-name" null caname null 1 JKS SERVER
</source>
<p>
Set a clear text password for the tomcat:
</p>
<source>
bin/ejbca.sh ra setclearpwd tomcat foo123
</source>
<p>
Generate a JKS-keystore for tomcat:
</p>
<source>
bin/ejbca.sh batch tomcat
</source>
<p>
4. Name the generated keystore 'tomcat.jks' and put in
$APPSRV_HOME/server/default/conf/keystore.
</p><p>
5. Download the CA certificate in PEM-format from
http://localhost:8080/ejbca/retrieve/ca_certs.jsp (call
it ejbca-ca.pem).
</p><p>
6. Add the EJBCA CA certificate to the EJBCA Java trust-keystore in p12/truststore.jks
</p>
<source>
keytool -import -trustcacerts -file ejbca-ca.pem -keystore p12/truststore.jks -storepass changeit
</source>
<p>
Deploy the new truststore with 'ant deploy'.
<br/>The command 'ant javatruststore' does the above automatically.
<br/>After this you must restart JBoss.
</p>
<p>
7. Create a user for EJBCA admin with CN=SuperAdmin and the
RAADMIN bit (temporarily CN=SuperAdmin gives admin rights).
</p>
<source>
bin/ejbca.sh ra adduser raadmin foo123 "C=SE,O=PrimeKey,CN=SuperAdmin" null caname null 65 USERGENERATED
</source>
<p>
Alternative:
Create a PKCS12 file with EJBCA for a user with CN=SuperAdmin
and the RAADMIN bit (temporarily CN=SuperAdmin gives adminrights).
</p>
<source>
bin/ejbca.sh ra adduser raadmin foo123 "C=SE,O=PrimeKey,CN=SuperAdmin" null caname null 65 P12
bin/ejbca.sh ra setclearpwd raadmin foo123
bin/ejbca.sh batch
</source>
<p>
8. Fetch the certificate using your browser a
http://localhost:8080/ejbca/
</p><p>
Alternative:
Install the generated PKCS12 (p12/superadmin.p12) file in the
browser.
In Firefox this is done by Edit->Preferences->Privacy&amp;Security->
Certificates->Manage Certificates->Import
In IE it is done by double-clicking on the .p12 file.
</p><p>
9. Start JBoss.
</p><p>
10. Go to https://<i>hostname</i>:8443/ejbca
</p><p>
Reference: to generate a JKS with keytool
</p>
<source>
keytool -genkey -alias tomcat -keystore tomcat.jks -keyalg RSA -dname "C=SE,O=AnaTom,CN=hostname" -storepass foo123
keytool -certreq -alias tomcat -keystore tomcat.jks -sigalg SHA1WithRSA -storepass foo123 -file tomcat.req
bin/ejbca.sh ra adduser tomcat foo123 "C=SE,O=AnaTom,CN=hostname" null caname null 1 USERGENERATED SERVER
(go to EJBCA public web and get a 'Server certificate' by pasting the request into the web form and save as tomcat.pem)
bin/ejbca.sh ca getrootcert ca.der -der
keytool -import -trustcacerts -alias cacert -file ca.der -keystore tomcat.jks -storepass foo123
keytool -import -alias tomcat -file tomcat.pem -keystore tomcat.jks -storepass foo123

keytool -import -trustcacerts -file ca.der -keystore p12/truststore.jks -storepass changeit
ant deploy
</source>
<subsection name="Character limitations">
<p>
Since the Admin GUI still uses some JSP and EJBCA at some occasions uses string concatenation
to build SQL querys, we have to ban some characters to avoid XSS-attacks and SQL-injections:
</p>
<code>
\"  \n \r \\ ; ! \0 % ` &lt; &gt; ? $ ~
</code>
<p>
(\n is newline, \r is carriage return, \\ is backslash, \0 is null)
</p><p>
These characters will be replaced by /. ',' can be escaped ,'\,'. 
</p>
</subsection>
</section>

<section name="Code signing">
<p>
Being able to verify the integrity of a release or deployed EAR-archive might be
required for some setups. Currently both ant targets "ziprelease" and "ca.ear"
(invoked from "deploy", "bootstrap" and the default target) supports jar-signing
with the "jarsigner" command included with Java. Note that you still could remove
files from a signed archive without anyone noticing since the files are signed
individually. To create a signed ziprelease of EJBCA:
</p>
<source>
ant ziprelease -Dejbca.zipversion=x_y_z -Dsignjar.keystore=p12/releasesigner.jks -Dsignjar.keystorealias=releasesigner -Dsignjar.keystorepass=foo123
</source>
<p>
The certificate used for the signature must have key usage "Digital Signature"
and extended key usage "Code Signing". The signed archive can be verified using
the "jarsigner" command and the CA-certificate. This example will output any
unsigned file or file with a bad signature: 
</p>
<source>
jboss@server:~/ejbca$ jarsigner -verify -keystore p12/truststore.jks -verbose ../ejbca_x_y_z.zip | grep -v "^smk" | grep -v "^ *0"

      246809 Tue Oct 21 13:28:48 CEST 2008 META-INF/MANIFEST.MF
      246930 Tue Oct 21 13:28:48 CEST 2008 META-INF/RELEASES.SF
        1859 Tue Oct 21 13:28:48 CEST 2008 META-INF/RELEASES.RSA

  s = signature was verified 
  m = entry is listed in manifest
  k = at least one certificate was found in keystore
  i = at least one certificate was found in identity scope

jar verified.
</source>
<p>
OpenSSL can be used to sign and verify an entire archive, but requires the
public key from the signing certificate:
</p>
<source>
jboss@server:~/ejbca$ openssl dgst -sha1 -sign p12/pem/releasesigner-Key.pem -out ../ejbca_x_y_z.zip.SHA1withRSA ../ejbca_x_y_z.zip
jboss@server:~/ejbca$ openssl x509 -inform pem -in p12/pem/releasesigner.pem -pubkey -noout > p12/pem/releasesigner-Pub.pem
jboss@server:~/ejbca$ openssl dgst -sha1 -verify p12/pem/releasesigner-Pub.pem -signature ../ejbca_x_y_z.zip.SHA1withRSA ../ejbca_x_y_z.zip
Verified OK
</source>
</section>

</body>
</document>
