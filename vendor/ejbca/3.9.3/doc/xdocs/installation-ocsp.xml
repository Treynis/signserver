<?xml version="1.0"?>
<document>

  <properties>
    <title>OCSP Installation</title>
  </properties>

<body>
  <section name="Installation">
  <note>
  This section contains installation instructions for the external OCSP responder. EJBCA by default have an internal OCSP responder that works
  out of the box on the CA server. See 'OCSP Architecture' to determine if you also need an external OCSP responder.
  </note>  
  <p> Installing the external OCSP responder together with EJBCA requires configuration on the CA and installation of the 
  external OCSP responder. 
  </p><p>If you are not using the responder with EJBCA you can skip the section about building and configuring EJBCA.
  </p>
  <subsection name="Building and configuring EJBCA">
  <p>
EJBCA should be configured as for any other installation but you must also set all preferences
(ocsp-database.*) of the responder database in conf/ocsp.properties. 
The responder database is the master database of all the responders, and it is there that EJBCA will 
publish certificates when they are issued or revoked. 
</p><p>
After this configuration EJBCA is built and deployed as usual with the command 'ant deploy', as described in the EJBCA installation guide.
</p><p>
The deploy command sets up a datasource <b>java:/OcspDS</b> in JBoss, if you use another application server 
you must set up this datasource manually. It should be a datasource that is not involved in transactions
(a <i>no-tx-datasource</i> in JBoss), and is should have autocommit (should be default in JBoss).
</p><p>
When EJBCA has been started you have to add a new publisher. As a superadministrator you add this publisher
on the "Edit Publishers" page in the admin GUI. Use publisher type "External OCSP Publisher". 
</p>
<p>
External OCSP Settings:
</p>
<ul>
<li>'Data Source' - is the database of the external OCSP where this publisher will publish certificates. Use java:/OcspDS if ocsp-datasource.jndi-name=OcspDS.</li>
<li>'Store certificate on responder' - stores the complete certificate on the responder. If this is unchecked only the information needed to answer OCSP requests are stored, but not the certificate itself.
There are good reasons not to publish the whole certificate. It is large, thus making it a bit of heavy insert and it may contain sensitive information. 
On the other hand some OCSP Extension plug-ins may not work without the certificate. A regular OCSP responder works fine without the certificate.
</li>
</ul>
<p>
All certificate profiles for certificates that should be available to the OCSP responder should
have a reference to this publisher. To configure this you must be a superadministrator.
</p>
<p>
When all settings above have been done then all created certificates issued with a certificate
profile that has the ExternalOCSPPublisher as publisher should be published in the responder
database as well as in the EJBCA database. 
When a certificate is revoked it will be revoked in
the responder database as well.
If the publishing is not working it is important to notice this and synchronize the databases again, 
see 'Error publishing to OCSP database' below.
  </p>
  </subsection>

  <subsection name="Building and configuring the Responder">
  <p>
The responder is configured using the same configuration files as EJBCA. 
Only the preferences ocsp.*, httpsserver.*, datasource.* and database.* are relevant to the responder but you may keep conf/*.properties
from the EJBCA setup since definitions of other properties does no harm.<br/>
</p>
<note> 
Note that the External OCSP responder uses the configuration options database.* and not the ocsp-database.* options to access the OCSP responder database.
</note>
<p>
Please read description of the configuration properties in conf/ocsp.properties.sample, conf/database.properties.sample and perhaps 
conf/web.properties.sample (if ssl or different ports should be configured).
</p>
<p>
All options for the OCSP responders OCSP behavior is set in conf/ocsp.properties. All options are documented in this file.
<br/>
The ocsp.keys.* preferences (that has no meaning for EJBCA) has also to be configured.<br/> 
ocsp.usecasigningcert should be set to false.<br/> 
If card keys (see below) should be used then the property 'ocspHardTokenClasses' must be set to the corresponding directory of PrimeCard.
</p><p>
The responder is then built and deployed with:
</p><source>
ant ocsp-deploy
</source>
<p>
on the external OCSP responder.
</p>

<subsubsection name="Responder database">
<p>
The external OCSP responder database (that OcspDS in EJBCA and EjbcaDS in OCSP responder) points to only have to contain the CertificateData table. This table is 
created automatically by JBoss when it starts on the external OCSP responder.
</p><p>
The database connection settings on the external OCSP responder is configured and deployed in JBoss in the file 
JBOSS_HOME/server/default/deploy/ejbca-ds.xml.
</p>
</subsubsection>

<subsubsection name="Responder signing keys">
<p>
The keys used to sign the OCSP response could either be stored on as a PKCS#12 file in the file system of the host, 
on a smart card or on a PKCS#11 token. It should be one key for each CA, and the each CA the responder answers for an OCSP signing certificate must be issued.
<br/>
The certificate profile could be the same for both soft, smart card and PKCS#11 keys.
</p><p>
To issue OCSP signer certificate from EJBCA you define a new certificate profile and use 'OCSPSIGNER (FIXED)' as template (use selected as template).
<br/>This certificate profile is like a normal end entity profile but with the following key usages:
</p>
<source>
- Key Usage: Digital Signature
- Extended Key Usage: OCSPSigner
</source>
<p>
Configure the newly created certificate profile to use the OCSP publisher defined above.
You also need to create a new End Entity Profile to use the new Certificate Profile.
</p>
<p>
You should then create a user for each CA using this certificate profile. 
Use the token type "p12" or "jks" for soft keys and "user generated" for pkcs#11 and card keys.
</p>
<note>
Note: The OCSP responders certificate(s) AND the CA certificate(s) need to be published from the CA to the 
OCSP responder. For the CA you do this by setting the CRL publisher to the OCSP publisher.
</note>
<subsubsection name="Soft keystores">
<p>
When a soft key has been created it should be stored in the directory defined by the ocsp.keys.dir property of conf/ejbca.properties.
The password for each key must be the same and should be equal to the ocsp.keys.keyPassword property of conf/ejbca.properties.
</p>
<p>
Soft OCSP keystores are most easily created by adding a user to EJBCA and selecting the PKCS#12 keystores type. After this the OCSP keystore can be created
by running the <i>bin/ejbca.sh batch</i> command on the EJBCA server, or by fetching the PKCS#12 keystore from the public enrollment pages of EJBCA. 
</p>
</subsubsection>
<subsubsection name="PKCS#11 HSMs">
<p>
A PKCS#11 key and certificate is created like this:
</p>
<source>
ejbcaClientToolBox.sh PKCS11HSMKeyTool generate ./sunpkcs11.cfg 2048 ocsp
ejbcaClientToolBox.sh PKCS11HSMKeyTool certreq /opt/nfast/toolkits/pkcs11/libcknfast.so i1 ocsp
</source>
<p>
The certificate for the key is then fetched from the public enrollment page of EJBCA with the certificate request that was stored in the file ocsp.pem
when the "certreq" command was executed. You then have to manually create a certificate chain file. The OCSP signer certificate should be
first in this file and the root CA certificate should be last.
</p>
<p>
If the chain file is called chain.pem then the certificate chain is installed in the HSM like this:
</p>
<source>
ejbcaClientToolBox.sh PKCS11HSMKeyTool installcert /opt/nfast/toolkits/pkcs11/libcknfast.so i1 chain.pem
</source>
<p>
You must then define all ocsp.p11.* properties on the responder.
Please read <a href="manual.html#Generic%20PKCS#11%20provider%20(EJBCA%203.5)">Generic PKCS#11 provider (EJBCA 3.5)</a> for information on the configuration file for the generate command.
Do also try to find your HSM in <a href="manual.html#Hardware%20Security%20Modules%20(HSM)">Hardware Security Modules (HSM)</a>. 
Please note the only PKCS#11 HSMs are supported.
</p>
</subsubsection>
<subsubsection name="PrimeCardHSM">
<p>
Smart card keys are created on the card with the "create CA Token on card" tool see the HOWTO-CATokenOnCard.txt of PrimeCard.
Select the choice for one authentication code for all keys on the card. If you want several OCSP responders with same
keys then you may create several card with same keys. But note that no backup card is needed. If a card is lost or broken then
simply make another one with new keys and revoke the old signing certificates.
</p><p>
The certificates for the the keys are then fetched from the public enrollment page of EJBCA with the certificate request. There should be one
certificate request for each key.
</p>
<p>The command:
</p>
<source>
changePIN.sh createCertReqs
</source>
<p>will create the requests, one for each key. Choose 'pem' format for
the certificates and then just store these files in the 'ocsp.keys.dir' directory.
The property 'ocsp.keys.cardPassword' should be set to the PIN of the card.
</p>
</subsubsection>
<p>
Re-start the application server for the external OCSP responder.
When the application server is started it should just work.
</p>
</subsubsection>
</subsection>
<subsection name="Dynamic reconfiguration">
<p>
By configuring the property 'allow.external-dynamic.configuration' in conf/ejbca.properties you can have the OCSP responder re-read some 
configuration values from files in the file system. The values ocsp.untilNextUpdate and ocsp.maxAge from ocsp.properties will be re-read if you put 
an ocsp.properties file in the directory /etc/ejbca/conf or in APPSRV_HOME/bin/conf (of you start your appserver from APPSRV_HOME/bin).
</p>
</subsection>
<subsection name="Key updating">
<p>
The responder might be configured (in ocsp.properties) to scan for installed keys at regular intervals. The responder will use the keys detected at the latest scan.
</p>
<p>
Please not that keys in the PKCS#11 slot will not be updated if automatic re-keying is enabled.
</p>
</subsection>
<subsection name="Automatic re-keying">
<p>
Re-keying is enabled by specifying a web-service URL and a "update time before the OCSP signer certificate expires time".
</p>
<p>
You got to generate a certificate for a user with permissions to create a user generated certificate for all OCSP signers.
The entity for this user could be stored in a SW keystore or in the HSM. Please read the ocsp.properties.sample for further requirements and location of this entity.
</p>
<p>
To test the feature it is good to re-key frequently. This is achieved by setting "update time before the OCSP signer certificate expires time" close to validity length of the OCSP certificate.
Example for 730 days (730*24*60-14)*60=63071160. This will force a re-keying every 4th minute (an EJBCA certificate is valid 10 minutes before it was issued).
</p><p>
When running on some application servers jar files of the application server has to be deleted.
</p><p>
In jboss-4.2.3.GA these files has to be deleted when running java6:
</p>
<source>
$APPSRV_HOME/server/default/lib/jboss-jaxrpc.jar
$APPSRV_HOME/server/default/lib/jboss-jaxws-ext.jar
$APPSRV_HOME/server/default/lib/jboss-jaxws.jar
</source>
<p>
For java5 one more files has to be deleted:
</p>
<source>
$APPSRV_HOME/server/default/lib/jboss-jaxrpc.jar
$APPSRV_HOME/server/default/lib/jboss-jaxws-ext.jar
$APPSRV_HOME/server/default/lib/jboss-jaxws.jar
$APPSRV_HOME/server/default/lib/jboss-saaj.jar
</source>
<p>
For java5 you also got to add client WS jars since java5 got no WS support. These files should be added in $APPSRV_HOME/lib/endorsed if you are running jboss-4.2.3.GA.
If you compile <a href="manual.html#EJBCA%20client%20toolbox">EJBCA ClientToolBox</a> you got all needed files in the created 'clientToolBox-dist/endorsed' directory. Just copy or soft link them to the target.
</p>
</subsection>
<subsection name="No password in memory">
<p>
With this feature enabled no password are kept in memory. If it is enabled you must not define any passwords in ocsp.properties.
</p>
<p>
Defining this feature makes it impossible to do "key updating".
</p>
</subsection>
<subsection name="Several responders using same HSM">
<p>
If several responders should share the same HSM and rekeying should be enabled on all of them then each responder must use different keys.
To be able to define this set of keys that should be used there is a property called 'ocsp.rekeying.listOfAliases' in the ocsp.properties file.
</p>
</subsection>
</section>
<section name="Error handling">
<p>
If there is an error publishing to the OCSP database, the OCSP responder will be out of sync with the CA.
It is very important to re-synchronize the databases in that case.
</p>
<p>
In case of failure to publish to the OCSP database the following error message will appear in the server.log:
</p>
<source>
EXTERNAL OCSP ERROR, publishing is not working
</source>
<p>
This will be followed by more details of the error.
</p><p>
The log must be monitored to discover such a fault and if such a fault is discovered an alarm should notify 
the operator that he has to fix whatever is wrong and then synchronise the OCSP database with the EJBCA 
database (see 'Synchronise the database of the responder').
  </p>
  
  <subsection name="Synchronise the database of the responder">
  <p>
At the beginning and after failure in publishing to the responder, the master database of the
publishers must be synchronised with the CertificateData table of the database of EJBCA.
</p><p>
If there is a single certificate out of sync you can re-sync it by doing a 'Republish' from the admin-GUI.
</p><p>
The following procedure may be used to synchronise the database of EJBCA with the database of the
responder:
</p><p>
<b>1.</b> Prevent any further issuing of new certificates and revocation of old certificates until the
synchronisation is finished. This might be done by simply blocking the port to the adminweb.
<br/>
<b>2.</b> On the host of ejbca the following commands can be used to make the synchronisation:
Run on the OCSP responder machine (as root user in mysql):
</p>
<source>
mysqladmin drop ocsp_db;
mysqladmin create ocsp_db;
</source><p>
This drops and re-creates the ocsp database to clean it. Replace ocsp_db with the database name of your database.
<br/>
Run on the CA server:
</p>
<source>
mysqldump -u ejbca -p --compress ejbca_db CertificateData > CertificateData.dat
mysqldump -u ejbca -p --compress ejbca_db TableProtectData > TableProtectData.dat
cat CertificateData.dat | mysql -h ocspresponder ocsp_db
cat TableProtectData.dat | mysql -h ocspresponder ocsp_db
</source>
<p>
Replace your the username ejbca with your username.
ocspresponder is the external OCSP responder host.
</p>
<note>
Note, that this can usually not be done from a windows machine, to a Linux machine, because windows is not case sensitive.
</note>
<p>
<b>3.</b> Check that the publishing is working before allowing issuing and revoking.
  </p>
  </subsection>
  </section>

  <section name="Running several responders">
  <p>
Additional OCSP DataSources for OCSP responders have to be added manually. The easiest way to do this
on JBoss is to clone the initially deployed OCSP DataSource JBOSS_HOME/server/default/deploy/ocsp-ds.xml
to JBOSS_HOME/server/default/deploy/ocsp2-ds.xml and change 
  </p>
<source>
      &lt;jndi-name>OcspDS&lt;/jndi-name>
      &lt;connection-url>jdbc:mysql://ocsp1.domain.org:3306/ejbca&lt;/connection-url>
</source>
  <p>to</p>
<source>
      &lt;jndi-name>Ocsp2DS&lt;/jndi-name>
      &lt;connection-url>jdbc:mysql://ocsp2.domain.org:3306/ejbca&lt;/connection-url>
</source>
  <p>
and configure an additional publisher to use this new DataSource 'java:/Ocsp2DS'.
  </p>
  <p>
An alternative approach for MySQL users is to use the tools for database replication. Either you could
replicate CertificateData from you master EJBCA database to slave-responders or you could publish
to a master OCSP responders database that in turn is replicated to the other responders. How to do it
is described in the mysql documentation. Depending on which which version you are using please read one
of the followings: <a href="http://dev.mysql.com/doc/refman/5.0/en/replication-howto.html">MySQL 5.0 Replication Howto</a> 
<a href="http://dev.mysql.com/doc/refman/5.1/en/replication-howto.html">MySQL 5.1 Replication Howto</a>
  </p>
  </section>


  <section name="Adding additional responders in a live environment">
  <p>
  There is no automated way of pushing all the certificates that has been published to
  existing OCSP responders. To duplicate an existing "source" OCSP database to a "target" OCSP database: 
  </p>
  <ol>
    <li>To create the tables in the target OCSP, start JBoss AS with OCSP deployed for the first time (and then stop the server before doing the next step).</li>
    <li>Add an additional DataSource for the target OCSP responder in EJBCA.</li>
    <li>Configure a new OCSPPublisher in EJCBA that uses the target OCSP DataSource. Chose to only publish to queue to accumulate all changes during the cloning.</li>
    <li>Wait one hour and check that there is nothing in the publisher-queue of the source OCSP that is older than one hour.</li>
    <li>Do a MySQL dump from the source database to the target database or use the ClientToolBox DBCOPY-command.</li>
    <li>When the copy operation has finished, configure a new Republisher Service for the target's OCSP Publisher.</li>
    <li>Make sure that the queue that built up during the copy operation is now published to the target OCSP.</li>
    <li>Run the monitoring tool (ClientToolBox OCSPMon) to verify that the new OCSP is in sync.</li>
    <li>Start the new OCSP node and add it to the pool of OCSPs in your load balancer.</li>
  </ol>
  </section>


  <section name="Audit and Account Logging">
  <p>
There are three types of logs that can be generated by the OCSP responder.
</p><p>
<b>1.</b> The OCSP <i>service logs</i> using Log4j to the JBoss server.log. The JBoss server log is located in 
JBOSS_HOME/server/default/log/server.log and the logging is configured in JBOSS_HOME/server/default/conf/jboss-log4j.xml.
</p><p>
<b>2.</b> The OCSP <i>transaction log</i> can be used to log various information about ocsp-requests.
Transaction logging logs summary lines for all OCSP request/responses, which can be used for charging clients if you are running a commercial OCSP service.
<br/>To turn on transaction logs logs, copy ocsp.properties.sample to ocsp.properties and change:
</p>
<source>
#ocsp.trx-log = false
</source>
<p>to</p>
<source>
ocsp.trx-log = true
</source>
<p>
then uncomment the other lines below that starts with ocsp.trx-log.
Change the ocsp.trx-log-log-date line if you want to change how the time recorded in logging should be output.
The value should be on the same format as for javas DateFormat, information on valid configurations can be found at:http://javatechniques.com/blog/dateformat-and-simpledateformat-examples/
</p>
<source>
ocsp.trx-log-log-date = yyyy-MM-dd:HH:mm:ss
</source>
<p>
ocsp.trx-log-pattern is a pattern for use with ocsp.audit-order to replace constants with values during logging
For most purposes you will not need to change this string.
</p><p> 
Use ocsp.trx-log-order to specify what information should be logged and in what order. You can also configure what characters you want in between.
If you want your log to display all of the values available you only have to un-comment it. 
</p><p>
Available values for the transaction log are:</p><p>
LOG_ID, An integer identifying that starts from 1 and is increased for every received request.<br/>
SESSION_ID A random 32 Byte long String generated when the OCSP-responder is started.<br/>
STATUS, The status of the OCSP-Request. SUCCESSFUL = 0;MALFORMED_REQUEST = 1;INTERNAL_ERROR = 2;TRY_LATER = 3;SIG_REQUIRED = 5;UNAUTHORIZED = 6;<br/>
CLIENT_IP, IP of the client making the request.<br/>
REQ_NAME, The Common Name (CN) of the client making the request.<br/>
SIGN_ISSUER_NAME_DN, DN of the issuer of the certificate used to sign the request.<br/>
SIGN_SUBJECT_NAME, Subject Name of the certificate used to sign the request.<br/>
SIGN_SERIAL_NO, Certificate serial number of the certificate used to sign the request.<br/>
NUM_CERT_ID, The number of certificates to check revocation status for.<br/>
ISSUER_NAME_DN, The subject DN of the issuer of a requested certificate.<br/>
ISSUER_NAME_HASH, MD5 hash of the issuer DN.<br/>
ISSUER_KEY, The public key of the issuer of a requested certificate.<br/>
DIGEST_ALGOR, Algorithm used by requested certificate to hash issuer key and issuer name.<br/>
SERIAL_NO, Serial number of the a requested certificate.<br/>
CERT_STATUS, The requested certificate revocation status.<br/>
REPLY_TIME, The time measured between when the request is received by the responder and when the response is sent.<br/>
</p><p>
<b>3.</b> The OCSP <i>audit log</i> logs entire requests and responses. This can be useful when requests and responses are signed because the information can be used 
to verify requests and responses afterwards.
Audit logging is configured in the same way as transaction logging.
<br/>Valid values for audit logging are:</p><p>
LOG_ID, An integer identifying that starts from 1 and is increased for every received request.<br/>
SESSION_ID A random 32 Byte long String generated when the OCSP-responder is started.<br/>
OCSPREQUEST, The byte[] ocsp-request that came with the http-request.<br/>
OCSPRESPONSE, The byte[] ocsp-response that was included in the http-response.<br/>
</p><p>
Note that LOG_ID are of the same value in both trx log and audit log for any request. This means they can be cross referenced.
You can retrieve information from the transaction log and verify that the information is valid by using the audit Log.
  </p>
  
  <subsection name="Configuring output files for OCSP logging">
  <p>
For JBoss you can configure JBOSS_HOME/server/default/conf/jboss-log4j.xml to put the transaction and audit logs in separate files.
  </p>
  <source>
   &lt;appender name="OCSPTRANSACTION" class="org.jboss.logging.appender.RollingFileAppender">
     &lt;errorHandler class="org.jboss.logging.util.OnlyOnceErrorHandler"/>
     &lt;param name="File" value="${jboss.server.log.dir}/transactions.log"/>
     &lt;param name="Append" value="false"/>
     &lt;param name="MaxFileSize" value="500KB"/>
     &lt;param name="MaxBackupIndex" value="1"/>
     &lt;layout class="org.apache.log4j.PatternLayout">
       &lt;param name="ConversionPattern" value="%d %-5p [%c] %m%n"/>
     &lt;/layout>	    
   &lt;/appender>

   &lt;appender name="OCSPAUDIT" class="org.jboss.logging.appender.RollingFileAppender">
     &lt;errorHandler class="org.jboss.logging.util.OnlyOnceErrorHandler"/>
     &lt;param name="File" value="${jboss.server.log.dir}/audit.log"/>
     &lt;param name="Append" value="false"/>
     &lt;param name="MaxFileSize" value="500KB"/>
     &lt;param name="MaxBackupIndex" value="1"/>
     &lt;layout class="org.apache.log4j.PatternLayout">
       &lt;param name="ConversionPattern" value="%d %-5p [%c] %m%n"/>
     &lt;/layout>	    
   &lt;/appender>

   &lt;category name="org.ejbca.core.protocol.ocsp.TransactionLogger">
         &lt;priority value="DEBUG"/>
         &lt;appender-ref ref="OCSPTRANSACTION"/>
   &lt;/category>

   &lt;category name="org.ejbca.core.protocol.ocsp.AuditLogger">
         &lt;priority value="DEBUG"/>
         &lt;appender-ref ref="OCSPAUDIT"/>
   &lt;/category>   
  </source>
  <p>
For other application servers you can configure conf/log4j.properties and configure to use that configuration file in conf/ejbca.properties.
  </p>
  </subsection>

  <subsection name="Safer Log4j Logging">
  <p>
The default behavior when logging fails, such as when the destination disk is full or disconnected, is to continue responding as normal.
If you prefer the responder not to send OCSP-responses when logging fails you can use the following configuration:
</p><p>
<b>1.</b> From your EJBCA folder, run:
</p>
<source>
ant jbosslog4jsafer
</source>
<p> 
<b>2.</b> Copy jbosslog4jsafer.jar from the dist directory to your JBoss Servers lib directory. For example:
</p>
<source>
cp dist/jbosslog4jsafer.jar /home/jboss/jboss-4.2.2.GA/server/default/lib/
</source>
<p>
<b>3.</b> Set  'ocsp.log-safer = true' in ocsp.properties
</p><p>
<b>4.</b> Modify your jboss-log4j.xml file to use the SaferDailyRollingFileAppender and ProbeableErrorHandler. For example:
</p>
<source>
	&lt;appender name="OCSPTRANSACTION" class="org.ejbca.appserver.jboss.SaferDailyRollingFileAppender">
		&lt;errorHandler class="org.ejbca.appserver.jboss.ProbeableErrorHandler" />
		&lt;param name="File" value="${jboss.server.log.dir}/transactions.log" />
		&lt;param name="Append" value="true" />
		
        &lt;!-- Rollover at midnight each day -->
		&lt;param name="DatePattern" value="'.'yyyy-MM-dd" />
		&lt;layout class="org.apache.log4j.PatternLayout">
            &lt;!-- The default pattern: Date Priority [Category] Message\n -->
			&lt;param name="ConversionPattern" value="%d %-5p [%c] %m%n" />
		&lt;/layout>
	&lt;/appender>
	&lt;appender name="OCSPAUDIT" class="org.ejbca.appserver.jboss.SaferDailyRollingFileAppender">
		&lt;errorHandler class="org.ejbca.appserver.jboss.ProbeableErrorHandler" />
		&lt;param name="File" value="${jboss.server.log.dir}/audit.log" />
		&lt;param name="Append" value="true" />

        &lt;!-- Rollover at midnight each day -->
		&lt;param name="DatePattern" value="'.'yyyy-MM-dd" />
		&lt;layout class="org.apache.log4j.PatternLayout">
            &lt;!-- The default pattern: Date Priority [Category] Message\n -->
			&lt;param name="ConversionPattern" value="%d %-5p [%c] %m%n" />
		&lt;/layout>
	&lt;/appender>
	
	&lt;logger name="org.ejbca.core.protocol.ocsp.TransactionLogger">
		&lt;level value="DEBUG" />
		&lt;appender-ref ref="OCSPTRANSACTION" />
	&lt;/logger>
	&lt;logger name="org.ejbca.core.protocol.ocsp.AuditLogger">
		&lt;level value="DEBUG" />
		&lt;appender-ref ref="OCSPAUDIT" />
	&lt;/logger>  
</source>
<p>
If you use category instead of logger Log4j will output warnings on startup
</p><p>
<b>5.</b> Start JBoss and you are ready.
</p>
</subsection>
  </section>

  <section name="Setting up the Unid-Fnr OCSP extension">
  <note>If you don't know what a Unid-Fnr mapping is, you are probably not interested in this part.
  </note>
  
  <subsection name="Configuring the Unid lookup server">
  <p>
The OCSP responder comes with an extension for looking up Unid-Fnr mappings.
To enable the Unid extension you configure the options:
</p>
<source>
ocsp.extensionoid=2.16.578.1.16.3.2
ocsp.extensionclass=org.ejbca.core.protocol.ocsp.OCSPUnidExtension
</source>
<p>
in conf/ejbca.properties of the OCSP responder. All options are described in ejbca.properties.sample.
There are three options for the Unid extension itself:
</p><p>
<b>1. ocsp.uniddatsource</b>
<br/> 
This should be set to a datasource configured in JBoss that goes to the correct database.
the database must contain the table according to the (MySQL) definition:
</p>
<source>
CREATE TABLE UnidFnrMapping(
    unid varchar(250) NOT NULL DEFAULT '',
    fnr varchar(250) NOT NULL DEFAULT '',
    PRIMARY KEY (unid)
);
</source>
<p>
Example of ocsp.uniddatsource is java:/UnidDS, where UnidDS is configured similarly as EjbcaDS in 
JBOSS_HOME/server/default/deploy/ejbca-ds.xml, but using another database.
</p><p>
<b>2. ocsp.unidtrustdir</b>
All clients that will be allowed to lookup Unid-Fnr mapping must be issued a client certificate. 
The issuer of the client certificates must be the same as the issuer of the server certificate for TLS 
communication with the OCSP server (see below).
You should use these parameters (where differing from default) when issuing keystores to the clients:
<br/>
- PKCS#12 files<br/>
- Extended key usage 'TLS client'
</p><p>
When a certificate has been issued for a lookup client, you must download the certificate from the admin-GUI of the CA
and place it in ocsp.unidtrustdir.
When a new certificate has been added, the OCSP application on the JBoss server must be re-deployed 
(you can do this with the command 'touch ejbca.ear' in JBOSS_HOME/server/default/deploy).
</p><p>
<b>3. ocsp.unidcacert</b>
This is the CA certificate, in PEM format, that signed the certificates in ocsp.unidtrustdir. You can download it in PEM-format from EJBCA.
</p>
</subsection>

<subsection name="Configuring TLS on the Unid lookup server">
<p>
If you are running the OCSP server integrated with EJBCA you do not have to bother with this, as EJBCA set up TLS for you.
</p><p>
On a stand alone OCSP server you must configure TLS with client authentication. To do this you first need a JKS keystore for 
the key and certificate for the server.
You should use these parameters (where differing from default) when issuing keystores to the TLS servers:
<br/>
- JKS files<br/>
- Key usage: Digital Signature, Key Encipherment<br/>
- Extended key usage: 'TLS server'
</p><p>
The Common Name (CN) for a TLS server should be the same as the machines fully qualified DNS name used to call the server. 
For example 'CN=ocsp.primekey.se'.The other DN components you can choose freely.
</p><p>
Once the JKS keystore is issued you can configure TLS on the OCSP server in the same way as on the EJBCA server. 
It is configured in the file JBOSS_HOME/server/default/deploy/jboss-web.deployer/server.xml on the CA server.
The Connectors for port 8442 and 8443 is the TLS configuration.
The keystoreFile, keystorePass, truststoreFile and truststorePass are important to get right.
<br/>It is easiest if you put the keystore for the TLS server in the file p12/tomcat.jks on the external OCSP responder.
When doing this it should be deployed correctly when using 'ant ocsp-deploy', and you don't have to change the server.xml file which is 
over-written by 'ant ocsp-deploy'.
</p>
</subsection>

<subsection name="Security of the lookup server">
<p>
the lookup server always checks that each client is using TLS with client authentication and that the certificate is valid and is one
of the certificates placed in the directory pointed to by 'ocsp.unidtrustdir'. 
<br/>
If these conditions are not met, no Fnr is returned.
</p>
</subsection>
  </section>

  <section name="Using database integrity protection">
  <p>
Enable the basic support for database protection as described in the section about Log signing in EJBCA Administrator section at wiki.ejbca.org. 
(you don't have to enable log signing though) and then select 'Database Integrity Protection' in the 
External OCSP Publisher.
</p>

<p>
Thats all there is to it. When EJBCA publishes certificate entries to the OCSP responder database, it will also write 
entries in the TableProtectData table. 
If protection is enabled also on the External OCSP responder, it will log errors:
</p>
<source>
PROTECT ERROR
</source>
<p>
if verification fails when it answers OCSP queries (this will slow it down a little bit).
<br/>
If protection is not enabled on the External OCSP responder, it will not verify the entries when answering OCSP queries, 
a remote batch job can be used to verify the database integrity periodically instead.
  </p>
  </section>

  <section name="OCSP GET">
  <p>
The GET OCSP request is defined in RFC 2560 A.1.1 as: <code>'GET {url}/{url-encoding of base-64 encoding
of the DER encoding of the OCSPRequest}'</code>. A base64-encoded request can contain the reserved
characters '+', '/' and '=', but will be handled correctly both in their %-escaped and original form
by the responder, since it's unclear if they do conflict as defined in RFC 2395 2.2. 
  </p><p>
Not all web-product handles the encoded '/' (%2F) nicely. JBoss/Tomcat has to be started with
<code>-Dorg.apache.tomcat.util.buf.UDecoder.ALLOW_ENCODED_SLASH=true</code> added to JAVA_OPT in
JBOSS_HOME/bin/run.conf.
  </p>
  </section>

  <section name="Responses with longer validity and caching">
  <p>
<a href="http://www.ietf.org/rfc/rfc2560.txt">RFC 2560</a> defines thisUpdate, nextUpdate and producedAt. producedAt is always
included in the response and is the time the response was created.
thisUpdate and nextUpdate is enabled by configuring 'ocsp.untilNextUpdate' in
ocsp.properties. thisUpdate will be the time a singleResponse is embedded in
the main response and nextUpdate will be 'untilNextUpdate' seconds later than
thisUpdate. This enables clients that supports this feature to re-use a valid
response and decrease to load on the OCSP-responder.
  </p><p>
<a href="http://www.ietf.org/rfc/rfc5019.txt">RFC 5019</a> defines how to use HTTP
cache headers as defined in <a href="http://www.ietf.org/rfc/rfc2616.txt">RFC 2616</a> for
OCSP HTTP GET requests. By using the headers Last-Modified, Expires, max-age
and Date, less intelligent nextwork component like HTTP caches can cache
respones. This enables re-use of responses to decrease the load on the
OCSP-responder and can shorten reponse times by deploying caches closer to the
actual OCSP consumers. HTTP cache headers is enabled by configuring configuring
'ocsp.maxAge' in ocsp.properties
  </p><p>
When using RFC 5019 style HTTP headers, JBoss users should be aware that the
Date header is overwritten with a cached value. Since generating the
Date-string is computationally heavy for regular small GET requests, it is
generated about once per second. So a response will have a Last-Modified that
is one second in the future from Date from time to time.
  </p><p>
A regular Apache HTTP server can be used for caching requests, load-balancing
and dropping some unwanted requests:
  </p>
  <source>
&lt;VirtualHost *:80>
        # Use as much memory as possible for the cache (in 1 kB blocks)
        # 1GB of memory at ~2kB/ocsp request would hold about 500000 different requests
        CacheEnable mem /
        MCacheSize 1048576
        MCacheMaxObjectCount 1000000
        MCacheMinObjectSize 1
        MCacheMaxObjectSize 4096

        # Using disk-cache will allow a much larger pool of cached entires and the operation system
        # will cache those files, but you are responsible for cleaning up old cache-entries using
        # the "htcacheclean" tool. A disk cache will also live through a server restart.
        # The user running apache has to have read/write access to "/var/cache/ocsp".
        #CacheEnable disk /
        #CacheRoot /var/cache/ocsp

        # Ignore requests for uncached responses.. this will protect the OCSP from
        # DOS attacks using "Cache-Control: no-cache" or "Pragma: no-cache"
        CacheIgnoreCacheControl On

        ProxyRequests Off

        &lt;Location>
                # Everybody is welcome here..
                Allow from all
                Order allow,deny

                # ..or just those from networks that is supposed to use the service
                #Deny from all
                #Order deny,allow
                #allow from 127.
                #allow from 172.16.212.1

                ProxyPassReverse balancer://mycluster-kerb/
        &lt;/Location>

        # Proxy requests to OCSP instances (only one machine currently configured)
        &lt;Proxy balancer://mycluster-kerb>
                # proxy_ajp has to be enabled for ajp-proxying
                BalancerMember ajp://127.0.0.1:8009/ejbca/publicweb/status/ocsp
                # proxy_http has to be enabled for http-proxying
                #BalancerMember http://ocsp2.domain.org:8080/ejbca/publicweb/status/ocsp
                #BalancerMember http://ocsp3.domain.org:8080/ejbca/publicweb/status/ocsp
        &lt;/Proxy>

        # We only want RFC 5019 compliant URLs to be forwarded to the OCSP, the rest
        # should get a "404 Not found" or "414 Request-URI Too Large."
        LimitRequestLine 257
        RewriteEngine On
        RewriteCond %{REQUEST_METHOD} get [NC]
        RewriteRule ^/([a-zA-Z0-9+=/]+)$ balancer://mycluster-kerb/$1 [P,L]

        # Possible values include: debug, info, notice, warn, error, crit,
        # alert, emerg.
        LogLevel debug
        CustomLog /var/log/apache2/access.log combined
        ErrorLog /var/log/apache2/error.log
&lt;/VirtualHost>
  </source>  
  </section>

</body>
</document>

