# This is the configuration file for the ProtectedLogDevice
#
# All the gory details on how it works can be found in the latest version of
# the design document at https://jira.primekey.se/browse/ECA-633
#
# Enable log protection by
#  1. Make sure EJBCA is using a database or database engine that supports
#     transactions (like MySQL's InnoDB)
#  2. Make sure this device is enabled in conf/log.properties
#  3. Configure the protection token you want to use in this file (CAName or
#     URI)
#  4. Run "ant clean" and "ant deploy" to deploy EJBCA with this new
#     configuration.
#  5. Start EJBCA
#  6. Run the ejbca CLI, "bin/ejbca.sh log accept all" or
#     "bin\ejbca.cmd log accept all"
#

# protectionToken is the key used to protect log-rows in the database, the
# issuing CA of this token is used for log export. The "none"-token means that
# log-events are simply written to the database without protection.
#  Caution 1: Soft tokens requires Unlimited JCE to be installed.
#  Caution 2: Hard tokens (CAs) require auto-activation.
#  Caution 3: Reversed DNs are not supported.
#  Default is "none".
#protectionTokenReferenceType=none
#protectionTokenReferenceType=CAName
#protectionTokenReferenceType=URI

# Keystores are assumed to be in JKS format. Soft keystores should NOT have
# been generated with keyrecovery enabled. If referencing a CA, use the short
# name as the one specified by ca.name in ejbca.properties.
#  Default is "AdminCA1".
#protectionTokenReference=AdminCA1
#protectionTokenReference=file:///home/ejbca/ejbca/keystorefile.jks

# The keystore alias (only used for the URI keystore type)
#protectionTokenKeyStoreAlias=logsigner

# The keystore password (only used for the URI keystore type)
#protectionTokenKeyStorePassword=foo123

# Protection intensity: how often each node should sign a log-row in seconds.
#  Default is "0" (sign every line).
#protectionIntensity=0

# For how many steps of a chain should the algorithm try to find a sealing
#  signature before concluding "undetermined" when displaying events.
#  -1 disable verification, 0 undetermined if the requested event isn't signed.
#   Default is "0" which makes sense if protectionIntensity is "0"
#maxverificationssteps=0

# Link-in intensity: how often to search for new log-rows from other nodes in
#  seconds. The last found log-row from each node will be linked in. This also
#  links in old instances so don't disable this unless you know what you are
#  doing.
#   -1 disabled, 0 always search
#  Default is "-1" for the none-token and "1" for all other tokens.
#linkinIntensity=1

# Verification intensity of own log-events: how often to search for the last
#  written log-row in seconds.
#   -1 disabled, 0 always search
#  Default is "-1" for the none-token and "1" for all other tokens.
#verifyownIntensity=1

# How far back to search for events. To avoid using serializable isolation
#  level for the database, a tolerance of X seconds is accepted between a
#  logevent is supposed to be written to the database and it's considered
#  missing (if it isn't readable). Try increasing this value if you get
#  problems with false warnings about missing log-rows during high load.
#searchWindow=300

# The hash algorithm used to chain unprotected log rows.
#  Default is "SHA-256"
#protectionHashAlgorithm=SHA-1
#protectionHashAlgorithm=SHA-256
 
# If you don't want to autodetect this for each node
#nodeIP=x.x.x.x

# Allow admins with access to Admin GUI Log Configuration to disable logging
# of certain events
#  Caution 1: This means an attacker with access to the database can disable
#             logging for all events. Do not use this until protection for that
#             database table is implemented.
#  Default is "false"
#allowConfigurableEvents=false

#
# Verification Service
#
# Without the Verification Service the log tampering might not be detected
# until it's time for export.
#

# Use the Verification Service
#verificationservice.active=false

# How often the service should be started, minutes
#verificationservice.invokationinterval=1

# If nothing is written to the log for this long, the log is considered to be
# frozen, minutes
#verificationservice.freezetreshold=60

#
# Export Service
#  Exports the log from the database through the desired handler
#  Caution 1: Each log row will only be exported once unless you reset
#             the exports with "bin/ejbca.sh resetexports".
#

# Use the Export Service
#exportservice.active=false

# How often this service should be invoked, minutes
#exportservice.invokationinterval=1440

# The hash algorithm used to chain exports.
#  Default is "SHA-256"
#exportservice.hashAlgorithm=SHA-1
#exportservice.hashAlgorithm=SHA-256

# Delete all exported events and purge unused tokens.
#  Caution 1: Must be set from start if used.
#  Caution 2: Cannot be used with any other intensity than 0 (sign every
#             log-event) on a system with more than one node. Otherwise
#             you can loose events.
#  Caution 3: Deleted events are gone forever if your exported log files are
#             lost.
#exportservice.deleteafterexport=true

# Only export events that are older than this, minutes
#  This feature only makes sence if you are deleting the events at the same
#  time.
#  Default is "0".
#exportservice.exportolderthan=60         # 1 hour
#exportservice.exportolderthan=1440       # 1 day
#exportservice.exportolderthan=10080      # 1 week
#exportservice.exportolderthan=525600     # 365 days

#
# The handler class that will be invoked by the Export Service.
#  Only one can be used and default is ProtectedLogDummyExportHandler.
#

# The ProtectedLogDummyExportHandler only outputs to the console.
#exportservice.exporthandler=org.ejbca.core.model.log.ProtectedLogDummyExportHandler


# Exports the part of the log as an signed data envelope (CMS a.k.a. PKCS#7). 
#exportservice.exporthandler=org.ejbca.core.model.log.ProtectedLogCMSExportHandler

# The CMS Service has to be enabled for the CA used to sign the exported log.
#cmsexport.caname=AdminCA1

# The full path where the signed log-files will end up. Filenames are directly appended to this, so you can also specify a prefix e.g. /tmp/log_
#cmsexport.fullpath=

#
# Actions that will be invoked if log-tampering is detected. More than one can
#  be used. None is activated by default.
#
 
# MailAction sends emails to the listed addresses for tampering events. The account-properties from mail.properties are used.
#useMailAction=false
#mailAction.senderAddress=no-reply-ca@company.com
#mailAction.emailAddresses=address1@company.com;address2@company.com
#mailAction.subject=Possible log tampering detected
#mailAction.body=This is an automatic email generated by EJBCA's ProtectedLog system.\n\nAn error or attempt to tamper with the logs has been detected. This could mean that you database is compromised. Please consult your companys documentation for more information on what action to take.
 
# ScriptAction runs an executable on the local system. One of the cause identifier from IProtectedLogAction.CAUSE_* is forwarded as an argument.
#useScriptAction=false
#scriptAction.target=/fullpath/executable.sh

# ShutDownAction kills the system right away.
#  Caution 1: Since the log cannot be verified before "accept", this will kill
#             your application-server every time you start it if it is enabled
#             from start.
#useShutDownAction=false
