<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<!-- Generated by JAX-WS RI at http://jax-ws.dev.java.net. RI's version is JAX-WS RI 2.1.1-b03-. -->
<definitions targetNamespace="http://adminws.signserver.org/" name="AdminWSService"
	xmlns="http://schemas.xmlsoap.org/wsdl/" xmlns:tns="http://adminws.signserver.org/"
	xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/">
  <types>
    <xs:schema version="1.0" targetNamespace="http://adminws.signserver.org/" xmlns:tns="http://adminws.signserver.org/" xmlns:xs="http://www.w3.org/2001/XMLSchema">

	  <xs:element name="AdminNotAuthorizedException" type="tns:AdminNotAuthorizedException"/>
	
	  <xs:element name="CryptoTokenAuthenticationFailureException" type="tns:CryptoTokenAuthenticationFailureException"/>
	
	  <xs:element name="CryptoTokenOfflineException" type="tns:CryptoTokenOfflineException"/>
	
	  <xs:element name="IllegalRequestException" type="tns:IllegalRequestException"/>
	
	  <xs:element name="InvalidWorkerIdException" type="tns:InvalidWorkerIdException"/>
	
	  <xs:element name="KeyStoreException" type="tns:KeyStoreException"/>
	
	  <xs:element name="ResyncException" type="tns:ResyncException"/>
	
	  <xs:element name="SignServerException" type="tns:SignServerException"/>
	
	  <xs:element name="activateSigner" type="tns:activateSigner"/>
	
	  <xs:element name="activateSignerResponse" type="tns:activateSignerResponse"/>
	
	  <xs:element name="addAuthorizedClient" type="tns:addAuthorizedClient"/>
	
	  <xs:element name="addAuthorizedClientResponse" type="tns:addAuthorizedClientResponse"/>
	
	  <xs:element name="deactivateSigner" type="tns:deactivateSigner"/>
	
	  <xs:element name="deactivateSignerResponse" type="tns:deactivateSignerResponse"/>
	
	  <xs:element name="destroyKey" type="tns:destroyKey"/>
	
	  <xs:element name="destroyKeyResponse" type="tns:destroyKeyResponse"/>
	
	  <xs:element name="generateSignerKey" type="tns:generateSignerKey"/>
	
	  <xs:element name="generateSignerKeyResponse" type="tns:generateSignerKeyResponse"/>
	
	  <xs:element name="getAuthorizedClients" type="tns:getAuthorizedClients"/>
	
	  <xs:element name="getAuthorizedClientsResponse" type="tns:getAuthorizedClientsResponse"/>
	
	  <xs:element name="getCurrentWorkerConfig" type="tns:getCurrentWorkerConfig"/>
	
	  <xs:element name="getCurrentWorkerConfigResponse" type="tns:getCurrentWorkerConfigResponse"/>
	
	  <xs:element name="getGlobalConfiguration" type="tns:getGlobalConfiguration"/>
	
	  <xs:element name="getGlobalConfigurationResponse" type="tns:getGlobalConfigurationResponse"/>
	
	  <xs:element name="getKeyUsageCounterValue" type="tns:getKeyUsageCounterValue"/>
	
	  <xs:element name="getKeyUsageCounterValueResponse" type="tns:getKeyUsageCounterValueResponse"/>
	
	  <xs:element name="getPKCS10CertificateRequest" type="tns:getPKCS10CertificateRequest"/>
	
	  <xs:element name="getPKCS10CertificateRequestForKey" type="tns:getPKCS10CertificateRequestForKey"/>
	
	  <xs:element name="getPKCS10CertificateRequestForKeyResponse" type="tns:getPKCS10CertificateRequestForKeyResponse"/>
	
	  <xs:element name="getPKCS10CertificateRequestResponse" type="tns:getPKCS10CertificateRequestResponse"/>
	
	  <xs:element name="getSignerCertificate" type="tns:getSignerCertificate"/>
	
	  <xs:element name="getSignerCertificateChain" type="tns:getSignerCertificateChain"/>
	
	  <xs:element name="getSignerCertificateChainResponse" type="tns:getSignerCertificateChainResponse"/>
	
	  <xs:element name="getSignerCertificateResponse" type="tns:getSignerCertificateResponse"/>
	
	  <xs:element name="getSigningValidityNotAfter" type="tns:getSigningValidityNotAfter"/>
	
	  <xs:element name="getSigningValidityNotAfterResponse" type="tns:getSigningValidityNotAfterResponse"/>
	
	  <xs:element name="getSigningValidityNotBefore" type="tns:getSigningValidityNotBefore"/>
	
	  <xs:element name="getSigningValidityNotBeforeResponse" type="tns:getSigningValidityNotBeforeResponse"/>
	
	  <xs:element name="getStatus" type="tns:getStatus"/>
	
	  <xs:element name="getStatusResponse" type="tns:getStatusResponse"/>
	
	  <xs:element name="getWorkerId" type="tns:getWorkerId"/>
	
	  <xs:element name="getWorkerIdResponse" type="tns:getWorkerIdResponse"/>
	
	  <xs:element name="getWorkers" type="tns:getWorkers"/>
	
	  <xs:element name="getWorkersResponse" type="tns:getWorkersResponse"/>
	
	  <xs:element name="globalReload" type="tns:globalReload"/>
	
	  <xs:element name="globalReloadResponse" type="tns:globalReloadResponse"/>
	
	  <xs:element name="globalResync" type="tns:globalResync"/>
	
	  <xs:element name="globalResyncResponse" type="tns:globalResyncResponse"/>
	
	  <xs:element name="process" type="tns:process"/>
	
	  <xs:element name="processResponse" type="tns:processResponse"/>
	
	  <xs:element name="reloadConfiguration" type="tns:reloadConfiguration"/>
	
	  <xs:element name="reloadConfigurationResponse" type="tns:reloadConfigurationResponse"/>
	
	  <xs:element name="removeAuthorizedClient" type="tns:removeAuthorizedClient"/>
	
	  <xs:element name="removeAuthorizedClientResponse" type="tns:removeAuthorizedClientResponse"/>
	
	  <xs:element name="removeGlobalProperty" type="tns:removeGlobalProperty"/>
	
	  <xs:element name="removeGlobalPropertyResponse" type="tns:removeGlobalPropertyResponse"/>
	
	  <xs:element name="removeWorkerProperty" type="tns:removeWorkerProperty"/>
	
	  <xs:element name="removeWorkerPropertyResponse" type="tns:removeWorkerPropertyResponse"/>
	
	  <xs:element name="setGlobalProperty" type="tns:setGlobalProperty"/>
	
	  <xs:element name="setGlobalPropertyResponse" type="tns:setGlobalPropertyResponse"/>
	
	  <xs:element name="setWorkerProperty" type="tns:setWorkerProperty"/>
	
	  <xs:element name="setWorkerPropertyResponse" type="tns:setWorkerPropertyResponse"/>
	
	  <xs:element name="testKey" type="tns:testKey"/>
	
	  <xs:element name="testKeyResponse" type="tns:testKeyResponse"/>
	
	  <xs:element name="uploadSignerCertificate" type="tns:uploadSignerCertificate"/>
	
	  <xs:element name="uploadSignerCertificateChain" type="tns:uploadSignerCertificateChain"/>
	
	  <xs:element name="uploadSignerCertificateChainResponse" type="tns:uploadSignerCertificateChainResponse"/>
	
	  <xs:element name="uploadSignerCertificateResponse" type="tns:uploadSignerCertificateResponse"/>
	
	  <xs:complexType name="generateSignerKey">
	    <xs:sequence>
	      <xs:element name="signerId" type="xs:int"/>
	      <xs:element name="keyAlgorithm" type="xs:string" minOccurs="0"/>
	      <xs:element name="keySpec" type="xs:string" minOccurs="0"/>
	      <xs:element name="alias" type="xs:string" minOccurs="0"/>
	      <xs:element name="authCode" type="xs:string" minOccurs="0"/>
	    </xs:sequence>
	  </xs:complexType>
	
	  <xs:complexType name="generateSignerKeyResponse">
	    <xs:sequence>
	      <xs:element name="return" type="xs:string" minOccurs="0"/>
	    </xs:sequence>
	  </xs:complexType>
	
	  <xs:complexType name="CryptoTokenOfflineException">
	    <xs:sequence>
	      <xs:element name="message" type="xs:string" minOccurs="0"/>
	    </xs:sequence>
	  </xs:complexType>
	
	  <xs:complexType name="InvalidWorkerIdException">
	    <xs:sequence>
	      <xs:element name="message" type="xs:string" minOccurs="0"/>
	    </xs:sequence>
	  </xs:complexType>
	
	  <xs:complexType name="AdminNotAuthorizedException">
	    <xs:sequence>
	      <xs:element name="message" type="xs:string" minOccurs="0"/>
	    </xs:sequence>
	  </xs:complexType>
	
	  <xs:complexType name="getWorkerId">
	    <xs:sequence>
	      <xs:element name="workerName" type="xs:string" minOccurs="0"/>
	    </xs:sequence>
	  </xs:complexType>
	
	  <xs:complexType name="getWorkerIdResponse">
	    <xs:sequence>
	      <xs:element name="return" type="xs:int"/>
	    </xs:sequence>
	  </xs:complexType>
	
	  <xs:complexType name="uploadSignerCertificateChain">
	    <xs:sequence>
	      <xs:element name="signerId" type="xs:int"/>
	      <xs:element name="signerCerts" type="xs:base64Binary" minOccurs="0" maxOccurs="unbounded"/>
	      <xs:element name="scope" type="xs:string" minOccurs="0"/>
	    </xs:sequence>
	  </xs:complexType>
	
	  <xs:complexType name="uploadSignerCertificateChainResponse">
	    <xs:sequence/>
	  </xs:complexType>
	
	  <xs:complexType name="IllegalRequestException">
	    <xs:sequence>
	      <xs:element name="message" type="xs:string" minOccurs="0"/>
	    </xs:sequence>
	  </xs:complexType>
	
	  <xs:complexType name="activateSigner">
	    <xs:sequence>
	      <xs:element name="signerId" type="xs:int"/>
	      <xs:element name="authenticationCode" type="xs:string" minOccurs="0"/>
	    </xs:sequence>
	  </xs:complexType>
	
	  <xs:complexType name="activateSignerResponse">
	    <xs:sequence/>
	  </xs:complexType>
	
	  <xs:complexType name="CryptoTokenAuthenticationFailureException">
	    <xs:sequence>
	      <xs:element name="message" type="xs:string" minOccurs="0"/>
	    </xs:sequence>
	  </xs:complexType>
	
	  <xs:complexType name="testKey">
	    <xs:sequence>
	      <xs:element name="signerId" type="xs:int"/>
	      <xs:element name="alias" type="xs:string" minOccurs="0"/>
	      <xs:element name="authCode" type="xs:string" minOccurs="0"/>
	    </xs:sequence>
	  </xs:complexType>
	
	  <xs:complexType name="testKeyResponse">
	    <xs:sequence>
	      <xs:element name="return" type="tns:keyTestResult" minOccurs="0" maxOccurs="unbounded"/>
	    </xs:sequence>
	  </xs:complexType>
	
	  <xs:complexType name="keyTestResult">
	    <xs:sequence>
	      <xs:element name="alias" type="xs:string" minOccurs="0"/>
	      <xs:element name="publicKeyHash" type="xs:string" minOccurs="0"/>
	      <xs:element name="status" type="xs:string" minOccurs="0"/>
	      <xs:element name="success" type="xs:boolean"/>
	    </xs:sequence>
	  </xs:complexType>
	
	  <xs:complexType name="KeyStoreException">
	    <xs:sequence>
	      <xs:element name="message" type="xs:string" minOccurs="0"/>
	    </xs:sequence>
	  </xs:complexType>
	
	  <xs:complexType name="globalResync">
	    <xs:sequence/>
	  </xs:complexType>
	
	  <xs:complexType name="globalResyncResponse">
	    <xs:sequence/>
	  </xs:complexType>
	
	  <xs:complexType name="ResyncException">
	    <xs:sequence>
	      <xs:element name="message" type="xs:string" minOccurs="0"/>
	    </xs:sequence>
	  </xs:complexType>
	
	  <xs:complexType name="getPKCS10CertificateRequestForKey">
	    <xs:sequence>
	      <xs:element name="signerId" type="xs:int"/>
	      <xs:element name="certReqInfo" type="tns:pkcs10CertReqInfo" minOccurs="0"/>
	      <xs:element name="explicitEccParameters" type="xs:boolean"/>
	      <xs:element name="defaultKey" type="xs:boolean"/>
	    </xs:sequence>
	  </xs:complexType>
	
	  <xs:complexType name="pkcs10CertReqInfo">
	    <xs:sequence>
	      <xs:element name="attributes" type="tns:asn1Set" minOccurs="0"/>
	      <xs:element name="signatureAlgorithm" type="xs:string" minOccurs="0"/>
	      <xs:element name="subjectDN" type="xs:string" minOccurs="0"/>
	    </xs:sequence>
	  </xs:complexType>
	
	  <xs:complexType name="asn1Set" abstract="true">
	    <xs:complexContent>
	      <xs:extension base="tns:asn1Object">
	        <xs:sequence/>
	      </xs:extension>
	    </xs:complexContent>
	  </xs:complexType>
	
	  <xs:complexType name="asn1Object" abstract="true">
	    <xs:complexContent>
	      <xs:extension base="tns:derObject">
	        <xs:sequence/>
	      </xs:extension>
	    </xs:complexContent>
	  </xs:complexType>
	
	  <xs:complexType name="derObject" abstract="true">
	    <xs:complexContent>
	      <xs:extension base="tns:asn1Encodable">
	        <xs:sequence/>
	      </xs:extension>
	    </xs:complexContent>
	  </xs:complexType>
	
	  <xs:complexType name="asn1Encodable" abstract="true">
	    <xs:sequence/>
	  </xs:complexType>
	
	  <xs:complexType name="getPKCS10CertificateRequestForKeyResponse">
	    <xs:sequence>
	      <xs:element name="return" type="tns:base64SignerCertReqData" minOccurs="0"/>
	    </xs:sequence>
	  </xs:complexType>
	
	  <xs:complexType name="base64SignerCertReqData">
	    <xs:sequence>
	      <xs:element name="base64CertReq" type="xs:base64Binary" minOccurs="0"/>
	    </xs:sequence>
	  </xs:complexType>
	
	  <xs:complexType name="getSigningValidityNotBefore">
	    <xs:sequence>
	      <xs:element name="workerId" type="xs:int"/>
	    </xs:sequence>
	  </xs:complexType>
	
	  <xs:complexType name="getSigningValidityNotBeforeResponse">
	    <xs:sequence>
	      <xs:element name="return" type="xs:dateTime" minOccurs="0"/>
	    </xs:sequence>
	  </xs:complexType>
	
	  <xs:complexType name="setWorkerProperty">
	    <xs:sequence>
	      <xs:element name="workerId" type="xs:int"/>
	      <xs:element name="key" type="xs:string" minOccurs="0"/>
	      <xs:element name="value" type="xs:string" minOccurs="0"/>
	    </xs:sequence>
	  </xs:complexType>
	
	  <xs:complexType name="setWorkerPropertyResponse">
	    <xs:sequence/>
	  </xs:complexType>
	
	  <xs:complexType name="getCurrentWorkerConfig">
	    <xs:sequence>
	      <xs:element name="workerId" type="xs:int"/>
	    </xs:sequence>
	  </xs:complexType>
	
	  <xs:complexType name="getCurrentWorkerConfigResponse">
	    <xs:sequence>
	      <xs:element name="return" type="tns:wsWorkerConfig" minOccurs="0"/>
	    </xs:sequence>
	  </xs:complexType>
	
	  <xs:complexType name="wsWorkerConfig">
	    <xs:sequence>
	      <xs:element name="properties">
	        <xs:complexType>
	          <xs:sequence>
	            <xs:element name="entry" minOccurs="0" maxOccurs="unbounded">
	              <xs:complexType>
	                <xs:sequence>
	                  <xs:element name="key" minOccurs="0" type="xs:anyType"/>
	                  <xs:element name="value" minOccurs="0" type="xs:anyType"/>
	                </xs:sequence>
	              </xs:complexType>
	            </xs:element>
	          </xs:sequence>
	        </xs:complexType>
	      </xs:element>
	    </xs:sequence>
	  </xs:complexType>
	
	  <xs:complexType name="removeGlobalProperty">
	    <xs:sequence>
	      <xs:element name="scope" type="xs:string" minOccurs="0"/>
	      <xs:element name="key" type="xs:string" minOccurs="0"/>
	    </xs:sequence>
	  </xs:complexType>
	
	  <xs:complexType name="removeGlobalPropertyResponse">
	    <xs:sequence>
	      <xs:element name="return" type="xs:boolean"/>
	    </xs:sequence>
	  </xs:complexType>
	
	  <xs:complexType name="getSignerCertificate">
	    <xs:sequence>
	      <xs:element name="signerId" type="xs:int"/>
	    </xs:sequence>
	  </xs:complexType>
	
	  <xs:complexType name="getSignerCertificateResponse">
	    <xs:sequence>
	      <xs:element name="return" type="xs:base64Binary" nillable="true" minOccurs="0"/>
	    </xs:sequence>
	  </xs:complexType>
	
	  <xs:complexType name="deactivateSigner">
	    <xs:sequence>
	      <xs:element name="signerId" type="xs:int"/>
	    </xs:sequence>
	  </xs:complexType>
	
	  <xs:complexType name="deactivateSignerResponse">
	    <xs:sequence>
	      <xs:element name="return" type="xs:boolean"/>
	    </xs:sequence>
	  </xs:complexType>
	
	  <xs:complexType name="setGlobalProperty">
	    <xs:sequence>
	      <xs:element name="scope" type="xs:string" minOccurs="0"/>
	      <xs:element name="key" type="xs:string" minOccurs="0"/>
	      <xs:element name="value" type="xs:string" minOccurs="0"/>
	    </xs:sequence>
	  </xs:complexType>
	
	  <xs:complexType name="setGlobalPropertyResponse">
	    <xs:sequence/>
	  </xs:complexType>
	
	  <xs:complexType name="getAuthorizedClients">
	    <xs:sequence>
	      <xs:element name="workerId" type="xs:int"/>
	    </xs:sequence>
	  </xs:complexType>
	
	  <xs:complexType name="getAuthorizedClientsResponse">
	    <xs:sequence>
	      <xs:element name="return" type="tns:authorizedClient" minOccurs="0" maxOccurs="unbounded"/>
	    </xs:sequence>
	  </xs:complexType>
	
	  <xs:complexType name="authorizedClient">
	    <xs:sequence>
	      <xs:element name="certSN" type="xs:string" minOccurs="0"/>
	      <xs:element name="issuerDN" type="xs:string" minOccurs="0"/>
	    </xs:sequence>
	  </xs:complexType>
	
	  <xs:complexType name="reloadConfiguration">
	    <xs:sequence>
	      <xs:element name="workerId" type="xs:int"/>
	    </xs:sequence>
	  </xs:complexType>
	
	  <xs:complexType name="reloadConfigurationResponse">
	    <xs:sequence/>
	  </xs:complexType>
	
	  <xs:complexType name="process">
	    <xs:sequence>
	      <xs:element name="workerIdOrName" type="xs:string" minOccurs="0"/>
	      <xs:element name="processRequest" type="xs:base64Binary" minOccurs="0" maxOccurs="unbounded"/>
	    </xs:sequence>
	  </xs:complexType>
	
	  <xs:complexType name="processResponse">
	    <xs:sequence>
	      <xs:element name="return" type="xs:base64Binary" minOccurs="0" maxOccurs="unbounded"/>
	    </xs:sequence>
	  </xs:complexType>
	
	  <xs:complexType name="SignServerException">
	    <xs:sequence>
	      <xs:element name="message" type="xs:string" minOccurs="0"/>
	    </xs:sequence>
	  </xs:complexType>
	
	  <xs:complexType name="getPKCS10CertificateRequest">
	    <xs:sequence>
	      <xs:element name="signerId" type="xs:int"/>
	      <xs:element name="certReqInfo" type="tns:pkcs10CertReqInfo" minOccurs="0"/>
	      <xs:element name="explicitEccParameters" type="xs:boolean"/>
	    </xs:sequence>
	  </xs:complexType>
	
	  <xs:complexType name="getPKCS10CertificateRequestResponse">
	    <xs:sequence>
	      <xs:element name="return" type="tns:base64SignerCertReqData" minOccurs="0"/>
	    </xs:sequence>
	  </xs:complexType>
	
	  <xs:complexType name="uploadSignerCertificate">
	    <xs:sequence>
	      <xs:element name="signerId" type="xs:int"/>
	      <xs:element name="signerCert" type="xs:base64Binary" nillable="true" minOccurs="0"/>
	      <xs:element name="scope" type="xs:string" minOccurs="0"/>
	    </xs:sequence>
	  </xs:complexType>
	
	  <xs:complexType name="uploadSignerCertificateResponse">
	    <xs:sequence/>
	  </xs:complexType>
	
	  <xs:complexType name="getWorkers">
	    <xs:sequence>
	      <xs:element name="workerType" type="xs:int"/>
	    </xs:sequence>
	  </xs:complexType>
	
	  <xs:complexType name="getWorkersResponse">
	    <xs:sequence>
	      <xs:element name="return" type="xs:int" minOccurs="0" maxOccurs="unbounded"/>
	    </xs:sequence>
	  </xs:complexType>
	
	  <xs:complexType name="getGlobalConfiguration">
	    <xs:sequence/>
	  </xs:complexType>
	
	  <xs:complexType name="getGlobalConfigurationResponse">
	    <xs:sequence>
	      <xs:element name="return" type="tns:wsGlobalConfiguration" minOccurs="0"/>
	    </xs:sequence>
	  </xs:complexType>
	
	  <xs:complexType name="wsGlobalConfiguration">
	    <xs:sequence>
	      <xs:element name="appVersion" type="xs:string" minOccurs="0"/>
	      <xs:element name="clusterClassLoaderEnabled" type="xs:boolean"/>
	      <xs:element name="config">
	        <xs:complexType>
	          <xs:sequence>
	            <xs:element name="entry" minOccurs="0" maxOccurs="unbounded">
	              <xs:complexType>
	                <xs:sequence>
	                  <xs:element name="key" minOccurs="0" type="xs:anyType"/>
	                  <xs:element name="value" minOccurs="0" type="xs:anyType"/>
	                </xs:sequence>
	              </xs:complexType>
	            </xs:element>
	          </xs:sequence>
	        </xs:complexType>
	      </xs:element>
	      <xs:element name="requireSigning" type="xs:boolean"/>
	      <xs:element name="state" type="xs:string" minOccurs="0"/>
	      <xs:element name="useClassVersions" type="xs:boolean"/>
	    </xs:sequence>
	  </xs:complexType>
	
	  <xs:complexType name="getSignerCertificateChain">
	    <xs:sequence>
	      <xs:element name="signerId" type="xs:int"/>
	    </xs:sequence>
	  </xs:complexType>
	
	  <xs:complexType name="getSignerCertificateChainResponse">
	    <xs:sequence>
	      <xs:element name="return" type="xs:base64Binary" minOccurs="0" maxOccurs="unbounded"/>
	    </xs:sequence>
	  </xs:complexType>
	
	  <xs:complexType name="destroyKey">
	    <xs:sequence>
	      <xs:element name="signerId" type="xs:int"/>
	      <xs:element name="purpose" type="xs:int"/>
	    </xs:sequence>
	  </xs:complexType>
	
	  <xs:complexType name="destroyKeyResponse">
	    <xs:sequence>
	      <xs:element name="return" type="xs:boolean"/>
	    </xs:sequence>
	  </xs:complexType>
	
	  <xs:complexType name="getSigningValidityNotAfter">
	    <xs:sequence>
	      <xs:element name="workerId" type="xs:int"/>
	    </xs:sequence>
	  </xs:complexType>
	
	  <xs:complexType name="getSigningValidityNotAfterResponse">
	    <xs:sequence>
	      <xs:element name="return" type="xs:dateTime" minOccurs="0"/>
	    </xs:sequence>
	  </xs:complexType>
	
	  <xs:complexType name="getStatus">
	    <xs:sequence>
	      <xs:element name="workerId" type="xs:int"/>
	    </xs:sequence>
	  </xs:complexType>
	
	  <xs:complexType name="getStatusResponse">
	    <xs:sequence>
	      <xs:element name="return" type="tns:wsWorkerStatus" minOccurs="0"/>
	    </xs:sequence>
	  </xs:complexType>
	
	  <xs:complexType name="wsWorkerStatus">
	    <xs:sequence>
	      <xs:element name="activeConfig">
	        <xs:complexType>
	          <xs:sequence>
	            <xs:element name="entry" minOccurs="0" maxOccurs="unbounded">
	              <xs:complexType>
	                <xs:sequence>
	                  <xs:element name="key" minOccurs="0" type="xs:anyType"/>
	                  <xs:element name="value" minOccurs="0" type="xs:anyType"/>
	                </xs:sequence>
	              </xs:complexType>
	            </xs:element>
	          </xs:sequence>
	        </xs:complexType>
	      </xs:element>
	      <xs:element name="completeStatusText" type="xs:string" minOccurs="0"/>
	      <xs:element name="hostname" type="xs:string" minOccurs="0"/>
	      <xs:element name="ok" type="xs:string" minOccurs="0"/>
	      <xs:element name="statusText" type="xs:string" minOccurs="0"/>
	      <xs:element name="workerId" type="xs:int"/>
	    </xs:sequence>
	  </xs:complexType>
	
	  <xs:complexType name="getKeyUsageCounterValue">
	    <xs:sequence>
	      <xs:element name="workerId" type="xs:int"/>
	    </xs:sequence>
	  </xs:complexType>
	
	  <xs:complexType name="getKeyUsageCounterValueResponse">
	    <xs:sequence>
	      <xs:element name="return" type="xs:long"/>
	    </xs:sequence>
	  </xs:complexType>
	
	  <xs:complexType name="globalReload">
	    <xs:sequence/>
	  </xs:complexType>
	
	  <xs:complexType name="globalReloadResponse">
	    <xs:sequence/>
	  </xs:complexType>
	
	  <xs:complexType name="removeAuthorizedClient">
	    <xs:sequence>
	      <xs:element name="workerId" type="xs:int"/>
	      <xs:element name="authClient" type="tns:authorizedClient" minOccurs="0"/>
	    </xs:sequence>
	  </xs:complexType>
	
	  <xs:complexType name="removeAuthorizedClientResponse">
	    <xs:sequence>
	      <xs:element name="return" type="xs:boolean"/>
	    </xs:sequence>
	  </xs:complexType>
	
	  <xs:complexType name="removeWorkerProperty">
	    <xs:sequence>
	      <xs:element name="workerId" type="xs:int"/>
	      <xs:element name="key" type="xs:string" minOccurs="0"/>
	    </xs:sequence>
	  </xs:complexType>
	
	  <xs:complexType name="removeWorkerPropertyResponse">
	    <xs:sequence>
	      <xs:element name="return" type="xs:boolean"/>
	    </xs:sequence>
	  </xs:complexType>
	
	  <xs:complexType name="addAuthorizedClient">
	    <xs:sequence>
	      <xs:element name="workerId" type="xs:int"/>
	      <xs:element name="authClient" type="tns:authorizedClient" minOccurs="0"/>
	    </xs:sequence>
	  </xs:complexType>
	
	  <xs:complexType name="addAuthorizedClientResponse">
	    <xs:sequence/>
	  </xs:complexType>
	</xs:schema>
  </types>
  <message name="process">
    <part name="parameters" element="tns:process"/>
  </message>
  <message name="processResponse">
    <part name="parameters" element="tns:processResponse"/>
  </message>
  <message name="InvalidWorkerIdException">
    <part name="fault" element="tns:InvalidWorkerIdException"/>
  </message>
  <message name="IllegalRequestException">
    <part name="fault" element="tns:IllegalRequestException"/>
  </message>
  <message name="CryptoTokenOfflineException">
    <part name="fault" element="tns:CryptoTokenOfflineException"/>
  </message>
  <message name="SignServerException">
    <part name="fault" element="tns:SignServerException"/>
  </message>
  <message name="AdminNotAuthorizedException">
    <part name="fault" element="tns:AdminNotAuthorizedException"/>
  </message>
  <message name="getStatus">
    <part name="parameters" element="tns:getStatus"/>
  </message>
  <message name="getStatusResponse">
    <part name="parameters" element="tns:getStatusResponse"/>
  </message>
  <message name="getWorkerId">
    <part name="parameters" element="tns:getWorkerId"/>
  </message>
  <message name="getWorkerIdResponse">
    <part name="parameters" element="tns:getWorkerIdResponse"/>
  </message>
  <message name="reloadConfiguration">
    <part name="parameters" element="tns:reloadConfiguration"/>
  </message>
  <message name="reloadConfigurationResponse">
    <part name="parameters" element="tns:reloadConfigurationResponse"/>
  </message>
  <message name="activateSigner">
    <part name="parameters" element="tns:activateSigner"/>
  </message>
  <message name="activateSignerResponse">
    <part name="parameters" element="tns:activateSignerResponse"/>
  </message>
  <message name="CryptoTokenAuthenticationFailureException">
    <part name="fault" element="tns:CryptoTokenAuthenticationFailureException"/>
  </message>
  <message name="deactivateSigner">
    <part name="parameters" element="tns:deactivateSigner"/>
  </message>
  <message name="deactivateSignerResponse">
    <part name="parameters" element="tns:deactivateSignerResponse"/>
  </message>
  <message name="getCurrentWorkerConfig">
    <part name="parameters" element="tns:getCurrentWorkerConfig"/>
  </message>
  <message name="getCurrentWorkerConfigResponse">
    <part name="parameters" element="tns:getCurrentWorkerConfigResponse"/>
  </message>
  <message name="setWorkerProperty">
    <part name="parameters" element="tns:setWorkerProperty"/>
  </message>
  <message name="setWorkerPropertyResponse">
    <part name="parameters" element="tns:setWorkerPropertyResponse"/>
  </message>
  <message name="removeWorkerProperty">
    <part name="parameters" element="tns:removeWorkerProperty"/>
  </message>
  <message name="removeWorkerPropertyResponse">
    <part name="parameters" element="tns:removeWorkerPropertyResponse"/>
  </message>
  <message name="getAuthorizedClients">
    <part name="parameters" element="tns:getAuthorizedClients"/>
  </message>
  <message name="getAuthorizedClientsResponse">
    <part name="parameters" element="tns:getAuthorizedClientsResponse"/>
  </message>
  <message name="addAuthorizedClient">
    <part name="parameters" element="tns:addAuthorizedClient"/>
  </message>
  <message name="addAuthorizedClientResponse">
    <part name="parameters" element="tns:addAuthorizedClientResponse"/>
  </message>
  <message name="removeAuthorizedClient">
    <part name="parameters" element="tns:removeAuthorizedClient"/>
  </message>
  <message name="removeAuthorizedClientResponse">
    <part name="parameters" element="tns:removeAuthorizedClientResponse"/>
  </message>
  <message name="getPKCS10CertificateRequest">
    <part name="parameters" element="tns:getPKCS10CertificateRequest"/>
  </message>
  <message name="getPKCS10CertificateRequestResponse">
    <part name="parameters" element="tns:getPKCS10CertificateRequestResponse"/>
  </message>
  <message name="getPKCS10CertificateRequestForKey">
    <part name="parameters" element="tns:getPKCS10CertificateRequestForKey"/>
  </message>
  <message name="getPKCS10CertificateRequestForKeyResponse">
    <part name="parameters" element="tns:getPKCS10CertificateRequestForKeyResponse"/>
  </message>
  <message name="getSignerCertificate">
    <part name="parameters" element="tns:getSignerCertificate"/>
  </message>
  <message name="getSignerCertificateResponse">
    <part name="parameters" element="tns:getSignerCertificateResponse"/>
  </message>
  <message name="getSignerCertificateChain">
    <part name="parameters" element="tns:getSignerCertificateChain"/>
  </message>
  <message name="getSignerCertificateChainResponse">
    <part name="parameters" element="tns:getSignerCertificateChainResponse"/>
  </message>
  <message name="getSigningValidityNotAfter">
    <part name="parameters" element="tns:getSigningValidityNotAfter"/>
  </message>
  <message name="getSigningValidityNotAfterResponse">
    <part name="parameters" element="tns:getSigningValidityNotAfterResponse"/>
  </message>
  <message name="getSigningValidityNotBefore">
    <part name="parameters" element="tns:getSigningValidityNotBefore"/>
  </message>
  <message name="getSigningValidityNotBeforeResponse">
    <part name="parameters" element="tns:getSigningValidityNotBeforeResponse"/>
  </message>
  <message name="getKeyUsageCounterValue">
    <part name="parameters" element="tns:getKeyUsageCounterValue"/>
  </message>
  <message name="getKeyUsageCounterValueResponse">
    <part name="parameters" element="tns:getKeyUsageCounterValueResponse"/>
  </message>
  <message name="destroyKey">
    <part name="parameters" element="tns:destroyKey"/>
  </message>
  <message name="destroyKeyResponse">
    <part name="parameters" element="tns:destroyKeyResponse"/>
  </message>
  <message name="generateSignerKey">
    <part name="parameters" element="tns:generateSignerKey"/>
  </message>
  <message name="generateSignerKeyResponse">
    <part name="parameters" element="tns:generateSignerKeyResponse"/>
  </message>
  <message name="testKey">
    <part name="parameters" element="tns:testKey"/>
  </message>
  <message name="testKeyResponse">
    <part name="parameters" element="tns:testKeyResponse"/>
  </message>
  <message name="KeyStoreException">
    <part name="fault" element="tns:KeyStoreException"/>
  </message>
  <message name="uploadSignerCertificate">
    <part name="parameters" element="tns:uploadSignerCertificate"/>
  </message>
  <message name="uploadSignerCertificateResponse">
    <part name="parameters" element="tns:uploadSignerCertificateResponse"/>
  </message>
  <message name="uploadSignerCertificateChain">
    <part name="parameters" element="tns:uploadSignerCertificateChain"/>
  </message>
  <message name="uploadSignerCertificateChainResponse">
    <part name="parameters" element="tns:uploadSignerCertificateChainResponse"/>
  </message>
  <message name="setGlobalProperty">
    <part name="parameters" element="tns:setGlobalProperty"/>
  </message>
  <message name="setGlobalPropertyResponse">
    <part name="parameters" element="tns:setGlobalPropertyResponse"/>
  </message>
  <message name="removeGlobalProperty">
    <part name="parameters" element="tns:removeGlobalProperty"/>
  </message>
  <message name="removeGlobalPropertyResponse">
    <part name="parameters" element="tns:removeGlobalPropertyResponse"/>
  </message>
  <message name="getGlobalConfiguration">
    <part name="parameters" element="tns:getGlobalConfiguration"/>
  </message>
  <message name="getGlobalConfigurationResponse">
    <part name="parameters" element="tns:getGlobalConfigurationResponse"/>
  </message>
  <message name="getWorkers">
    <part name="parameters" element="tns:getWorkers"/>
  </message>
  <message name="getWorkersResponse">
    <part name="parameters" element="tns:getWorkersResponse"/>
  </message>
  <message name="globalResync">
    <part name="parameters" element="tns:globalResync"/>
  </message>
  <message name="globalResyncResponse">
    <part name="parameters" element="tns:globalResyncResponse"/>
  </message>
  <message name="ResyncException">
    <part name="fault" element="tns:ResyncException"/>
  </message>
  <message name="globalReload">
    <part name="parameters" element="tns:globalReload"/>
  </message>
  <message name="globalReloadResponse">
    <part name="parameters" element="tns:globalReloadResponse"/>
  </message>
  <portType name="AdminWS">
    <operation name="process">
      <input message="tns:process"/>
      <output message="tns:processResponse"/>
      <fault message="tns:InvalidWorkerIdException" name="InvalidWorkerIdException"/>
      <fault message="tns:IllegalRequestException" name="IllegalRequestException"/>
      <fault message="tns:CryptoTokenOfflineException" name="CryptoTokenOfflineException"/>
      <fault message="tns:SignServerException" name="SignServerException"/>
      <fault message="tns:AdminNotAuthorizedException" name="AdminNotAuthorizedException"/>
    </operation>
    <operation name="getStatus">
      <input message="tns:getStatus"/>
      <output message="tns:getStatusResponse"/>
      <fault message="tns:InvalidWorkerIdException" name="InvalidWorkerIdException"/>
      <fault message="tns:AdminNotAuthorizedException" name="AdminNotAuthorizedException"/>
    </operation>
    <operation name="getWorkerId">
      <input message="tns:getWorkerId"/>
      <output message="tns:getWorkerIdResponse"/>
      <fault message="tns:AdminNotAuthorizedException" name="AdminNotAuthorizedException"/>
    </operation>
    <operation name="reloadConfiguration">
      <input message="tns:reloadConfiguration"/>
      <output message="tns:reloadConfigurationResponse"/>
      <fault message="tns:AdminNotAuthorizedException" name="AdminNotAuthorizedException"/>
    </operation>
    <operation name="activateSigner">
      <input message="tns:activateSigner"/>
      <output message="tns:activateSignerResponse"/>
      <fault message="tns:CryptoTokenAuthenticationFailureException" name="CryptoTokenAuthenticationFailureException"/>
      <fault message="tns:CryptoTokenOfflineException" name="CryptoTokenOfflineException"/>
      <fault message="tns:InvalidWorkerIdException" name="InvalidWorkerIdException"/>
      <fault message="tns:AdminNotAuthorizedException" name="AdminNotAuthorizedException"/>
    </operation>
    <operation name="deactivateSigner">
      <input message="tns:deactivateSigner"/>
      <output message="tns:deactivateSignerResponse"/>
      <fault message="tns:CryptoTokenOfflineException" name="CryptoTokenOfflineException"/>
      <fault message="tns:InvalidWorkerIdException" name="InvalidWorkerIdException"/>
      <fault message="tns:AdminNotAuthorizedException" name="AdminNotAuthorizedException"/>
    </operation>
    <operation name="getCurrentWorkerConfig">
      <input message="tns:getCurrentWorkerConfig"/>
      <output message="tns:getCurrentWorkerConfigResponse"/>
      <fault message="tns:AdminNotAuthorizedException" name="AdminNotAuthorizedException"/>
    </operation>
    <operation name="setWorkerProperty">
      <input message="tns:setWorkerProperty"/>
      <output message="tns:setWorkerPropertyResponse"/>
      <fault message="tns:AdminNotAuthorizedException" name="AdminNotAuthorizedException"/>
    </operation>
    <operation name="removeWorkerProperty">
      <input message="tns:removeWorkerProperty"/>
      <output message="tns:removeWorkerPropertyResponse"/>
      <fault message="tns:AdminNotAuthorizedException" name="AdminNotAuthorizedException"/>
    </operation>
    <operation name="getAuthorizedClients">
      <input message="tns:getAuthorizedClients"/>
      <output message="tns:getAuthorizedClientsResponse"/>
      <fault message="tns:AdminNotAuthorizedException" name="AdminNotAuthorizedException"/>
    </operation>
    <operation name="addAuthorizedClient">
      <input message="tns:addAuthorizedClient"/>
      <output message="tns:addAuthorizedClientResponse"/>
      <fault message="tns:AdminNotAuthorizedException" name="AdminNotAuthorizedException"/>
    </operation>
    <operation name="removeAuthorizedClient">
      <input message="tns:removeAuthorizedClient"/>
      <output message="tns:removeAuthorizedClientResponse"/>
      <fault message="tns:AdminNotAuthorizedException" name="AdminNotAuthorizedException"/>
    </operation>
    <operation name="getPKCS10CertificateRequest">
      <input message="tns:getPKCS10CertificateRequest"/>
      <output message="tns:getPKCS10CertificateRequestResponse"/>
      <fault message="tns:CryptoTokenOfflineException" name="CryptoTokenOfflineException"/>
      <fault message="tns:InvalidWorkerIdException" name="InvalidWorkerIdException"/>
      <fault message="tns:AdminNotAuthorizedException" name="AdminNotAuthorizedException"/>
    </operation>
    <operation name="getPKCS10CertificateRequestForKey">
      <input message="tns:getPKCS10CertificateRequestForKey"/>
      <output message="tns:getPKCS10CertificateRequestForKeyResponse"/>
      <fault message="tns:CryptoTokenOfflineException" name="CryptoTokenOfflineException"/>
      <fault message="tns:InvalidWorkerIdException" name="InvalidWorkerIdException"/>
      <fault message="tns:AdminNotAuthorizedException" name="AdminNotAuthorizedException"/>
    </operation>
    <operation name="getSignerCertificate">
      <input message="tns:getSignerCertificate"/>
      <output message="tns:getSignerCertificateResponse"/>
      <fault message="tns:CryptoTokenOfflineException" name="CryptoTokenOfflineException"/>
      <fault message="tns:AdminNotAuthorizedException" name="AdminNotAuthorizedException"/>
    </operation>
    <operation name="getSignerCertificateChain">
      <input message="tns:getSignerCertificateChain"/>
      <output message="tns:getSignerCertificateChainResponse"/>
      <fault message="tns:CryptoTokenOfflineException" name="CryptoTokenOfflineException"/>
      <fault message="tns:AdminNotAuthorizedException" name="AdminNotAuthorizedException"/>
    </operation>
    <operation name="getSigningValidityNotAfter">
      <input message="tns:getSigningValidityNotAfter"/>
      <output message="tns:getSigningValidityNotAfterResponse"/>
      <fault message="tns:CryptoTokenOfflineException" name="CryptoTokenOfflineException"/>
      <fault message="tns:AdminNotAuthorizedException" name="AdminNotAuthorizedException"/>
    </operation>
    <operation name="getSigningValidityNotBefore">
      <input message="tns:getSigningValidityNotBefore"/>
      <output message="tns:getSigningValidityNotBeforeResponse"/>
      <fault message="tns:CryptoTokenOfflineException" name="CryptoTokenOfflineException"/>
      <fault message="tns:AdminNotAuthorizedException" name="AdminNotAuthorizedException"/>
    </operation>
    <operation name="getKeyUsageCounterValue">
      <input message="tns:getKeyUsageCounterValue"/>
      <output message="tns:getKeyUsageCounterValueResponse"/>
      <fault message="tns:CryptoTokenOfflineException" name="CryptoTokenOfflineException"/>
      <fault message="tns:AdminNotAuthorizedException" name="AdminNotAuthorizedException"/>
    </operation>
    <operation name="destroyKey">
      <input message="tns:destroyKey"/>
      <output message="tns:destroyKeyResponse"/>
      <fault message="tns:InvalidWorkerIdException" name="InvalidWorkerIdException"/>
      <fault message="tns:AdminNotAuthorizedException" name="AdminNotAuthorizedException"/>
    </operation>
    <operation name="generateSignerKey">
      <input message="tns:generateSignerKey"/>
      <output message="tns:generateSignerKeyResponse"/>
      <fault message="tns:CryptoTokenOfflineException" name="CryptoTokenOfflineException"/>
      <fault message="tns:InvalidWorkerIdException" name="InvalidWorkerIdException"/>
      <fault message="tns:AdminNotAuthorizedException" name="AdminNotAuthorizedException"/>
    </operation>
    <operation name="testKey">
      <input message="tns:testKey"/>
      <output message="tns:testKeyResponse"/>
      <fault message="tns:CryptoTokenOfflineException" name="CryptoTokenOfflineException"/>
      <fault message="tns:InvalidWorkerIdException" name="InvalidWorkerIdException"/>
      <fault message="tns:KeyStoreException" name="KeyStoreException"/>
      <fault message="tns:AdminNotAuthorizedException" name="AdminNotAuthorizedException"/>
    </operation>
    <operation name="uploadSignerCertificate">
      <input message="tns:uploadSignerCertificate"/>
      <output message="tns:uploadSignerCertificateResponse"/>
      <fault message="tns:IllegalRequestException" name="IllegalRequestException"/>
      <fault message="tns:AdminNotAuthorizedException" name="AdminNotAuthorizedException"/>
    </operation>
    <operation name="uploadSignerCertificateChain">
      <input message="tns:uploadSignerCertificateChain"/>
      <output message="tns:uploadSignerCertificateChainResponse"/>
      <fault message="tns:IllegalRequestException" name="IllegalRequestException"/>
      <fault message="tns:AdminNotAuthorizedException" name="AdminNotAuthorizedException"/>
    </operation>
    <operation name="setGlobalProperty">
      <input message="tns:setGlobalProperty"/>
      <output message="tns:setGlobalPropertyResponse"/>
      <fault message="tns:AdminNotAuthorizedException" name="AdminNotAuthorizedException"/>
    </operation>
    <operation name="removeGlobalProperty">
      <input message="tns:removeGlobalProperty"/>
      <output message="tns:removeGlobalPropertyResponse"/>
      <fault message="tns:AdminNotAuthorizedException" name="AdminNotAuthorizedException"/>
    </operation>
    <operation name="getGlobalConfiguration">
      <input message="tns:getGlobalConfiguration"/>
      <output message="tns:getGlobalConfigurationResponse"/>
      <fault message="tns:AdminNotAuthorizedException" name="AdminNotAuthorizedException"/>
    </operation>
    <operation name="getWorkers">
      <input message="tns:getWorkers"/>
      <output message="tns:getWorkersResponse"/>
      <fault message="tns:AdminNotAuthorizedException" name="AdminNotAuthorizedException"/>
    </operation>
    <operation name="globalResync">
      <input message="tns:globalResync"/>
      <output message="tns:globalResyncResponse"/>
      <fault message="tns:ResyncException" name="ResyncException"/>
      <fault message="tns:AdminNotAuthorizedException" name="AdminNotAuthorizedException"/>
    </operation>
    <operation name="globalReload">
      <input message="tns:globalReload"/>
      <output message="tns:globalReloadResponse"/>
      <fault message="tns:AdminNotAuthorizedException" name="AdminNotAuthorizedException"/>
    </operation>
  </portType>
  <binding name="AdminWSPortBinding" type="tns:AdminWS">
    <soap:binding transport="http://schemas.xmlsoap.org/soap/http" style="document"/>
    <operation name="process">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="InvalidWorkerIdException">
        <soap:fault name="InvalidWorkerIdException" use="literal"/>
      </fault>
      <fault name="IllegalRequestException">
        <soap:fault name="IllegalRequestException" use="literal"/>
      </fault>
      <fault name="CryptoTokenOfflineException">
        <soap:fault name="CryptoTokenOfflineException" use="literal"/>
      </fault>
      <fault name="SignServerException">
        <soap:fault name="SignServerException" use="literal"/>
      </fault>
      <fault name="AdminNotAuthorizedException">
        <soap:fault name="AdminNotAuthorizedException" use="literal"/>
      </fault>
    </operation>
    <operation name="getStatus">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="InvalidWorkerIdException">
        <soap:fault name="InvalidWorkerIdException" use="literal"/>
      </fault>
      <fault name="AdminNotAuthorizedException">
        <soap:fault name="AdminNotAuthorizedException" use="literal"/>
      </fault>
    </operation>
    <operation name="getWorkerId">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="AdminNotAuthorizedException">
        <soap:fault name="AdminNotAuthorizedException" use="literal"/>
      </fault>
    </operation>
    <operation name="reloadConfiguration">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="AdminNotAuthorizedException">
        <soap:fault name="AdminNotAuthorizedException" use="literal"/>
      </fault>
    </operation>
    <operation name="activateSigner">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="CryptoTokenAuthenticationFailureException">
        <soap:fault name="CryptoTokenAuthenticationFailureException" use="literal"/>
      </fault>
      <fault name="CryptoTokenOfflineException">
        <soap:fault name="CryptoTokenOfflineException" use="literal"/>
      </fault>
      <fault name="InvalidWorkerIdException">
        <soap:fault name="InvalidWorkerIdException" use="literal"/>
      </fault>
      <fault name="AdminNotAuthorizedException">
        <soap:fault name="AdminNotAuthorizedException" use="literal"/>
      </fault>
    </operation>
    <operation name="deactivateSigner">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="CryptoTokenOfflineException">
        <soap:fault name="CryptoTokenOfflineException" use="literal"/>
      </fault>
      <fault name="InvalidWorkerIdException">
        <soap:fault name="InvalidWorkerIdException" use="literal"/>
      </fault>
      <fault name="AdminNotAuthorizedException">
        <soap:fault name="AdminNotAuthorizedException" use="literal"/>
      </fault>
    </operation>
    <operation name="getCurrentWorkerConfig">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="AdminNotAuthorizedException">
        <soap:fault name="AdminNotAuthorizedException" use="literal"/>
      </fault>
    </operation>
    <operation name="setWorkerProperty">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="AdminNotAuthorizedException">
        <soap:fault name="AdminNotAuthorizedException" use="literal"/>
      </fault>
    </operation>
    <operation name="removeWorkerProperty">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="AdminNotAuthorizedException">
        <soap:fault name="AdminNotAuthorizedException" use="literal"/>
      </fault>
    </operation>
    <operation name="getAuthorizedClients">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="AdminNotAuthorizedException">
        <soap:fault name="AdminNotAuthorizedException" use="literal"/>
      </fault>
    </operation>
    <operation name="addAuthorizedClient">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="AdminNotAuthorizedException">
        <soap:fault name="AdminNotAuthorizedException" use="literal"/>
      </fault>
    </operation>
    <operation name="removeAuthorizedClient">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="AdminNotAuthorizedException">
        <soap:fault name="AdminNotAuthorizedException" use="literal"/>
      </fault>
    </operation>
    <operation name="getPKCS10CertificateRequest">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="CryptoTokenOfflineException">
        <soap:fault name="CryptoTokenOfflineException" use="literal"/>
      </fault>
      <fault name="InvalidWorkerIdException">
        <soap:fault name="InvalidWorkerIdException" use="literal"/>
      </fault>
      <fault name="AdminNotAuthorizedException">
        <soap:fault name="AdminNotAuthorizedException" use="literal"/>
      </fault>
    </operation>
    <operation name="getPKCS10CertificateRequestForKey">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="CryptoTokenOfflineException">
        <soap:fault name="CryptoTokenOfflineException" use="literal"/>
      </fault>
      <fault name="InvalidWorkerIdException">
        <soap:fault name="InvalidWorkerIdException" use="literal"/>
      </fault>
      <fault name="AdminNotAuthorizedException">
        <soap:fault name="AdminNotAuthorizedException" use="literal"/>
      </fault>
    </operation>
    <operation name="getSignerCertificate">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="CryptoTokenOfflineException">
        <soap:fault name="CryptoTokenOfflineException" use="literal"/>
      </fault>
      <fault name="AdminNotAuthorizedException">
        <soap:fault name="AdminNotAuthorizedException" use="literal"/>
      </fault>
    </operation>
    <operation name="getSignerCertificateChain">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="CryptoTokenOfflineException">
        <soap:fault name="CryptoTokenOfflineException" use="literal"/>
      </fault>
      <fault name="AdminNotAuthorizedException">
        <soap:fault name="AdminNotAuthorizedException" use="literal"/>
      </fault>
    </operation>
    <operation name="getSigningValidityNotAfter">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="CryptoTokenOfflineException">
        <soap:fault name="CryptoTokenOfflineException" use="literal"/>
      </fault>
      <fault name="AdminNotAuthorizedException">
        <soap:fault name="AdminNotAuthorizedException" use="literal"/>
      </fault>
    </operation>
    <operation name="getSigningValidityNotBefore">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="CryptoTokenOfflineException">
        <soap:fault name="CryptoTokenOfflineException" use="literal"/>
      </fault>
      <fault name="AdminNotAuthorizedException">
        <soap:fault name="AdminNotAuthorizedException" use="literal"/>
      </fault>
    </operation>
    <operation name="getKeyUsageCounterValue">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="CryptoTokenOfflineException">
        <soap:fault name="CryptoTokenOfflineException" use="literal"/>
      </fault>
      <fault name="AdminNotAuthorizedException">
        <soap:fault name="AdminNotAuthorizedException" use="literal"/>
      </fault>
    </operation>
    <operation name="destroyKey">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="InvalidWorkerIdException">
        <soap:fault name="InvalidWorkerIdException" use="literal"/>
      </fault>
      <fault name="AdminNotAuthorizedException">
        <soap:fault name="AdminNotAuthorizedException" use="literal"/>
      </fault>
    </operation>
    <operation name="generateSignerKey">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="CryptoTokenOfflineException">
        <soap:fault name="CryptoTokenOfflineException" use="literal"/>
      </fault>
      <fault name="InvalidWorkerIdException">
        <soap:fault name="InvalidWorkerIdException" use="literal"/>
      </fault>
      <fault name="AdminNotAuthorizedException">
        <soap:fault name="AdminNotAuthorizedException" use="literal"/>
      </fault>
    </operation>
    <operation name="testKey">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="CryptoTokenOfflineException">
        <soap:fault name="CryptoTokenOfflineException" use="literal"/>
      </fault>
      <fault name="InvalidWorkerIdException">
        <soap:fault name="InvalidWorkerIdException" use="literal"/>
      </fault>
      <fault name="KeyStoreException">
        <soap:fault name="KeyStoreException" use="literal"/>
      </fault>
      <fault name="AdminNotAuthorizedException">
        <soap:fault name="AdminNotAuthorizedException" use="literal"/>
      </fault>
    </operation>
    <operation name="uploadSignerCertificate">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="IllegalRequestException">
        <soap:fault name="IllegalRequestException" use="literal"/>
      </fault>
      <fault name="AdminNotAuthorizedException">
        <soap:fault name="AdminNotAuthorizedException" use="literal"/>
      </fault>
    </operation>
    <operation name="uploadSignerCertificateChain">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="IllegalRequestException">
        <soap:fault name="IllegalRequestException" use="literal"/>
      </fault>
      <fault name="AdminNotAuthorizedException">
        <soap:fault name="AdminNotAuthorizedException" use="literal"/>
      </fault>
    </operation>
    <operation name="setGlobalProperty">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="AdminNotAuthorizedException">
        <soap:fault name="AdminNotAuthorizedException" use="literal"/>
      </fault>
    </operation>
    <operation name="removeGlobalProperty">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="AdminNotAuthorizedException">
        <soap:fault name="AdminNotAuthorizedException" use="literal"/>
      </fault>
    </operation>
    <operation name="getGlobalConfiguration">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="AdminNotAuthorizedException">
        <soap:fault name="AdminNotAuthorizedException" use="literal"/>
      </fault>
    </operation>
    <operation name="getWorkers">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="AdminNotAuthorizedException">
        <soap:fault name="AdminNotAuthorizedException" use="literal"/>
      </fault>
    </operation>
    <operation name="globalResync">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ResyncException">
        <soap:fault name="ResyncException" use="literal"/>
      </fault>
      <fault name="AdminNotAuthorizedException">
        <soap:fault name="AdminNotAuthorizedException" use="literal"/>
      </fault>
    </operation>
    <operation name="globalReload">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="AdminNotAuthorizedException">
        <soap:fault name="AdminNotAuthorizedException" use="literal"/>
      </fault>
    </operation>
  </binding>
  <service name="AdminWSService">
    <port name="AdminWSPort" binding="tns:AdminWSPortBinding">
      <soap:address location="https://REPLACE_WITH_ACTUAL_URL"/>
    </port>
  </service>
</definitions>

