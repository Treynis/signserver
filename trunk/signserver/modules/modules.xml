<?xml version="1.0" encoding="UTF-8"?>
<!-- ======================================================================= -->
<!--                                                                         -->
<!--  SignServer: The OpenSource Automated Signing Server                    -->
<!--                                                                         -->
<!--  This software is free software; you can redistribute it and/or         -->
<!--  modify it under the terms of the GNU Lesser General Public             -->
<!--  License as published by the Free Software Foundation; either           -->
<!--  version 2.1 of the License, or any later version.                      -->
<!--                                                                         -->
<!--  See terms of license at gnu.org.                                       -->
<!--                                                                         -->
<!-- ======================================================================= -->
<!-- Version: $Id$         -->
<project name="SignServer-modules" default="default" basedir=".">

    <target name="default">
        <fail message="This script is not intented to run on its own"/>
    </target>
   
    <property name="signserver.home" location="../../"/>
    <property name="server.dist.dir" value="${signserver.home}/lib"/>

    <!-- Module conditionals -->
    <condition property="signserverws.conditionenabled">
        <istrue value="${signserverws.enabled}"/>
    </condition>
    <condition property="genericws.conditionenabled">
        <istrue value="${genericws.enabled}"/>
    </condition>
    <condition property="validationws.conditionenabled">
        <istrue value="${validationws.enabled}"/>
    </condition>
    <condition property="adminws.conditionenabled">
        <istrue value="${adminws.enabled}"/>
    </condition>
    <condition property="adminws.enabledconditionenabled">
        <istrue value="${adminws.enabled}"/>
    </condition>
    <condition property="includejaxws">
        <or>
            <istrue value="${genericws.enabled}"/>
        </or>
    </condition>
    <condition property="webdoc.conditionenabled">
        <istrue value="${webdoc.enabled}"/>
    </condition>
    <condition property="healthcheck.conditionenabled">
        <istrue value="${healthcheck.enabled}"/>
    </condition>

    <!-- Enable clients -->
    <condition property="timestampclient.conditionenabled">
        <istrue value="${timestampclient.enabled}"/>
    </condition>
    <condition property="validationclient.conditionenabled">
        <istrue value="${validationclient.enabled}"/>
    </condition>
    <condition property="pdfperformancetest.conditionenabled">
        <istrue value="${pdfperformancetest.enabled}"/>
    </condition>
    <condition property="signingandvalidationapi.conditionenabled">
        <istrue value="${signingandvalidationapi.enabled}"/>
    </condition>
    <condition property="admingui.conditionenabled">
        <istrue value="${admingui.enabled}"/>
    </condition>
    <condition property="clientcli.conditionenabled">
        <istrue value="${clientcli.enabled}"/>
    </condition>


    <!-- =================================================================== -->
    <!-- Find application server                                             -->
    <!-- =================================================================== -->

    <target name="-modules-set-appserver-home" depends="-set-from-file,-set-from-env">
<!--        <echo message="var.APPSRV_HOME = ${var.APPSRV_HOME}"/>-->
        <fail unless="var.APPSRV_HOME" message="Missing variable APPSRV_HOME. Either set the environment variable APPSRV_HOME or edit conf/signserver_build.propertes and set appserver.home."/>
        <property name="j2ee.server.home" value="${var.APPSRV_HOME}"/>
    </target>
    
    <target name="-set-from-file" unless="var.APPSRV_HOME">
        <!-- Read properties from the main SignServer configuration if available -->
        <property file="${user.home}/signserver_build.properties" />
        <property file="../../signserver_build.properties" />
        <property file="../../conf/signserver_build.properties" />
<!--        <echo message="appserver.home = ${appserver.home}"/>-->
        <!-- JBoss -->
        <available file="${appserver.home}/client/jbossall-client.jar" property="var.APPSRV_HOME" value="${appserver.home}" />
        <!-- GlassFish -->
        <available file="${appserver.home}/lib/appserv-rt.jar" property="var.APPSRV_HOME" value="${appserver.home}"/>
    </target>

    <target name="-set-from-env" unless="var.APPSRV_HOME">
        <!-- Get property from environment variable -->
        <property environment="env" />
<!--        <echo message="env.APPSRV_HOME = ${env.APPSRV_HOME}"/>-->
        <!-- JBoss -->
        <available file="${env.APPSRV_HOME}/client/jbossall-client.jar" property="var.APPSRV_HOME" value="${env.APPSRV_HOME}" />
        <!-- GlassFish -->
        <available file="${env.APPSRV_HOME}/lib/appserv-rt.jar" property="var.APPSRV_HOME" value="${env.APPSRV_HOME}"/>
    </target>

    <!-- =================================================================== -->
    <!-- Clean modules -->
    <!-- =================================================================== -->
    
    <target name="-do-clean-module">
        <echo>Cleaning ${ant.project.name}...</echo>
        <antcall target="clean"/>
    </target>

    <!-- =================================================================== -->
    <!-- Build modules -->
    <!-- =================================================================== -->

    <target name="modules" description="Build all enabled modules">
        <subant target="-do-module" verbose="false">
            <fileset dir="modules" includes="${modules.build.includes}"/>
        </subant>
    </target>
    
    <target name="-do-module-build" if="moduleEnable.condition">
        <echo message="Module: ${ant.project.name} enabled"/>
        <antcall target="dist-module"/>
        <copy todir="../../lib/">
            <fileset dir="./dist" includes="*.mar"/>
            <fileset dir="./dist" includes="*.jar"/>
        </copy>
        <antcall target="-post-module-include"/>
    </target>
        
    <!-- Override this target to copy additional files. -->
    <target name="-post-module-include"/>

    <target name="-do-module">
        <property file="${user.home}/signserver_build.properties"/>
        <property file="../../signserver_build.properties"/>
        <property file="../../conf/signserver_build.properties"/>
        <property file="../../res/modules-project.properties"/>
        <taskdef name="setmoduleprops"
            classname="org.signserver.anttasks.SetModuleEnablePropertiesTask"
            classpath="../SignServer-BuildTools/build/classes/"/>
        <setmoduleprops/>
        <property name="dist-module.available" value="false"/>
        <property name="moduleEnable" value="false"/>
        <condition property="moduleEnable.condition">
            <and>
                <or>
                    <istrue value="${moduleEnable}"/>
                    <istrue value="${includemodulesinbuild}"/>
                </or>
                <istrue value="${dist-module.available}"/>
            </and>
        </condition>
        <echo>Module: ${ant.project.name}</echo>
        <antcall target="-do-module-build"/>
    </target>

    <!-- Convert from a colon separated classpath to comma separated list with 
        some jars excluded -->
    <target name="-init-macrodef-convertclasspath">
        <macrodef name="convertclasspath">
            <attribute name="classpath"/>
            <attribute default="converted.classpath" name="id"/>
            <attribute default="" name="excludes"/>
            <attribute default="identity" name="mapperType"/>
            <attribute default="*" name="mapperTo"/>
            <attribute default="${basedir}/../../" name="dir"/>
            <attribute default="," name="pathsep"/>
            <sequential>
                <property name="@{id}.base.dir" location="@{dir}"/>

                <pathconvert property="@{id}.as_includes_pattern" pathsep="@{pathsep}">
                    <path path="@{classpath}"/>
                    <map from="${@{id}.base.dir}\" to=""/>
                    <map from="${@{id}.base.dir}/" to=""/>
                    <map from="${@{id}.base.dir}" to=""/>
                </pathconvert>
                <fileset dir="${@{id}.base.dir}" includes="${@{id}.as_includes_pattern}" id="@{id}.as_fileset" excludes="@{excludes}"/>
                <pathconvert property="@{id}" pathsep="@{pathsep}" refid="@{id}.as_fileset">
                    <map from="${@{id}.base.dir}\" to=""/>
                    <map from="${@{id}.base.dir}/" to=""/>
                    <map from="${@{id}.base.dir}" to=""/>
                    <chainedmapper>
                        <mapper type="@{mapperType}"/>
                        <globmapper from="*" to="@{mapperTo}" />
                    </chainedmapper>
                </pathconvert>
                
                <echo level="debug">
                    basedir             : ${@{id}.base.dir}
                    classpath           : @{classpath}
                    as_includes_pattern : ${@{id}.as_includes_pattern}
                    result              : ${@{id}}
                </echo>
            </sequential>
        </macrodef>
    </target>
    
    <!-- =================================================================== -->
    <!-- Client distributables                                               -->
    <!-- =================================================================== -->

    <!-- 
        Create class-path in JAR and copy jar to client-dist and its 
        dependencies to client-dist/lib.
        We do this manually to not have to rely on the copylibstask.
    -->
    <target name="-do-client-dist" depends="-init-macrodef-convertclasspath">
   
        <available file="${dist.jar}" property="dist.jar.available"/>
        <fail unless="dist.jar.available" message="Error: dist.jar should have been configured by the module: ${ant.project.name}"/>
        
        <!-- Convert classpath to be relative to the lib folders -->
        <convertclasspath classpath="${javac.classpath}" id="libs" excludes="modules/" dir="${basedir}/../../lib" pathsep=" "/>
        <convertclasspath classpath="${javac.classpath}" id="mods" excludes="lib/" mapperType="flatten" mapperTo="*" pathsep=" "/>
        <property name="jar.classpath" value="${libs} ${mods}"/>
        <jar file="${dist.jar}" update="true">
            <manifest>
                <attribute name="Class-Path" value="${jar.classpath}"/>
            </manifest>
        </jar>
        
        <!-- Move to lib -->
        <copy todir="../../lib" failonerror="true" file="${dist.jar}"/>
        
        <!-- Convert classpath to be relative to this modules dist folder -->
        <property name="base.dir" location="${distdir}/../../"/>
        <property name="base2.dir" location="${distdir}/../../../"/>
        <pathconvert property="localjar.classpath" pathsep=" ">
            <path path="${javac.classpath}"/>
            <map from="${base.dir}/" to="../../"/>
            <map from="${base2.dir}/" to="../../../"/>
        </pathconvert>
        <jar file="${dist.jar}" update="true">
            <manifest>
                <attribute name="Class-Path" value="${localjar.classpath}"/>
            </manifest>
        </jar>
            
    </target>

</project>