<?xml version="1.0" encoding="UTF-8"?>
<!-- ======================================================================= -->
<!--                                                                         -->
<!--  SignServer: The OpenSource Automated Signing Server                    -->
<!--                                                                         -->
<!--  This software is free software; you can redistribute it and/or         -->
<!--  modify it under the terms of the GNU Lesser General Public             -->
<!--  License as published by the Free Software Foundation; either           -->
<!--  version 2.1 of the License, or any later version.                      -->
<!--                                                                         -->
<!--  See terms of license at gnu.org.                                       -->
<!--                                                                         -->
<!-- ======================================================================= -->
<!-- Version: $Id$ -->
<project name="signserver" default="usage" basedir=".">

    <!-- Load properties before including files -->
    <property environment="env" />
    <property name="base" location="."/>

    <!-- Import property file containing version numbers and other constants -->
    <property file="src/compile.properties"/>
    <property file="src/signserver-project.properties"/>
    

    <!-- Give user a chance to override without editing this file
       (and without typing -D each time it compiles it).
       First it checks your home directory for signserver_build.properties
       net it checks the properties file here. -->
    <property file="${user.home}/${app.name}_build.properties" />
    <property file="${app.name}_build.properties" />
    <property file="conf/${app.name}_build.properties" />
 	
    <!--
    A little special something to handle backward compatibility with people
    using JBOSS_HOME. They can switch to APPSRV_HOME now, and both will work.
    -->
    <condition property="jboss.home" value="${env.JBOSS_HOME}" >
      <equals arg1="${appserver.home}" arg2="${appserver.home}"/>
    </condition>
    <condition property="appserver.home" value="${env.APPSRV_HOME}" else="${jboss.home}">
      <contains string="${jboss.home}" substring="JBOSS_HOME"/>
    </condition>
    <property name="j2ee.server.home" value="${appserver.home}"/>

    <!-- Lastly import the default properties -->
    <property file="src/default_build.properties"/>
    
    <condition property="j2ee.web-nohttps.condition">
        <istrue value="${j2ee.web-nohttps}"/>
    </condition>
    
    <!-- Import for the right appserver -->
    <import file="bin/${appserver.type}.xml" />  
	
    <import file="${custom.build.xml}" optional="true"/>

    <!-- Properties with paths to all module projects -->
    <property file="modules/modules-project.properties"/>

    <import file="modules/modules.xml" optional="true"/>
    
    <!-- Classpaths -->
    <path id="signserver.compile.classpath">
        <path refid="signserver.ext.classpath" />
        <fileset dir="dist-server/lib" includes="*.jar"/>
        <fileset dir="lib" includes="*.jar" />
        <fileset dir="lib/quartz" includes="*.jar" />
        <fileset dir="lib/${server.java.target}" includes="*.jar" />
	    
        <fileset dir="lib/module/tsa/${client.java.target}" includes="*.jar" />
        <fileset dir="lib/module/pdfsigner/itext" includes="*.jar"/>
        <fileset dir="lib/module/odfsigner" includes="*.jar"/>
        <fileset dir="lib/module/ooxmlsigner" includes="*.jar"/>
        <fileset dir="lib/jaxws" includes="*.jar" />
        <fileset dir="lib/asm" includes="*.jar" />
        <fileset dir="lib/hibernate" includes="*.jar"/>
        <fileset dir="${ant.home}/lib" includes="ant.jar" />
        <path refid="j2ee.classpath" />
	        
        <path location="tmp/jaxws/gen-classes/client" />
        <path location="tmp/validationws/gen-classes/client" />
    </path>

    <path id="server.compile.classpath">
        <path refid="signserver.compile.classpath" />
    </path>
		
    <path id="client.compile.classpath">
        <fileset dir="${client.primeCard.dist}" includes="*.jar" />
        <path refid="signserver.compile.classpath" />
    </path>
	
    <path id="signserver.ext.classpath">
        <fileset dir="lib/ext" includes="*.jar" />
    </path>
        
    <path id="j2ee.classpath">
        <fileset dir="${appserver.home}">
	        	<!-- jboss -->
            <include name="client/jbossall-client.jar" />
            <include name="client/jboss-j2ee.jar" />
            <include name="client/jboss-javaee.jar" />
            <include name="client/ejb3-persistence.jar" />
            <include name="client/jboss-ejb3x.jar" />
	        	<!-- glassfish -->
            <include name="lib/javaee.jar"/>
            <include name="lib/appserv-rt.jar"/>
	        	<!-- weblogic -->
            <include name="server/lib/weblogic.jar"/>
	        	<!-- oracle -->
            <include name="j2ee/home/oc4jclient.jar"/>
	        	<!-- websphere -->
            <include name="runtimes/com.ibm.*.jar"/>
        </fileset>
    </path>
    
    <import file="modules/compile.xml" optional="true"/>
    
    
    <target name="help" depends="usage"/>
    <target name="usage" description="Displays usage examples for this Ant script">
        <echo>
Usage examples for the SignServer Ant script


bin/ant -p                  Prints the main Ant targets supported by this 
                            script.
bin/ant usage               Prints this text with sample usages.
bin/ant clean               Cleans temporary files, the final EAR file and if 
                            this is a source distribution all the built 
                            binaries.

Some targets available in both binary and source distribution:
bin/ant display-properties  Prints the properties that will be used to build or
                            composing the EAR file.
bin/ant compose-ear         Puts together the final configured EAR file.
bin/ant deploy              Configures the EAR file and then deploys it and 
                            data sources etc (if supported) to the configured 
                            application server.

Some targets available only in the source distribution:
bin/ant build               Builds everything enabled.
bin/ant test:run            Run the default JUnit tests.
bin/ant test:compile        Compiles the tests so they can be run by an IDE.

To clean &amp; build and deploy run:
bin/ant clean build deploy
        </echo>
    </target>
    
    <target name="display-properties">
        <echo>
------------- SYSTEM PROPERTIES --------------
ANT version                         = ${ant.version}
JRE version                         = ${java.version}
JRE vendor                          = ${java.vendor}
Java home                           = ${java.home}
Java extensions dir                 = ${java.ext.dirs}
OS name                             = ${os.name}
OS architecture                     = ${os.arch}
OS version                          = ${os.version}
        </echo>

        <!-- Build properties, if source distribution -->
        <subant target="display-build-properties" inheritall="true">
            <fileset dir="modules" includes="compile.xml"/>
         </subant>
         
         <echo>
------------- CONFIG PROPERTIES --------------
appserver.type                      = ${appserver.type}
appserver.home                      = ${appserver.home}
web.contentencoding                 = ${web.contentencoding}
j2ee.web-nohttps                    = ${j2ee.web-nohttps}
datasource.jndi-name                = ${datasource.jndi-name}
datasource.jndi-name-prefix         = ${datasource.jndi-name-prefix}
database.name                       = ${database.name}
database.url                        = ${database.url}
database.driver                     = ${database.driver}
database.username                   = ${database.username}
database.password                   = ${database.password}
        </echo>
    </target>
    
    <target name="configure-client" description="Configure CLI and GUI">
        <!-- Make a copy of the signserver_cli.properties in bin dir -->
        <copy file="signserver_cli.properties" todir="bin" />

        <!-- Copy the correct jndi.properties for your appserver -->
        <copy file="bin/jndi.properties.${appserver.type}" tofile="bin/jndi.properties" overwrite="true" failonerror="true"/>
    </target>
    
    <target name="-check-built">
        <available file="${server.dist.dir}/SignServer-ejb.jar" property="signserver-ejb.jar.available"/>
        <fail message="SignServer needs to be built first. Run 'ant build'." unless="signserver-ejb.jar.available"/>
    </target>
    
    <target name="compose-ear" description="Compose the configured EAR file" depends="-check-built, display-properties, -init-configure, -configure-ear, -configure-SignServer-ejb.jar, -configure-SignServer-war-Healthcheck, -configure-SignServer-ejb-ValidationWS.jar, -configure-SignServer-ejb-SignServerWS.jar, -configure-SignServer-ejb-AdminWS.jar">
        
        <ear destfile="${server.dist.dir}/signserver.ear" appxml="${signserver.ear.dir}/META-INF/application.xml" duplicate="fail">
            <fileset dir="${signserver.ear.dir}">
                <exclude name="META-INF/application.xml" />
            </fileset>
            
             <!-- EJB3 has automatic inclusion of all jars in 'lib' to the classpath. The jars should not be in
             subdirectories though so we must flatten the structure. zipfileset is a good was of flattening the structure, so
             all jar files is directly in lib directory in the ear file -->
            <zipfileset dir="lib" includes="log4j.jar,ejbca-util.jar,cert-cvc.jar,commons-lang-2.4.jar,commons-fileupload-1.2.1.jar,commons-io-1.4.jar,commons-logging.jar,commons-collections-3.2.jar" prefix="lib"/>
            <zipfileset dir="lib/asm" includes="*.jar" prefix="lib"/>
            <zipfileset dir="lib/module/pdfsigner/itext" includes="*.jar"  prefix="lib"/>
            <zipfileset dir="lib/module/odfsigner" includes="*.jar" prefix="lib"/>
            <zipfileset dir="lib/module/ooxmlsigner" includes="*.jar" prefix="lib"/>
            <zipfileset dir="lib/module/wsra" includes="dom4j.jar,antlr.jar,cglib.jar" prefix="lib"/>
            <zipfileset dir="lib/quartz" includes="*.jar" prefix="lib"/>
            <zipfileset dir="lib/${server.java.target}" includes="*.jar" prefix="lib"/>
            <zipfileset dir="lib/jaxws/" prefix="lib" >
                <include name="*.jar" if="includejaxws" />
                <exclude name="saaj*.jar"/>
            </zipfileset>
            
            <!-- 
                TODO: Solve automatic inclusion of enterprise modules som other way
                -->
            <fileset dir="${server.dist.dir}">
                <include name="signserver.war" />
            </fileset>

            <!--
                Include application server depended extra JAR files.
                Edit ${appserver}.xml to define this set.
            -->
            <zipfileset refid="appserver.extralibs"/>

            <!-- Modules can be placed in dist-server/lib to be included in ear -->
            <zipfileset dir="${server.dist.dir}/lib" includes="*.jar" prefix="lib"/>
        </ear>
    
    </target>
    
    <target name="-init-configure">
        <echo>
Configuring EAR...    
        </echo>
        <condition property="no.signserverws">
            <isfalse value="${signserverws.enabled}"/>
        </condition>
        <condition property="no.validationws">
            <isfalse value="${validationws.enabled}"/>
        </condition>
        <condition property="no.adminws">
            <isfalse value="${adminws.enabled}"/>
        </condition>
        <condition property="no.webdoc">
            <isfalse value="${webdoc.enabled}"/>
        </condition>
    
        <property name="signserver.ear.dir" location="tmp/signserver.ear"/>
        <delete dir="${signserver.ear.dir}"/>
        <mkdir dir="${signserver.ear.dir}"/>
        
        <mkdir dir="${signserver.ear.dir}/META-INF"/>
        <copy todir="${signserver.ear.dir}">
            <fileset dir="src/deploy/ear" includes="*/*.*"/>
        </copy>
    </target>
    <target name="-configure-ear" depends="-init-configure, -configure-ear-module-signserverws, -configure-ear-module-validationws, -configure-ear-module-adminws, -configure-ear-module-doc"/>
    
    <target name="-configure-ear-module-signserverws" depends="-init-configure" unless="no.signserverws">
        <replace file="${signserver.ear.dir}/META-INF/application.xml" token="!--@signserverws-ejb.jar@-->" value="module&gt;&lt;ejb&gt;SignServer-ejb-SignServerWS.jar&lt;/ejb&gt;&lt;/module&gt;"/>
        <copy todir="${signserver.ear.dir}" file="${server.dist.dir}/SignServer-ejb-SignServerWS.jar"/>
    </target>
    
    <target name="-configure-ear-module-validationws" depends="-init-configure" unless="no.validationws">
        <replace file="${signserver.ear.dir}/META-INF/application.xml" token="!--@validationws-ejb.jar@-->" value="module>&lt;ejb>SignServer-ejb-ValidationWS.jar&lt;/ejb>&lt;/module>"/>
        <copy todir="${signserver.ear.dir}" file="${server.dist.dir}/SignServer-ejb-ValidationWS.jar"/>
    </target>
    
    <target name="-configure-ear-module-adminws" depends="-init-configure" unless="no.adminws">
        <replace file="${signserver.ear.dir}/META-INF/application.xml" token="!--@adminws-ejb.jar@-->" value="module>&lt;ejb>SignServer-ejb-AdminWS.jar&lt;/ejb>&lt;/module>"/>
        <copy todir="${signserver.ear.dir}" file="${server.dist.dir}/SignServer-ejb-AdminWS.jar"/>
    </target>
    
    <target name="-configure-ear-module-doc" depends="-init-configure" unless="no.webdoc">
        <replace file="${signserver.ear.dir}/META-INF/application.xml" token="!--@SignServer-war-Doc.war@-->" value="module>&lt;web>&lt;web-uri>SignServer-war-Doc.war&lt;/web-uri>&lt;context-root>/signserver/doc&lt;/context-root>&lt;/web>&lt;/module>"/>
        <copy todir="${signserver.ear.dir}" file="${server.dist.dir}/SignServer-war-Doc.war"/>
    </target>
    
    <target name="-preprocess-persistence" depends="-init-configure">
        <property name="persistence.xml" location="tmp/persistence.xml"/>
        <property name="entity-mappings.xml" location="tmp/entity-mappings.xml"/>
        
        <!-- Persistence -->
        <echo message="Database type:      ${database.name}"/>
        <echo message="DataSource mapping: ${datasource.jndi-name-prefix}${datasource.jndi-name}"/>
        <condition property="hibernate.dialect" value="org.hibernate.dialect.DB2Dialect">
            <equals arg1="${database.name}" arg2="db2"/>
        </condition>
        <condition property="hibernate.dialect" value="org.hibernate.dialect.DerbyDialect">
            <equals arg1="${database.name}" arg2="derby"/>
        </condition>
        <condition property="hibernate.dialect" value="org.hibernate.dialect.HSQLDialect">
            <equals arg1="${database.name}" arg2="hsqldb"/>
        </condition>
        <condition property="hibernate.dialect" value="org.hibernate.dialect.InformixDialect">
            <equals arg1="${database.name}" arg2="informix"/>
        </condition>
        <condition property="hibernate.dialect" value="org.hibernate.dialect.IngresDialect">
            <equals arg1="${database.name}" arg2="ingres"/>
        </condition>
        <condition property="hibernate.dialect" value="org.hibernate.dialect.SQLServerDialect">
            <equals arg1="${database.name}" arg2="mssql"/>
        </condition>
        <condition property="hibernate.dialect" value="org.hibernate.dialect.MySQLDialect">
            <equals arg1="${database.name}" arg2="mysql"/>
        </condition>
        <condition property="hibernate.dialect" value="org.hibernate.dialect.Oracle10gDialect">
            <equals arg1="${database.name}" arg2="oracle"/>
        </condition>
        <condition property="hibernate.dialect" value="org.hibernate.dialect.PostgreSQLDialect">
            <equals arg1="${database.name}" arg2="postgres"/>
        </condition>
        <condition property="hibernate.dialect" value="org.hibernate.dialect.SybaseDialect">
            <equals arg1="${database.name}" arg2="sybase"/>
        </condition>
        <fail unless="hibernate.dialect" message="Unsupported database type '${database.name}'."/>
        <mkdir dir="${build}/META-INF"/>
        <copy file="src/appserver/${appserver.type}/persistence.xml" tofile="${persistence.xml}" failonerror="true" overwrite="true">
            <filterchain>
                <expandproperties/>
            </filterchain>
        </copy>
        
        <!-- Entity mappings -->
        <copy file="src/deploy/ejb/persistence-mappings/${database.name}/entity-mappings.xml" tofile="${entity-mappings.xml}"/>
    </target>
    
    <target name="-configure-SignServer-ejb.jar" depends="-init-configure, -preprocess-persistence">
        <property name="SignServer-ejb.jar.dir" location="tmp/SignServer-ejb.jar"/>
        <delete dir="${SignServer-ejb.jar.dir}"/>
        <mkdir dir="${SignServer-ejb.jar.dir}"/>
        <mkdir dir="${SignServer-ejb.jar.dir}/META-INF"/>
    
        <!-- Update SignServer-ejb.jar -->
        <zip destfile="${signserver.ear.dir}/SignServer-ejb.jar" duplicate="fail">
            <zipfileset src="${server.dist.dir}/SignServer-ejb.jar">
                <exclude name="META-INF/persistence.xml"/>
                <exclude name="META-INF/entity-mappings.xml"/>
            </zipfileset>
            <zipfileset file="${persistence.xml}" prefix="META-INF"/>
            <zipfileset file="${entity-mappings.xml}" prefix="META-INF"/>
        </zip>
    </target>
    
    <target name="-configure-SignServer-ejb-ValidationWS.jar" depends="-init-configure, -preprocess-persistence" unless="no.validationws">
        <property name="signserver-ejb-ValidationWS.jar.dir" location="tmp/signserver-ejb-ValidationWS.jar.dir"/>
        <delete dir="${signserver-ejb-ValidationWS.jar.dir}"/>
        <mkdir dir="${signserver-ejb-ValidationWS.jar.dir}"/>
        <mkdir dir="${signserver-ejb-ValidationWS.jar.dir}/META-INF"/>
    
        <unzip src="${server.dist.dir}/SignServer-ejb-ValidationWS.jar" dest="${signserver-ejb-ValidationWS.jar.dir}">
            <patternset>
                <include name="META-INF/ejb-jar.xml"/>
            </patternset>
        </unzip>
    
        <copy file="${signserver-ejb-ValidationWS.jar.dir}/META-INF/ejb-jar.xml" tofile="${signserver-ejb-ValidationWS.jar.dir}/META-INF/ejb-jar.xml.2"
            failonerror="true" overwrite="true">
                <filterchain>
                    <expandproperties/>
                </filterchain>
        </copy>
        <copy file="${signserver-ejb-ValidationWS.jar.dir}/META-INF/ejb-jar.xml.2" tofile="${signserver-ejb-ValidationWS.jar.dir}/META-INF/ejb-jar.xml" overwrite="true"/>
        
        <!-- Update JAR -->
        <zip destfile="${signserver.ear.dir}/SignServer-ejb-ValidationWS.jar" duplicate="fail">
            <zipfileset src="${server.dist.dir}/SignServer-ejb-ValidationWS.jar">
                <exclude name="META-INF/ejb-jar.xml"/>
            </zipfileset>
            <zipfileset dir="${signserver-ejb-ValidationWS.jar.dir}">
                <include name="META-INF/ejb-jar.xml" />
            </zipfileset>
        </zip>
    </target>
    
    <target name="-configure-SignServer-ejb-SignServerWS.jar" depends="-init-configure, -preprocess-persistence" unless="no.signserverws">
        <property name="signserver-ejb-SignServerWS.jar.dir" location="tmp/signserver-ejb-SignServerWS.jar"/>
        <delete dir="${signserver-ejb-SignServerWS.jar.dir}"/>
        <mkdir dir="${signserver-ejb-SignServerWS.jar.dir}"/>
        <mkdir dir="${signserver-ejb-SignServerWS.jar.dir}/META-INF"/>
    
        <unzip src="${server.dist.dir}/SignServer-ejb-SignServerWS.jar" dest="${signserver-ejb-SignServerWS.jar.dir}">
            <patternset>
                <include name="META-INF/ejb-jar.xml"/>
            </patternset>
        </unzip>
    
        <copy file="${signserver-ejb-SignServerWS.jar.dir}/META-INF/ejb-jar.xml" tofile="${signserver-ejb-SignServerWS.jar.dir}/META-INF/ejb-jar.xml.2"
            failonerror="true" overwrite="true">
                <filterchain>
                    <expandproperties/>
                </filterchain>
        </copy>
        <copy file="${signserver-ejb-SignServerWS.jar.dir}/META-INF/ejb-jar.xml.2" tofile="${signserver-ejb-SignServerWS.jar.dir}/META-INF/ejb-jar.xml" overwrite="true"/>
        
        <!-- Update JAR -->
        <zip destfile="${signserver.ear.dir}/SignServer-ejb-SignServerWS.jar" duplicate="fail">
            <zipfileset src="${server.dist.dir}/SignServer-ejb-SignServerWS.jar">
                <exclude name="META-INF/ejb-jar.xml"/>
            </zipfileset>
            <zipfileset dir="${signserver-ejb-SignServerWS.jar.dir}">
                <include name="META-INF/ejb-jar.xml" />
            </zipfileset>
        </zip>
    </target>
    
    <target name="-configure-SignServer-ejb-AdminWS.jar" depends="-init-configure, -preprocess-persistence" unless="no.adminws">
        <!-- Nothing to do -->
        <copy todir="${signserver.ear.dir}">
            <fileset file="${server.dist.dir}/SignServer-ejb-AdminWS.jar"/>
        </copy>    
    </target>
    
    <target name="-configure-SignServer-war-Healthcheck" depends="-init-configure">
        <property name="healthcheck.war.dir" location="tmp/healthcheck.war"/>
        <delete dir="${healthcheck.war.dir}"/>
        <mkdir dir="${healthcheck.war.dir}"/>
        <mkdir dir="${healthcheck.war.dir}/WEB-INF"/>
        
        <unzip src="${server.dist.dir}/SignServer-war-Healthcheck.war" dest="${healthcheck.war.dir}">
            <patternset>
                <include name="WEB-INF/web.xml"/>
            </patternset>
        </unzip>
        
        <!-- Configure -->
        <copy file="${healthcheck.war.dir}/WEB-INF/web.xml" tofile="${healthcheck.war.dir}/WEB-INF/web.xml.2" overwrite="true">
            <filterchain>
                <tokenfilter>
                    <replacestring from="@datasource.jndi-name-prefix@"
                        to="${datasource.jndi-name-prefix}"/>
                    <replacestring from="@datasource.jndi-name@"
                        to="${datasource.jndi-name}"/>
                    <replacestring from="@healthcheck.authorizedips@"
                        to="${healthcheck.authorizedips}"/>
                    <replacestring from="@healthcheck.minimumfreememory@"
                        to="${healthcheck.minimumfreememory}"/>
                    <replacestring from="@healthcheck.checkdbstring@"
                        to="${healthcheck.checkdbstring}"/>
                </tokenfilter>
            </filterchain>
        </copy>
        <copy file="${healthcheck.war.dir}/WEB-INF/web.xml.2" tofile="${healthcheck.war.dir}/WEB-INF/web.xml" overwrite="true"/>
    
        <!-- Update web -->
        <zip destfile="${signserver.ear.dir}/SignServer-war-Healthcheck.war" duplicate="fail">
            <zipfileset src="${server.dist.dir}/SignServer-war-Healthcheck.war">
                <exclude name="WEB-INF/web.xml"/>
            </zipfileset>
            <zipfileset dir="${healthcheck.war.dir}">
                <include name="WEB-INF/web.xml" />
            </zipfileset>
        </zip>
    </target>
    
    <target name="-configure-SignServer-Common.jar" depends="-init-configure">
        <property name="SignServer-Common.jar.dir" location="tmp/SignServer-Common.jar"/>
        <delete dir="${SignServer-Common.jar.dir}"/>
        <mkdir dir="${SignServer-Common.jar.dir}"/>
    
        <propertyfile file="${SignServer-Common.jar.dir}/org/signserver/common/signservercompile.properties" 
            comment="SignServer compile-time properties. Generated file do not edit manually!">
            <entry key="appname" value="${app.name}"/>
            <entry key="appname_capital" value="${app.name.cap}"/>
            <entry key="buildmode" value="${build.mode}"/>
            <entry key="datasource.jndi-name-prefix" value="${datasource.jndi-name-prefix}"/>
            <entry key="datasource.jndi-name" value="${datasource.jndi-name}"/>
            <entry key="healthcheck.authorizedips" value="${healthcheck.authorizedips}"/>
            <entry key="healthcheck.minimumfreememory" value="${healthcheck.minimumfreememory}"/>
            <entry key="healthcheck.checkdbstring" value="${healthcheck.checkdbstring}"/>
            <entry key="signserver.useclusterclassloader" value="${useclusterclassloader}"/>
            <entry key="signserver.useclassversions" value="${clusterclassloader.useclassversions}"/>
            <entry key="signserver.requiresignature" value="${clusterclassloader.requiresignature}"/>
            <entry key="signserver.pathtotruststore" value="${clusterclassloader.pathtotruststore}"/>
            <entry key="signserver.truststorepwd" value="${clusterclassloader.truststorepwd}"/>
            <entry key="SignServerCommandFactory" value="${custom.commandfactory}"/>
            <entry key="signserver.configfile" value="${signserver.configfile}"/>
            <entry key="signserver.version" value="${app.version}"/>
        </propertyfile>
        
        <!-- Update JAR -->
        <zip destfile="${signserver.ear.dir}/lib/SignServer-Common.jar" duplicate="fail">
            <zipfileset src="${server.dist.dir}/lib/SignServer-Common.jar">
                <exclude name="org/signserver/common/signservercompile.properties"/>
            </zipfileset>
            <zipfileset dir="${SignServer-Common.jar.dir}">
                <include name="org/signserver/common/signservercompile.properties" />
            </zipfileset>
        </zip>
    </target>

    



    <!-- =================================================================== -->
    <!-- Main Clean                                                          -->
    <!-- =================================================================== -->

    <target name="clean">
        <echo>Cleaning tmp</echo>
        <delete dir="${tmp}"/>	

        <!-- Clean everything if this is a source distribution -->
        <subant target="clean-build" inheritall="true">
            <fileset dir="modules" includes="compile.xml"/>
         </subant>
    </target>

    <!-- =================================================================== -->
    <!-- Other part                                                        -->
    <!-- =================================================================== -->

    <target name="showtime">
        <tstamp>
                <format property="completiontime" pattern="yyyy-MM-dd HH:mm:ss Z"/>
        </tstamp>
        <echo message="Task completed ${completiontime}."/>
    </target>
 
    
    <!-- ======================================================================= -->
    <!-- Deploy Sign Server ear to JBoss                                               -->
    <!-- ======================================================================= -->
    <target name="deploy" depends="compose-ear, j2ee:deploy" description="Deploys SignServer">
        <antcall target="showtime" />
    </target>

   
</project>
